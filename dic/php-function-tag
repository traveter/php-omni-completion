abs	絶対値	number abs ( mixed $number )	number の絶対値を返します。もし number の型が float であった場合、 返り値の型も float となります。それ以外の場合は 返り値の型は integer となります（float は、 integer の最大値より大きい値をとることがありえるからです）。
acos	逆余弦（アークコサイン）	float acos ( float $arg )	arg のアークコサインをラジアンで返します。
acosh	逆双曲線余弦（アークハイパボリックコサイン）	float acosh ( float $arg )	arg のアークハイパボリックコサインを返します。
addcslashes	C 言語と同様にスラッシュで文字列をクォートする	string addcslashes ( string $str , string $charlist )	エスケープされた文字列を返します。
addslashes	文字列をスラッシュでクォートする	string addslashes ( string $str )	エスケープされた文字列を返します。
aggregate_info	指定したオブジェクトの集約情報を取得する	array aggregate_info ( object $object )	指定したオブジェクトに関する集約の情報を返します。返される値は、 メソッドとプロパティの配列を要素とする連想配列形式となります。 連想配列のキーは、集約されたクラス名となります。
aggregate_methods_by_list	選択したクラスメソッドを、動的にオブジェクトに集約する	void aggregate_methods_by_list ( object $object , string $class_name , array $methods_list [, bool $exclude = false ] )	値を返しません。
aggregate_methods_by_regexp	正規表現を使用して選択したクラスメソッドを、 動的にオブジェクトに集約する	void aggregate_methods_by_regexp ( object $object , string $class_name , string $regexp [, bool $exclude = false ] )	値を返しません。
aggregate_methods	クラスのメソッドを、動的にオブジェクトに集約する	void aggregate_methods ( object $object , string $class_name )	値を返しません。
aggregate_properties_by_list	選択したクラスプロパティを、動的にオブジェクトに集約する	void aggregate_properties_by_list ( object $object , string $class_name , array $properties_list [, bool $exclude = false ] )	値を返しません。
aggregate_properties_by_regexp	正規表現を使用して選択したクラスプロパティを、 動的にオブジェクトに集約する	void aggregate_properties_by_regexp ( object $object , string $class_name , string $regexp [, bool $exclude = false ] )	値を返しません。
aggregate_properties	クラスのプロパティを、動的にオブジェクトに集約する	void aggregate_properties ( object $object , string $class_name )	値を返しません。
aggregate	メソッドおよびプロパティの動的なクラス/オブジェクト集約を行う	void aggregate ( object $object , string $class_name )	値を返しません。
aggregation_info	aggregate_info() のエイリアス
apache_child_terminate	このリクエストの後にApacheプロセスを終了する	bool apache_child_terminate ( void )	もし PHP が Apache 1 モジュールとして実行している場合、TRUE を返します。 この Apache バージョンはマルチスレッドバージョンではなく、 child_terminate PHP ディレクティブは有効です (デフォルトは無効) 。 もしこれらの条件に適合しない場合 FALSE が返され、エラーレベル E_WARNING が発生します。
apache_get_modules	ロードされた Apache モジュールのリストを取得する	array apache_get_modules ( void )	ロードされた Apache モジュールの配列 array を返します。
apache_get_version	Apache のバージョンを取得する	string apache_get_version ( void )	成功時は Apache のバージョン、失敗した場合に FALSE を返します。
apache_getenv	Apache の subprocess_env 変数を取得する	string apache_getenv ( string $variable [, bool $walk_to_top = false ] )	成功時は Apache 環境変数の値、失敗時は FALSE を返します。
apache_lookup_uri	リクエストの一部を指定したURIに対して行い、全ての情報を返す	object apache_lookup_uri ( string $filename )	URI に関する情報のオブジェクトです。返される object のプロパティは次のようなものです。
apache_note	Apacheリクエスト記号(note)を取得/設定する	string apache_note ( string $note_name [, string $note_value = "" ] )	引数が1つだけ指定されてコールされた場合、 現在の記号の値note_nameが返されます。 引数が2つ指定されてコールされた場合、記号note_name の値をnote_valueにセットし、前の記号 note_nameの値を返します。 もし記号が処理できない場合、FALSE が返されます。
apache_request_headers	すべての HTTP リクエストヘッダを取得する	array apache_request_headers ( void )	現在のリクエストにおけるすべての HTTP ヘッダの連想配列、 あるいは失敗時は FALSE を返します。
apache_reset_timeout	Apache の書き込みタイマーをリセットする	bool apache_reset_timeout ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
apache_response_headers	HTTPレスポンスヘッダを全て取得する	array apache_response_headers ( void )	全てのApacheレスポンスヘッダの配列、失敗した場合に FALSE を返します。
apache_setenv	Apacheサブプロセスの環境変数を設定する	bool apache_setenv ( string $variable , string $value [, bool $walk_to_top = false ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
apc_add	新規の変数をデータ領域にキャッシュする	bool apc_add ( string $key , mixed $var [, int $ttl = 0 ] )	何かがキャッシュに正しく追加されたときに TRUE、それ以外の場合に FALSE を返します。 二番目の構文は、エラーになったキーを含む配列を返します。
apc_bin_dump	指定したファイルおよびユーザー変数のバイナリダンプを取得する	string apc_bin_dump ([ array $files = NULL [, array $user_vars = NULL ]] )	指定したファイルおよびユーザー変数のバイナリダンプを APC キャッシュから返します。 APC が有効でない場合は FALSE、未知のエラーが発生した場合は NULL を返します。
apc_bin_dumpfile	キャッシュされたファイルやユーザー変数のバイナリダンプをファイルに出力する	int apc_bin_dumpfile ( array $files , array $user_vars , string $filename [, int $flags = 0 [, resource $context = NULL ]] )	The number of bytes written to the file, otherwise FALSE if APC is not enabled, filename is an invalid file name, filename can't be opened, the file dump can't be completed (e.g., the hard drive is out of disk space), or an unknown error was encountered.
apc_bin_load	バイナリダンプを APC のファイル/ユーザーキャッシュに読み込む	bool apc_bin_load ( string $data [, int $flags = 0 ] )	バイナリダンプの読み込みに成功した場合に TRUE、 それ以外の場合に FALSE を返します。FALSE が返される理由には、 APC が有効でない場合や data が有効な APC バイナリダンプでない (予期せぬサイズなど) 場合などがあります。
apc_bin_loadfile	バイナリダンプをファイルから APC のファイル/ユーザーキャッシュに読み込む	bool apc_bin_loadfile ( string $filename [, resource $context = NULL [, int $flags = 0 ]] )	バイナリダンプの読み込みに成功した場合に TRUE、 それ以外の場合に FALSE を返します。FALSE が返される理由には、 APC が有効でない場合や filename が無効なファイルの場合、空のファイルの場合、 filename のオープンに失敗した場合、 ダンプが不完全な場合、そして data が有効な APC バイナリダンプでない (予期せぬサイズなど) 場合などがあります。
apc_cache_info	APC のデータから、キャッシュされた情報を取得する	array apc_cache_info ([ string $cache_type = "" [, bool $limited = false ]] )	キャッシュされたデータ（およびメタデータ）の配列を返します。 失敗した場合に FALSE を返します
apc_cas	古い値を新しい値に更新する	bool apc_cas ( string $key , int $old , int $new )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
apc_clear_cache	APC キャッシュをクリアする	bool apc_clear_cache ([ string $cache_type = "" ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
apc_compile_file	ファイルをバイトコードキャッシュに保存し、すべてのフィルタをバイパスする	mixed apc_compile_file ( string $filename [, bool $atomic = true ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
apc_dec	保存した数値を減らす	int apc_dec ( string $key [, int $step = 1 [, bool &$success ]] )	成功した場合に key の現在値を返します。 失敗した場合に FALSE を返します
apc_define_constants	定数の組を定義し、それを取得あるいは一括定義する	bool apc_define_constants ( string $key , array $constants [, bool $case_sensitive = true ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
apc_delete_file	ファイルを opcode キャッシュから削除する	mixed apc_delete_file ( mixed $keys )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 keys が配列なら、 成功した場合は空の配列を返します。失敗した場合は失敗したファイルを含む配列を返します。
apc_delete	格納されている変数をキャッシュから取り除く	mixed apc_delete ( string $key )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
apc_exists	APC キーが存在するかどうかを調べる	mixed apc_exists ( mixed $keys )	キーが存在する場合に TRUE、それ以外の場合に FALSE を返します。 keys に配列を渡したときは、 存在するキーをすべて含む配列を返します。 どれも存在しない場合は空の配列を返します。
apc_fetch	格納されている変数をキャッシュから取得する	mixed apc_fetch ( mixed $key [, bool &$success ] )	成功した場合に格納されていた変数 (あるいは配列)、失敗した場合に FALSE を返します。
apc_inc	保存した数値を増やす	int apc_inc ( string $key [, int $step = 1 [, bool &$success ]] )	成功した場合に key の現在値を返します。 失敗した場合に FALSE を返します
apc_load_constants	定数群をキャッシュから読み込む	bool apc_load_constants ( string $key [, bool $case_sensitive = true ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
apc_sma_info	APC の共有メモリ割り当てに関する情報を取得する	array apc_sma_info ([ bool $limited = false ] )	共有メモリ割り当てデータの配列を返します。失敗した場合は FALSE を返します。
apc_store	変数をデータ領域にキャッシュする	bool apc_store ( string $key , mixed $var [, int $ttl = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 二番目の構文は、エラーになったキーを含む配列を返します。
apd_breakpoint	インタプリタの処理を停止し、ソケットからの CR を待つ	bool apd_breakpoint ( int $debug_level )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
apd_callstack	現在のコールスタックを配列で返す	array apd_callstack ( void )	現在のコールスタックを含む配列を返します。
apd_clunk	警告とコールスタックをスローする	void apd_clunk ( string $warning [, string $delimiter = "<BR />" ] )	値を返しません。
apd_continue	インタプリタを再開する	bool apd_continue ( int $debug_level )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
apd_croak	エラーとコールスタックをスローし、終了する	void apd_croak ( string $warning [, string $delimiter = "<BR />" ] )	値を返しません。
apd_dump_function_table	現在の関数テーブルを出力する	void apd_dump_function_table ( void )	値を返しません。
apd_dump_persistent_resources	すべての持続的なリソースを配列で返す	array apd_dump_persistent_resources ( void )	現在のコールスタックを含む配列を返します。
apd_dump_regular_resources	現在のすべての一般リソースを配列で返す	array apd_dump_regular_resources ( void )	現在の一般リソースを含む配列を返します。
apd_echo	デバッグ用ソケットに表示する	bool apd_echo ( string $output )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
apd_get_active_symbols	ローカルスコープ内の現在の変数名を配列で取得する	array apd_get_active_symbols ( void )	すべての変数を含む多次元配列を返します。
apd_set_pprof_trace	セッションのデバッグを開始する	string apd_set_pprof_trace ([ string $dump_directory = ini_get("apd.dumpdir") [, string $fragment = "pprof" ]] )	対象となるファイルへのパスを返します。
apd_set_session_trace_socket	リモートセッションのデバッグを開始する	bool apd_set_session_trace_socket ( string $tcp_server , int $socket_type , int $port , int $debug_level )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
apd_set_session_trace	セッションのデバッグを開始する	void apd_set_session_trace ( int $debug_level [, string $dump_directory = ini_get("apd.dumpdir") ] )	値を返しません。
apd_set_session	現在のデバッグレベルを変更あるいは設定する	void apd_set_session ( int $debug_level )	値を返しません。
array_change_key_case	配列のすべてのキーの大文字小文字を変更する	array array_change_key_case ( array $input [, int $case = CASE_LOWER ] )	すべてのキーを小文字あるいは大文字にした配列を返します。 input が配列でない場合は FALSE を返します。
array_chunk	配列を分割する	array array_chunk ( array $input , int $size [, bool $preserve_keys = false ] )	数値添字の多次元配列を返します。添え字はゼロから始まり、 各次元の要素数が size となります。
array_column	入力配列から単一のカラムの値を返す	array array_column ( array $input , mixed $column_key [, mixed $index_key = null ] )	入力配列の単一のカラムを表す値の配列を返します。
array_combine	一方の配列をキーとして、もう一方の配列を値として、ひとつの配列を生成する	array array_combine ( array $keys , array $values )	作成した配列を返します。 互いの配列の要素の数が合致しない場合に FALSE を返します。
array_count_values	配列の値の数を数える	array array_count_values ( array $input )	input のキーとその登場回数を組み合わせた連想配列を返します。
array_diff_assoc	追加された添字の確認を含めて配列の差を計算する	array array_diff_assoc ( array $array1 , array $array2 [, array $... ] )	array1 の要素のうち、 その他の配列のいずれにも含まれないものだけを残した配列を返します。
array_diff_key	キーを基準にして配列の差を計算する	array array_diff_key ( array $array1 , array $array2 [, array $... ] )	array1 の要素のうち、 その他の配列のいずれにも含まれないキーのものだけを残した配列を返します。
array_diff_uassoc	ユーザーが指定したコールバック関数を利用し、 追加された添字の確認を含めて配列の差を計算する	array array_diff_uassoc ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )	array1 の要素のうち、 その他の配列のいずれにも含まれないものだけを残した配列を返します。
array_diff_ukey	キーを基準にし、コールバック関数を用いて配列の差を計算する	array array_diff_ukey ( array $array1 , array $array2 [, array $ ... ], callable $key_compare_func )	array1 の要素のうち、 その他の配列のいずれにも含まれないものだけを残した配列を返します。
array_diff	配列の差を計算する	array array_diff ( array $array1 , array $array2 [, array $... ] )	array1 のエントリのうち、他のどの配列にも含まれない要素のみを含む配列を返します。
array_fill_keys	キーを指定して、配列を値で埋める	array array_fill_keys ( array $keys , mixed $value )	値を埋めた配列を返します。
array_fill	配列を指定した値で埋める	array array_fill ( int $start_index , int $num , mixed $value )	値を埋めた配列を返します。
array_filter	コールバック関数を使用して、配列の要素をフィルタリングする	array array_filter ( array $input [, callable $callback = "" ] )	フィルタリングされた結果の配列を返します。
array_flip	配列のキーと値を反転する	array array_flip ( array $trans )	成功した場合に反転した配列、失敗した場合に NULL を返します。
array_intersect_assoc	追加された添字の確認も含めて配列の共通項を確認する	array array_intersect_assoc ( array $array1 , array $array2 [, array $ ... ] )	array1 の値のうち、すべての引数に存在するものを含む連想配列を返します。
array_intersect_key	キーを基準にして配列の共通項を計算する	array array_intersect_key ( array $array1 , array $array2 [, array $ ... ] )	array1 のエントリのうち、 すべての引数に存在するキーのものを含む連想配列を返します。
array_intersect_uassoc	追加された添字の確認も含め、コールバック関数を用いて 配列の共通項を確認する	array array_intersect_uassoc ( array $array1 , array $array2 [, array $ ... ], callable $key_compare_func )	array1 の値のうち、 すべての引数に存在するもののみを返します。
array_intersect_ukey	キーを基準にし、コールバック関数を用いて 配列の共通項を計算する	array array_intersect_ukey ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )	array1 の値のうち、 すべての引数に存在するキーのものを含む連想配列を返します。
array_intersect	配列の共通項を計算する	array array_intersect ( array $array1 , array $array2 [, array $ ... ] )	array1 の値のうち、 すべての引数に存在する値のものを含む連想配列を返します。
array_key_exists	指定したキーまたは添字が配列にあるかどうかを調べる	bool array_key_exists ( mixed $key , array $search )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
array_keys	配列のキーすべて、あるいはその一部を返す	array array_keys ( array $input [, mixed $search_value = NULL [, bool $strict = false ]] )	input のすべてのキーを配列で返します。
array_map	指定した配列の要素にコールバック関数を適用する	array array_map ( callable $callback , array $arr1 [, array $... ] )	arr1 の各要素に callback 関数を適用した後、 その全ての要素を含む配列を返します。
array_merge_recursive	二つ以上の配列を再帰的にマージする	array array_merge_recursive ( array $array1 [, array $... ] )	すべての引数の配列をマージした結果の配列を返します。
array_merge	ひとつまたは複数の配列をマージする	array array_merge ( array $array1 [, array $... ] )	結果の配列を返します。
array_multisort	複数の多次元の配列をソートする	bool array_multisort ( array &$arr [, mixed $arg = SORT_ASC [, mixed $arg = SORT_REGULAR [, mixed $... ]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
array_pad	指定長、指定した値で配列を埋める	array array_pad ( array $input , int $pad_size , mixed $pad_value )	pad_size で指定した長さになるように値 pad_value で埋めて input のコピーを返します。 pad_size が正の場合、配列の右側が埋められます。 負の場合、配列の左側が埋められます。 pad_size の絶対値が input の長さ以下の場合、埋める処理は行われません。
array_pop	配列の末尾から要素を取り除く	mixed array_pop ( array &$array )	配列 array の最後の値を取り出して返します。 array が空 (または、配列でない) の場合、 NULL が返されます。
array_product	配列の値の積を計算する	number array_product ( array $array )	積を、integer あるいは float で返します。
array_push	一つ以上の要素を配列の最後に追加する	int array_push ( array &$array , mixed $var [, mixed $... ] )	処理後の配列の中の要素の数を返します。
array_rand	配列から一つ以上の要素をランダムに取得する	mixed array_rand ( array $input [, int $num_req = 1 ] )	エントリを一つだけ取得する場合、 array_rand() はランダムなエントリのキーを返します。 その他の場合は、ランダムなエントリのキーの配列を返します。 これにより、ランダムなキーを取得し、 配列から値を取得することが可能になります。
array_reduce	コールバック関数を用いて配列を普通の値に変更することにより、配列を再帰的に減らす	mixed array_reduce ( array $input , callable $function [, mixed $initial = NULL ] )	結果の値を返します。
array_replace_recursive	渡された配列の要素を再帰的に置き換える	array array_replace_recursive ( array $array , array $array1 [, array $... ] )	配列を返します。エラーが発生した場合は NULL を返します。
array_replace	渡された配列の要素を置き換える	array array_replace ( array $array , array $array1 [, array $... ] )	配列を返します。エラーが発生した場合は NULL を返します。
array_reverse	要素を逆順にした配列を返す	array array_reverse ( array $array [, bool $preserve_keys = false ] )	逆転させた配列を返します。
array_search	指定した値を配列で検索し、見つかった場合に対応するキーを返す	mixed array_search ( mixed $needle , array $haystack [, bool $strict = false ] )	needle が見つかった場合に配列のキー、 それ以外の場合に FALSE を返します。
array_shift	配列の先頭から要素を一つ取り出す	mixed array_shift ( array &$array )	取り出した値を返します。array が空の場合や配列でない場合は NULL を返します。
array_slice	配列の一部を展開する	array array_slice ( array $array , int $offset [, int $length = NULL [, bool $preserve_keys = false ]] )	切り取った部分を返します。
array_splice	配列の一部を削除し、他の要素で置換する	array array_splice ( array &$input , int $offset [, int $length = count($input) [, mixed $replacement = array() ]] )	抽出された要素を含む配列を返します。
array_sum	配列の中の値の合計を計算する	number array_sum ( array $array )	値の合計を整数または float として返します。
array_udiff_assoc	データの比較にコールバック関数を用い、 追加された添字の確認を含めて配列の差を計算する	array array_udiff_assoc ( array $array1 , array $array2 [, array $ ... ], callable $data_compare_func )	array_udiff_assoc() は、 array1 から他の引数の配列の中に現れない全ての値を含む array を返します。 array_diff() や array_udiff() と異なり、キーが比較に使用されることに注意してください。 配列のデータの比較は、ユーザーが指定したコールバックを用いて行われます。 この点で、 array_diff_assoc() は反対の動作、つまり 内部関数を利用した比較を行います。
array_udiff_uassoc	データと添字の比較にコールバック関数を用い、 追加された添字の確認を含めて配列の差を計算する	array array_udiff_uassoc ( array $array1 , array $array2 [, array $ ... ], callable $data_compare_func , callable $key_compare_func )	array1 から他の引数の配列の中に現れない全ての 値を含むarray を返します。
array_udiff	データの比較にコールバック関数を用い、配列の差を計算する	array array_udiff ( array $array1 , array $array2 [, array $ ... ], callable $data_compare_func )	他の引数のいずれにも存在しない array1 の値の全てを有する配列を返します。
array_uintersect_assoc	データの比較にコールバック関数を用い、 追加された添字の確認も含めて配列の共通項を計算する	array array_uintersect_assoc ( array $array1 , array $array2 [, array $ ... ], callable $data_compare_func )	全ての引数に現れる array1 の全ての値を含む配列を返します。
array_uintersect_uassoc	データと添字の比較にコールバック関数を用い、 追加された添字の確認も含めて配列の共通項を計算する	array array_uintersect_uassoc ( array $array1 , array $array2 [, array $ ... ], callable $data_compare_func , callable $key_compare_func )	全ての引数に現れる array1 の全ての値を含む配列を返します。
array_uintersect	データの比較にコールバック関数を用い、配列の共通項を計算する	array array_uintersect ( array $array1 , array $array2 [, array $ ... ], callable $data_compare_func )	他の全ての引数に存在する array1 の値を全て有する配列を返します。
array_unique	配列から重複した値を削除する	array array_unique ( array $array [, int $sort_flags = SORT_STRING ] )	処理済の配列を返します。
array_unshift	一つ以上の要素を配列の最初に加える	int array_unshift ( array &$array , mixed $var [, mixed $... ] )	処理後の array の要素の数を返します。
array_values	配列の全ての値を返す	array array_values ( array $input )	数値添字の値の配列を返します。
array_walk_recursive	配列の全ての要素に、ユーザー関数を再帰的に適用する	bool array_walk_recursive ( array &$input , callable $funcname [, mixed $userdata = NULL ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
array_walk	配列の全ての要素にユーザー関数を適用する	bool array_walk ( array &$array , callable $funcname [, mixed $userdata = NULL ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
array	配列を生成する	array array ([ mixed $... ] )	パラメータの配列を返します。パラメータには、 =>演算子によりインデックスを指定することもできます。 配列に関するより詳しい情報は配列型 のセクションをご覧ください。
arsort	連想キーと要素との関係を維持しつつ配列を逆順にソートする	bool arsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
asin	逆正弦（アークサイン）	float asin ( float $arg )	arg のアークサインをラジアンで返します。
asinh	逆双曲線正弦（アークハイパボリックサイン）	float asinh ( float $arg )	arg のアークハイパボリックサインを返します。
asort	連想キーと要素との関係を維持しつつ配列をソートする	bool asort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
assert_options	様々な assert フラグを設定/取得する	mixed assert_options ( int $what [, mixed $value ] )	そのオプションの元の値、あるいはエラー時に FALSE を返します。
assert	assertion が FALSE であるかどうかを調べる	bool assert ( mixed $assertion [, string $description ] )	アサーションが false となった場合に FALSE、それ以外の場合に TRUE を返します。
atan	逆正接（アークタンジェント）	float atan ( float $arg )	arg のアークタンジェントをラジアンで返します。
atan2	2 変数のアークタンジェント	float atan2 ( float $y , float $x )	y/x のアークタンジェントをラジアンで返します。
atanh	逆双曲線正接（アークハイパボリックタンジェント）	float atanh ( float $arg )	arg のアークハイパボリックタンジェントを返します。
__autoload	未定義のクラスのロードを試みる	void __autoload ( string $class )	値を返しません。
base_convert	数値の基数を任意に変換する	string base_convert ( string $number , int $frombase , int $tobase )	number を基数 tobase で表した値を返します。
base64_decode	MIME base64 方式によりエンコードされたデータをデコードする	string base64_decode ( string $data [, bool $strict = false ] )	もとのデータを返します。失敗した場合に FALSE を返します。 返り値はバイナリになることもあります。
base64_encode	MIME base64 方式でデータをエンコードする	string base64_encode ( string $data )	エンコードされたデータを文字列で返します。失敗した場合に FALSE を返します。
basename	パスの最後にある名前の部分を返す	string basename ( string $path [, string $suffix ] )	指定した path のベース名を返します。
bbcode_add_element	bbcode 要素を追加する	bool bbcode_add_element ( resource $bbcode_container , string $tag_name , array $tag_rules )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bbcode_add_smiley	顔文字をパーサに追加する	bool bbcode_add_smiley ( resource $bbcode_container , string $smiley , string $replace_by )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bbcode_create	BBCode リソースを作成する	resource bbcode_create ([ array $bbcode_initial_tags = NULL ] )	BBCode_Container を返します。
bbcode_destroy	BBCode_container リソースを閉じる	bool bbcode_destroy ( resource $bbcode_container )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bbcode_parse	文字列を、指定した規則のもとでパースする	string bbcode_parse ( resource $bbcode_container , string $to_parse )	パースした文字列を返します。失敗した場合に FALSE を返します.
bbcode_set_arg_parser	別のパーサをアタッチして、引数のパース用に別のルールセットを設定する	bool bbcode_set_arg_parser ( resource $bbcode_container , resource $bbcode_arg_parser )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bbcode_set_flags	パーサのオプションを設定あるいは変更する	bool bbcode_set_flags ( resource $bbcode_container , int $flags [, int $mode = BBCODE_SET_FLAGS_SET ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bcadd	2つの任意精度の数値を加算する	string bcadd ( string $left_operand , string $right_operand [, int $scale ] )	二つの数の和を文字列で返します。
bccomp	2 つの任意精度数値を比較する	int bccomp ( string $left_operand , string $right_operand [, int $scale ] )	ふたつのオペランドが等しければ 0、 left_operand が right_operand より大きければ返り値は 1、小さければ -1 を返します。
bcdiv	2つの任意精度数値で除算を行う	string bcdiv ( string $left_operand , string $right_operand [, int $scale ] )	除算結果を文字列で返します。 right_operand が 0 の場合は NULL を返します。
bcmod	2 つの任意精度数値の剰余を取得する	string bcmod ( string $left_operand , string $modulus )	剰余を文字列で返します。 modulus が 0 の場合は NULL を返します。
bcmul	2つの任意精度数値の乗算を行う	string bcmul ( string $left_operand , string $right_operand [, int $scale ] )	結果を文字列で返します。
bcompiler_load_exe	bcompiler の exe ファイルを読み込み、クラスを生成する	bool bcompiler_load_exe ( string $filename )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bcompiler_load	bz 圧縮されたファイルを読み込み、クラスを生成する	bool bcompiler_load ( string $filename )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bcompiler_parse_class	クラスのバイトコードを読み込み、ユーザー関数をコールする	bool bcompiler_parse_class ( string $class , string $callback )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bcompiler_read	ファイルハンドルを読み込み、クラスを生成する	bool bcompiler_read ( resource $filehandle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bcompiler_write_class	定義したクラスをバイトコードとして書き込む	bool bcompiler_write_class ( resource $filehandle , string $className [, string $extends ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bcompiler_write_constant	定義した定数をバイトコードとして書き込む	bool bcompiler_write_constant ( resource $filehandle , string $constantName )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bcompiler_write_exe_footer	開始位置および exe 形式ファイルのフッタを書き込む	bool bcompiler_write_exe_footer ( resource $filehandle , int $startpos )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bcompiler_write_file	php ソースファイルをバイトコードとして書き込む	bool bcompiler_write_file ( resource $filehandle , string $filename )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bcompiler_write_footer	コンパイルされたデータの終了を示す文字 \x00 を書き込む	bool bcompiler_write_footer ( resource $filehandle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bcompiler_write_function	定義した関数をバイトコードとして書き込む	bool bcompiler_write_function ( resource $filehandle , string $functionName )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bcompiler_write_functions_from_file	ファイル内で定義されているすべての関数をバイトコードとして書き込む	bool bcompiler_write_functions_from_file ( resource $filehandle , string $fileName )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bcompiler_write_header	bcompiler のヘッダを書き込む	bool bcompiler_write_header ( resource $filehandle [, string $write_ver ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bcompiler_write_included_filename	インクルードされたファイルをバイトコードとして書き込む	bool bcompiler_write_included_filename ( resource $filehandle , string $filename )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bcpow	任意精度数値をべき乗する	string bcpow ( string $left_operand , string $right_operand [, int $scale ] )	結果を文字列で返します。
bcpowmod	任意精度数値のべき乗の、指定した数値による剰余	string bcpowmod ( string $left_operand , string $right_operand , string $modulus [, int $scale ] )	結果を文字列で返します。modulus が 0 の場合は NULL を返します。
bcscale	すべての BC 演算関数におけるデフォルトのスケールを設定する	bool bcscale ( int $scale )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bcsqrt	任意精度数値の平方根を取得する	string bcsqrt ( string $operand [, int $scale ] )	平方根を文字列で返します。 operand が負の場合は NULL を返します。
bcsub	任意精度数値の減算を行う	string bcsub ( string $left_operand , string $right_operand [, int $scale ] )	減算の結果を文字列で返します。
bin2hex	バイナリのデータを16進表現に変換する	string bin2hex ( string $str )	指定した文字列を16進表現に変換したものを返します。
bind_textdomain_codeset	DOMAIN メッセージカタログから返されるメッセージの文字エンコーディングを指定する	string bind_textdomain_codeset ( string $domain , string $codeset )	成功した場合に文字列を返します。
bindec	2 進数 を 10 進数に変換する	number bindec ( string $binary_string )	binary_string を 10 進に変換した値を返します。
bindtextdomain	ドメインのパスを設定する	string bindtextdomain ( string $domain , string $directory )	現在設定されているドメインへのフルパスを返します。
blenc_encrypt	Encrypt a PHP script with BLENC.	string blenc_encrypt ( string $plaintext , string $encodedfile [, string $encryption_key ] )	BLENC will return the redistributable key that must be saved into key_file: the path of key_file is specified at runtime with the option blenc.key_file
boolval	変数の boolean としての値を取得する	boolean boolval ( mixed $var )	var の boolean としての値を返します。
bson_decode	BSON オブジェクトを PHP の配列に復元する	array bson_decode ( string $bson )	BSON オブジェクトを復元したものを返します。
bson_encode	PHP の変数を BSON 文字列に変換する	string bson_encode ( mixed $anything )	変換した文字列を返します。
bzclose	bzip2 ファイルを閉じる	int bzclose ( resource $bz )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bzcompress	文字列をbzip2形式のデータに圧縮する	mixed bzcompress ( string $source [, int $blocksize = 4 [, int $workfactor = 0 ]] )	圧縮された文字列、もしくはエラー時はエラー数
bzdecompress	bzip2 形式のデータを解凍する	mixed bzdecompress ( string $source [, int $small = 0 ] )	解凍された文字列列、もしくはエラー時はエラー数
bzerrno	bzip2 エラー番号を返す	int bzerrno ( resource $bz )	整数としてのエラー番号を返します。
bzerror	bzip2 エラー番号とエラー文字列を配列で返す	array bzerror ( resource $bz )	errno エントリにエラーコード、errstr エントリにエラーメッセージを持つ連想配列を返します。
bzerrstr	bzip2 エラー文字列を返す	string bzerrstr ( resource $bz )	エラーメッセージを含む文字列を返します。
bzflush	全てのバッファリングされたデータを強制的に書き込む	int bzflush ( resource $bz )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
bzopen	bzip2 圧縮されたファイルをオープンする	resource bzopen ( string $filename , string $mode )	オープンできなかった場合、 bzopen() は FALSE を返します。それ以外の場合は、 新規にオープンされたファイルへのポインタが返されます。
bzread	バイナリ対応の bzip2 ファイル読み込み	string bzread ( resource $bz [, int $length = 1024 ] )	非圧縮データ、もしくはエラー時に FALSE を返します。
bzwrite	バイナリ対応の bzip2 ファイルへの書き込み	int bzwrite ( resource $bz , string $data [, int $length ] )	書き込んだバイト数、もしくはエラー時に FALSE を返します。
cairo_create	Returns a new CairoContext object on the requested surface.	CairoContext cairo_create ( CairoSurface $surface )	What is returned on success and failure
cairo_font_face_get_type	Description	int cairo_font_face_get_type ( CairoFontFace $fontface )	What is returned on success and failure
cairo_font_face_status	Description	int cairo_font_face_status ( CairoFontFace $fontface )	What is returned on success and failure
cairo_font_options_create	Description	CairoFontOptions cairo_font_options_create ( void )	What is returned on success and failure
cairo_font_options_equal	Description	bool cairo_font_options_equal ( CairoFontOptions $options , CairoFontOptions $other )	What is returned on success and failure
cairo_font_options_get_antialias	Description	int cairo_font_options_get_antialias ( CairoFontOptions $options )	What is returned on success and failure
cairo_font_options_get_hint_metrics	Description	int cairo_font_options_get_hint_metrics ( CairoFontOptions $options )	What is returned on success and failure
cairo_font_options_get_hint_style	Description	int cairo_font_options_get_hint_style ( CairoFontOptions $options )	What is returned on success and failure
cairo_font_options_get_subpixel_order	Description	int cairo_font_options_get_subpixel_order ( CairoFontOptions $options )	What is returned on success and failure
cairo_font_options_hash	Description	int cairo_font_options_hash ( CairoFontOptions $options )	What is returned on success and failure
cairo_font_options_merge	Description	void cairo_font_options_merge ( CairoFontOptions $options , CairoFontOptions $other )	What is returned on success and failure
cairo_font_options_set_antialias	Description	void cairo_font_options_set_antialias ( CairoFontOptions $options , int $antialias )	What is returned on success and failure
cairo_font_options_set_hint_metrics	Description	void cairo_font_options_set_hint_metrics ( CairoFontOptions $options , int $hint_metrics )	What is returned on success and failure
cairo_font_options_set_hint_style	Description	void cairo_font_options_set_hint_style ( CairoFontOptions $options , int $hint_style )	What is returned on success and failure
cairo_font_options_set_subpixel_order	Description	void cairo_font_options_set_subpixel_order ( CairoFontOptions $options , int $subpixel_order )	What is returned on success and failure
cairo_font_options_status	Description	int cairo_font_options_status ( CairoFontOptions $options )	What is returned on success and failure
cairo_format_stride_for_width	Description	int cairo_format_stride_for_width ( int $format , int $width )	What is returned on success and failure
cairo_image_surface_create_for_data	Description	CairoImageSurface cairo_image_surface_create_for_data ( string $data , int $format , int $width , int $height [, int $stride = -1 ] )	What is returned on success and failure
cairo_image_surface_create_from_png	Description	CairoImageSurface cairo_image_surface_create_from_png ( string $file )	What is returned on success and failure
cairo_image_surface_create	Description	CairoImageSurface cairo_image_surface_create ( int $format , int $width , int $height )	What is returned on success and failure
cairo_image_surface_get_data	Description	string cairo_image_surface_get_data ( CairoImageSurface $surface )	What is returned on success and failure
cairo_image_surface_get_format	Description	int cairo_image_surface_get_format ( CairoImageSurface $surface )	What is returned on success and failure
cairo_image_surface_get_height	Description	int cairo_image_surface_get_height ( CairoImageSurface $surface )	What is returned on success and failure
cairo_image_surface_get_stride	Description	int cairo_image_surface_get_stride ( CairoImageSurface $surface )	What is returned on success and failure
cairo_image_surface_get_width	Description	int cairo_image_surface_get_width ( CairoImageSurface $surface )	What is returned on success and failure
cairo_matrix_create_scale	のエイリアス CairoMatrix::initScale()
cairo_matrix_create_translate	のエイリアス CairoMatrix::initTranslate()
cairo_matrix_invert	Description	void cairo_matrix_invert ( CairoMatrix $matrix )	What is returned on success and failure
cairo_matrix_multiply	Description	CairoMatrix cairo_matrix_multiply ( CairoMatrix $matrix1 , CairoMatrix $matrix2 )	What is returned on success and failure
cairo_matrix_rotate	Description	void cairo_matrix_rotate ( CairoMatrix $matrix , float $radians )	What is returned on success and failure
cairo_matrix_transform_distance	Description	array cairo_matrix_transform_distance ( CairoMatrix $matrix , float $dx , float $dy )	What is returned on success and failure
cairo_matrix_transform_point	Description	array cairo_matrix_transform_point ( CairoMatrix $matrix , float $dx , float $dy )	What is returned on success and failure
cairo_matrix_translate	Description	void cairo_matrix_translate ( CairoMatrix $matrix , float $tx , float $ty )	What is returned on success and failure
cairo_pattern_add_color_stop_rgb	Description	void cairo_pattern_add_color_stop_rgb ( CairoGradientPattern $pattern , float $offset , float $red , float $green , float $blue )	What is returned on success and failure
cairo_pattern_add_color_stop_rgba	Description	void cairo_pattern_add_color_stop_rgba ( CairoGradientPattern $pattern , float $offset , float $red , float $green , float $blue , float $alpha )	What is returned on success and failure
cairo_pattern_create_for_surface	Description	CairoPattern cairo_pattern_create_for_surface ( CairoSurface $surface )	What is returned on success and failure
cairo_pattern_create_linear	Description	CairoPattern cairo_pattern_create_linear ( float $x0 , float $y0 , float $x1 , float $y1 )	What is returned on success and failure
cairo_pattern_create_radial	Description	CairoPattern cairo_pattern_create_radial ( float $x0 , float $y0 , float $r0 , float $x1 , float $y1 , float $r1 )	What is returned on success and failure
cairo_pattern_create_rgb	Description	CairoPattern cairo_pattern_create_rgb ( float $red , float $green , float $blue )	What is returned on success and failure
cairo_pattern_create_rgba	Description	CairoPattern cairo_pattern_create_rgba ( float $red , float $green , float $blue , float $alpha )	What is returned on success and failure
cairo_pattern_get_color_stop_count	Description	int cairo_pattern_get_color_stop_count ( CairoGradientPattern $pattern )	What is returned on success and failure
cairo_pattern_get_color_stop_rgba	Description	array cairo_pattern_get_color_stop_rgba ( CairoGradientPattern $pattern , int $index )	What is returned on success and failure
cairo_pattern_get_extend	Description	int cairo_pattern_get_extend ( string $pattern )	What is returned on success and failure
cairo_pattern_get_filter	Description	int cairo_pattern_get_filter ( CairoSurfacePattern $pattern )	What is returned on success and failure
cairo_pattern_get_linear_points	Description	array cairo_pattern_get_linear_points ( CairoLinearGradient $pattern )	What is returned on success and failure
cairo_pattern_get_matrix	Description	CairoMatrix cairo_pattern_get_matrix ( CairoPattern $pattern )	What is returned on success and failure
cairo_pattern_get_radial_circles	Description	array cairo_pattern_get_radial_circles ( CairoRadialGradient $pattern )	What is returned on success and failure
cairo_pattern_get_rgba	Description	array cairo_pattern_get_rgba ( CairoSolidPattern $pattern )	What is returned on success and failure
cairo_pattern_get_surface	Description	CairoSurface cairo_pattern_get_surface ( CairoSurfacePattern $pattern )	What is returned on success and failure
cairo_pattern_get_type	Description	int cairo_pattern_get_type ( CairoPattern $pattern )	What is returned on success and failure
cairo_pattern_set_extend	Description	void cairo_pattern_set_extend ( string $pattern , string $extend )	What is returned on success and failure
cairo_pattern_set_filter	Description	void cairo_pattern_set_filter ( CairoSurfacePattern $pattern , int $filter )	What is returned on success and failure
cairo_pattern_set_matrix	Description	void cairo_pattern_set_matrix ( CairoPattern $pattern , CairoMatrix $matrix )	What is returned on success and failure
cairo_pattern_status	Description	int cairo_pattern_status ( CairoPattern $pattern )	What is returned on success and failure
cairo_pdf_surface_create	Description	CairoPdfSurface cairo_pdf_surface_create ( string $file , float $width , float $height )	What is returned on success and failure
cairo_pdf_surface_set_size	Description	void cairo_pdf_surface_set_size ( CairoPdfSurface $surface , float $width , float $height )	What is returned on success and failure
cairo_ps_get_levels	Description	array cairo_ps_get_levels ( void )	What is returned on success and failure
cairo_ps_level_to_string	Description	string cairo_ps_level_to_string ( int $level )	What is returned on success and failure
cairo_ps_surface_create	Description	CairoPsSurface cairo_ps_surface_create ( string $file , float $width , float $height )	What is returned on success and failure
cairo_ps_surface_dsc_begin_page_setup	Description	void cairo_ps_surface_dsc_begin_page_setup ( CairoPsSurface $surface )	What is returned on success and failure
cairo_ps_surface_dsc_begin_setup	Description	void cairo_ps_surface_dsc_begin_setup ( CairoPsSurface $surface )	What is returned on success and failure
cairo_ps_surface_dsc_comment	Description	void cairo_ps_surface_dsc_comment ( CairoPsSurface $surface , string $comment )	What is returned on success and failure
cairo_ps_surface_get_eps	Description	bool cairo_ps_surface_get_eps ( CairoPsSurface $surface )	What is returned on success and failure
cairo_ps_surface_restrict_to_level	Description	void cairo_ps_surface_restrict_to_level ( CairoPsSurface $surface , int $level )	What is returned on success and failure
cairo_ps_surface_set_eps	Description	void cairo_ps_surface_set_eps ( CairoPsSurface $surface , bool $level )	What is returned on success and failure
cairo_ps_surface_set_size	Description	void cairo_ps_surface_set_size ( CairoPsSurface $surface , float $width , float $height )	What is returned on success and failure
cairo_scaled_font_create	Description	CairoScaledFont cairo_scaled_font_create ( CairoFontFace $fontface , CairoMatrix $matrix , CairoMatrix $ctm , CairoFontOptions $fontoptions )	What is returned on success and failure
cairo_scaled_font_extents	Description	array cairo_scaled_font_extents ( CairoScaledFont $scaledfont )	What is returned on success and failure
cairo_scaled_font_get_ctm	Description	CairoMatrix cairo_scaled_font_get_ctm ( CairoScaledFont $scaledfont )	What is returned on success and failure
cairo_scaled_font_get_font_face	Description	CairoFontFace cairo_scaled_font_get_font_face ( CairoScaledFont $scaledfont )	What is returned on success and failure
cairo_scaled_font_get_font_matrix	Description	CairoFontOptions cairo_scaled_font_get_font_matrix ( CairoScaledFont $scaledfont )	What is returned on success and failure
cairo_scaled_font_get_font_options	Description	CairoFontOptions cairo_scaled_font_get_font_options ( CairoScaledFont $scaledfont )	What is returned on success and failure
cairo_scaled_font_get_scale_matrix	Description	CairoMatrix cairo_scaled_font_get_scale_matrix ( CairoScaledFont $scaledfont )	What is returned on success and failure
cairo_scaled_font_get_type	Description	int cairo_scaled_font_get_type ( CairoScaledFont $scaledfont )	What is returned on success and failure
cairo_scaled_font_glyph_extents	Description	array cairo_scaled_font_glyph_extents ( CairoScaledFont $scaledfont , array $glyphs )	What is returned on success and failure
cairo_scaled_font_status	Description	int cairo_scaled_font_status ( CairoScaledFont $scaledfont )	What is returned on success and failure
cairo_scaled_font_text_extents	Description	array cairo_scaled_font_text_extents ( CairoScaledFont $scaledfont , string $text )	What is returned on success and failure
cairo_surface_copy_page	Description	void cairo_surface_copy_page ( CairoSurface $surface )	What is returned on success and failure
cairo_surface_create_similar	Description	CairoSurface cairo_surface_create_similar ( CairoSurface $surface , int $content , float $width , float $height )	What is returned on success and failure
cairo_surface_finish	Description	void cairo_surface_finish ( CairoSurface $surface )	What is returned on success and failure
cairo_surface_flush	Description	void cairo_surface_flush ( CairoSurface $surface )	What is returned on success and failure
cairo_surface_get_content	Description	int cairo_surface_get_content ( CairoSurface $surface )	What is returned on success and failure
cairo_surface_get_device_offset	Description	array cairo_surface_get_device_offset ( CairoSurface $surface )	What is returned on success and failure
cairo_surface_get_font_options	Description	CairoFontOptions cairo_surface_get_font_options ( CairoSurface $surface )	What is returned on success and failure
cairo_surface_get_type	Description	int cairo_surface_get_type ( CairoSurface $surface )	What is returned on success and failure
cairo_surface_mark_dirty_rectangle	Description	void cairo_surface_mark_dirty_rectangle ( CairoSurface $surface , float $x , float $y , float $width , float $height )	What is returned on success and failure
cairo_surface_mark_dirty	Description	void cairo_surface_mark_dirty ( CairoSurface $surface )	What is returned on success and failure
cairo_surface_set_device_offset	Description	void cairo_surface_set_device_offset ( CairoSurface $surface , float $x , float $y )	What is returned on success and failure
cairo_surface_set_fallback_resolution	Description	void cairo_surface_set_fallback_resolution ( CairoSurface $surface , float $x , float $y )	What is returned on success and failure
cairo_surface_show_page	Description	void cairo_surface_show_page ( CairoSurface $surface )	What is returned on success and failure
cairo_surface_status	Description	int cairo_surface_status ( CairoSurface $surface )	What is returned on success and failure
cairo_surface_write_to_png	Description	void cairo_surface_write_to_png ( CairoSurface $surface , resource $stream )	What is returned on success and failure
cairo_svg_surface_create	Description	CairoSvgSurface cairo_svg_surface_create ( string $file , float $width , float $height )	What is returned on success and failure
cairo_svg_surface_restrict_to_version	Description	void cairo_svg_surface_restrict_to_version ( CairoSvgSurface $surface , int $version )	What is returned on success and failure
cairo_svg_version_to_string	Description	string cairo_svg_version_to_string ( int $version )	What is returned on success and failure
cal_days_in_month	指定した年とカレンダーについて、月の日数を返す	int cal_days_in_month ( int $calendar , int $month , int $year )	指定したカレンダーの、その月の日数を返します。
cal_from_jd	ユリウス積算日からサポートされるカレンダーに変換する	array cal_from_jd ( int $jd , int $calendar )	カレンダーの情報を含む配列を返します。この配列には、 年、月、日、週、曜日名、月名、"月/日/年" 形式の文字列 などが含まれます。
cal_info	特定のカレンダーに関する情報を返す	array cal_info ([ int $calendar = -1 ] )
cal_to_jd	サポートされるカレンダーからユリウス積算日に変換する	int cal_to_jd ( int $calendar , int $month , int $day , int $year )	ユリウス積算日を返します。
calcul_hmac	hmac を取得する (八つの引数が必要)	string calcul_hmac ( string $clent , string $siretcode , string $price , string $reference , string $validity , string $taxation , string $devise , string $language )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
calculhmac	hmac キーを取得する (2 つの引数が必要)	string calculhmac ( string $clent , string $data )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
call_user_func_array	パラメータの配列を指定してコールバック関数をコールする	mixed call_user_func_array ( callable $callback , array $param_arr )	コールバック関数の結果、あるいはエラー時に FALSE を返します。
call_user_func	最初の引数で指定したコールバック関数をコールする	mixed call_user_func ( callable $callback [, mixed $parameter [, mixed $... ]] )	コールバック関数の結果、あるいはエラー時に FALSE を返します。
call_user_method_array	パラメータの配列を指定してユーザーメソッドをコールする [古い関数]	mixed call_user_method_array ( string $method_name , object &$obj , array $params )
call_user_method	指定したオブジェクトのユーザーメソッドをコールする [古い関数]	mixed call_user_method ( string $method_name , object &$obj [, mixed $parameter [, mixed $... ]] )
ceil	端数の切り上げ	float ceil ( float $value )	value の次に大きい整数値を返します。 ceil() の返り値は float 型と なります。これは、float 値の範囲は通常 int よりも広いためです。
chdb_create	chdb ファイルを作成する	bool chdb_create ( string $pathname , array $data )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
chdir	ディレクトリを変更する	bool chdir ( string $directory )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
checkdate	グレゴリオ暦の日付/時刻の妥当性を確認します	bool checkdate ( int $month , int $day , int $year )	指定した日付が有効な場合に TRUE、そうでない場合に FALSE を返します。
checkdnsrr	指定したインターネットホスト名もしくは IP アドレスに対応する DNS レコードを検索する	bool checkdnsrr ( string $host [, string $type = "MX" ] )	レコードが見つかった場合に TRUE、 何も見つからないかエラーが発生した場合に FALSE を返します。
chgrp	ファイルのグループを変更する	bool chgrp ( string $filename , mixed $group )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
chmod	ファイルのモードを変更する	bool chmod ( string $filename , int $mode )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
chop	rtrim() のエイリアス
chown	ファイルの所有者を変更する	bool chown ( string $filename , mixed $user )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
chr	特定の文字を返す	string chr ( int $ascii )	指定した文字を返します。
chroot	ルートディレクトリを変更する	bool chroot ( string $directory )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
chunk_split	文字列をより小さな部分に分割する	string chunk_split ( string $body [, int $chunklen = 76 [, string $end = "\r\n" ]] )	分割した文字列を返します。
class_alias	クラスのエイリアスを作成する	bool class_alias ( string $original , string $alias [, bool $autoload = TRUE ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
class_exists	クラスが定義済みかどうかを確認する	bool class_exists ( string $class_name [, bool $autoload = true ] )	クラス class_name が定義されている場合に TRUE、 それ以外の場合に FALSE を返します。
class_implements	与えられたクラスが実装しているインターフェイスを返す	array class_implements ( mixed $class [, bool $autoload = true ] )	成功した場合に配列、エラー時に FALSE を返します。
class_parents	与えられたクラスの親クラスを返す	array class_parents ( mixed $class [, bool $autoload = true ] )	成功した場合に配列、エラー時に FALSE を返します。
class_uses	指定したクラスが使っているトレイトを返す	array class_uses ( mixed $class [, bool $autoload = true ] )	成功した場合に配列、エラー時には FALSE を返します。
classkit_import	新しいクラスメソッドの定義をファイルから読み込む	array classkit_import ( string $filename )	読み込まれたメソッドの連想配列を返します。
classkit_method_add	指定したクラスに、新しいメソッドを動的に追加する	bool classkit_method_add ( string $classname , string $methodname , string $args , string $code [, int $flags = CLASSKIT_ACC_PUBLIC ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
classkit_method_copy	あるクラスのメソッドを別のクラスにコピーする	bool classkit_method_copy ( string $dClass , string $dMethod , string $sClass [, string $sMethod ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
classkit_method_redefine	指定されたメソッドのコードを動的に変更する	bool classkit_method_redefine ( string $classname , string $methodname , string $args , string $code [, int $flags = CLASSKIT_ACC_PUBLIC ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
classkit_method_remove	指定したメソッドを動的に削除する	bool classkit_method_remove ( string $classname , string $methodname )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
classkit_method_rename	指定したメソッドの名前を動的に変更する	bool classkit_method_rename ( string $classname , string $methodname , string $newname )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
clearstatcache	ファイルのステータスのキャッシュをクリアする	void clearstatcache ([ bool $clear_realpath_cache = false [, string $filename ]] )	値を返しません。
cli_get_process_title	現在のプロセスのタイトルを返す	string cli_get_process_title ( void )	現在のプロセスのタイトルを文字列で返します。エラー時には NULL を返します。
cli_set_process_title	プロセスのタイトルを設定する	bool cli_set_process_title ( string $title )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
closedir	ディレクトリハンドルをクローズする	void closedir ([ resource $dir_handle ] )
closelog	システムログへの接続を閉じる	bool closelog ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
com_addref	コンポーネントの参照カウンタを増やす [非推奨]	void com_addref ( void )	値を返しません。
com_create_guid	グローバルユニーク ID (GUID) を生成する	string com_create_guid ( void )	GUID を文字列で返します。
com_event_sink	COM オブジェクトのイベントを PHP オブジェクトに接続する	bool com_event_sink ( variant $comobject , object $sinkobject [, mixed $sinkinterface ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
com_get_active_object	すでに実行中の COM オブジェクトのインスタンスへのハンドルを返す	variant com_get_active_object ( string $progid [, int $code_page ] )	要求されたオブジェクトが実行中の場合は、他の COM オブジェクトと 同様にスクリプトへ返されます。
com_get	COM コンポーネントのプロパティの値を得る [非推奨]
com_invoke	COM コンポーネントのメソッドをコールする [非推奨]	mixed com_invoke ( resource $com_object , string $function_name [, mixed $function_parameters ] )
com_isenum	COM オブジェクトが IEnumVariant インターフェイスを実装しているかどうかを示す [非推奨]	bool com_isenum ( variant $com_module )	オブジェクトが列挙可能である場合に TRUE、可能でない場合に FALSE を返します。
com_load_typelib	タイプライブラリを読み込む	bool com_load_typelib ( string $typelib_name [, bool $case_insensitive = true ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
com_load	COM コンポーネントへの新規リファレンスを作成する [非推奨]
com_message_pump	COM メッセージを処理し、timeoutms ミリ秒の間待つ	bool com_message_pump ([ int $timeoutms = 0 ] )	タイムアウトの前に メッセージが到着した場合は、そのメッセージが処理されて 関数は TRUE を返します。メッセージを処理することなく タイムアウトが発生した場合は、この関数は FALSE を返します。
com_print_typeinfo	ディスパッチインターフェイスのために、PHP のクラス定義を出力する	bool com_print_typeinfo ( object $comobject [, string $dispinterface [, bool $wantsink = false ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
com_propget	com_get() のエイリアス
com_propput	com_set() のエイリアス
com_propset	com_set() のエイリアス
com_release	コンポーネントリファレンスカウンタを減らす [廃止]	void com_release ( void )	値を返しません。
com_set	COM コンポーネントのプロパティに値を代入する
compact	変数名とその値から配列を作成する	array compact ( mixed $varname [, mixed $... ] )	追加された全ての変数を値とする出力配列を返します。
connection_aborted	クライアントとの接続が切断されているかどうかを調べる	int connection_aborted ( void )	クライアントとの接続が切断されている場合に 1、それ以外の場合に 0 を返します。
connection_status	接続ステータスのビットフィールドを返す	int connection_status ( void )	接続ステータスのビットフィールドを返します。これを定数 CONNECTION_XXX と比較することで、接続の状態を判断できます。
connection_timeout	スクリプトがタイムアウトしたかどうかを調べる	int connection_timeout ( void )	スクリプトがタイムアウトした場合に 1、それ以外の場合に 0 を返します。
constant	定数の値を返す	mixed constant ( string $name )	定数の値、あるいはその定数が定義されていない場合に NULL を返します。
convert_cyr_string	キリル文字セットを他のものに変換する	string convert_cyr_string ( string $str , string $from , string $to )	変換した文字列を返します。
convert_uudecode	uuencode された文字列をデコードする	string convert_uudecode ( string $data )	デコードしたデータを文字列で返します。
convert_uuencode	文字列を uuencode する	string convert_uuencode ( string $data )	uuencode されたデータを返します。
copy	ファイルをコピーする	bool copy ( string $source , string $dest [, resource $context ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
cos	余弦（コサイン）	float cos ( float $arg )	arg のコサインを返します。
cosh	双曲線余弦（ハイパボリックコサイン）	float cosh ( float $arg )	arg のハイパボリックコサインを返します。
count_chars	文字列で使用されている文字に関する情報を返す	mixed count_chars ( string $string [, int $mode = 0 ] )	mode の値により、 count_chars() は以下の値のどれかを返します。 0 - 各バイト値をキー、各バイトの出現回数を値とする配列。 1 - 0と同じですが、各バイト値の出現回数がゼロより大きいものの一覧となります。 2 - 0と同じですが、各バイト値の出現回数がゼロであるものの一覧となります。 3 - すべての一意な文字を含む文字列を返します。 4 - 使用されていない全ての文字を含む文字列を返します。
count	変数に含まれるすべての要素、 あるいはオブジェクトに含まれる何かの数を数える	int count ( mixed $var [, int $mode = COUNT_NORMAL ] )	varに含まれる要素の数を返します。 もし var が配列もしくは Countable インターフェイスを実装したオブジェクトではない場合、 1 が返されます。 ひとつ例外があり、var が NULL の場合、 0 が返されます。
crack_check	指定したパスワードに関して強度チェックを行う	bool crack_check ( resource $dictionary , string $password )	password が強い場合に、 TRUE、それ以外の場合に FALSE を返します。
crack_closedict	オープンされているCrackLib辞書を閉じる	bool crack_closedict ([ resource $dictionary ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
crack_getlastmessage	直近の強度チェックからのメッセージを返す	string crack_getlastmessage ( void )	直近の強度チェックによるメッセージ、あるいはチェックがまだ行われていない場合は FALSE を返します。
crack_opendict	新規CrackLib辞書をオープンする	resource crack_opendict ( string $dictionary )	成功時に辞書のリソースID、失敗時に FALSE 。
crc32	文字列の crc32 多項式計算を行う	int crc32 ( string $str )	str の crc32 チェックサムを整数値で返します。
create_function	匿名関数 (ラムダ形式) を作成する	string create_function ( string $args , string $code )	一意な関数名を表す文字列、あるいはエラー時に FALSE を返します。
crypt	文字列の一方向のハッシュ化を行う	string crypt ( string $str [, string $salt ] )	ハッシュした文字列を返します。 失敗した場合は、salt とは異なることが保証されている 13 文字未満の文字列を返します。
ctype_alnum	英数字かどうかを調べる	bool ctype_alnum ( string $text )	text のすべての文字が英字または数字だった場合に TRUE 、そうでない場合に FALSE を返します。
ctype_alpha	英字かどうかを調べる	bool ctype_alpha ( string $text )	text のすべての文字が英字だった場合に TRUE 、そうでない場合に FALSE を返します。
ctype_cntrl	制御文字かどうかを調べる	bool ctype_cntrl ( string $text )	text のすべての文字が現在のロケールの制御文字だった場合に TRUE、そうでない場合に FALSE を返します。
ctype_digit	数字かどうかを調べる	bool ctype_digit ( string $text )	string text のすべての文字が 10 進数字だった場合に TRUE、そうでない場合に FALSE を返します。
ctype_graph	空白以外の印字可能な文字かどうかを調べる	bool ctype_graph ( string $text )	text のすべての文字が印字可能で実際に目に見える 出力を行う（空白でない）場合に TRUE 、そうでない場合に FALSE を返します。
ctype_lower	小文字かどうかを調べる	bool ctype_lower ( string $text )	text のすべての文字がカレントのロケールで 小文字だった場合に TRUE 、そうでない場合に FALSE を返します。
ctype_print	印字可能な文字かどうかを調べる	bool ctype_print ( string $text )	text のすべての文字が（空白を含めて）実際に 出力を行う場合に TRUE 、text に制御文字 またはまったく出力も制御も行わない文字が含まれる場合に FALSE を返します。
ctype_punct	空白、英数字以外の出力可能な文字かどうかを調べる	bool ctype_punct ( string $text )	text のすべての文字が出力可能であり、 かつ文字でも数字でも空白でもなかった場合に TRUE 、そうでない場合に FALSE を返します。
ctype_space	空白文字かどうか調べる	bool ctype_space ( string $text )	text のすべての文字がなんらかの空白文字を 生成する場合に TRUE 、そうでない場合に FALSE を返します。 空白文字には、タブ・垂直タブ・改行・復帰・フォームフィード文字も 含まれます。
ctype_upper	大文字かどうか調べる	bool ctype_upper ( string $text )	text のすべての文字がカレントのロケールで 大文字だった場合に TRUE 、そうでない場合に FALSE を返します。
ctype_xdigit	16 進数を表す文字かどうかを調べる	bool ctype_xdigit ( string $text )	text のすべての文字が 16 進の '数字' つまり 10 進の数字または [A-Fa-f] だった場合に TRUE 、そうでない場合に FALSE を返します。
cubrid_affected_rows	Return the number of rows affected by the last SQL statement	int cubrid_affected_rows ([ resource $conn_identifier ] )	Number of rows affected by the SQL statement, when process is successful.
cubrid_bind	Bind variables to a prepared statement as parameters	bool cubrid_bind ( resource $req_identifier , int $bind_index , mixed $bind_value [, string $bind_value_type ] )	TRUE, when process is successful.
cubrid_client_encoding	Return the current CUBRID connection charset	string cubrid_client_encoding ([ resource $conn_identifier ] )	A string that represents the CUBRID connection charset; on success.
cubrid_close_prepare	Close the request handle	bool cubrid_close_prepare ( resource $req_identifier )	Return TRUE on success.
cubrid_close_request	Close the request handle	bool cubrid_close_request ( resource $req_identifier )	Return TRUE on success.
cubrid_close	Close CUBRID connection	bool cubrid_close ([ resource $conn_identifier ] )	TRUE, when process is successful.
cubrid_col_get	Get contents of collection type column using OID	array cubrid_col_get ( resource $conn_identifier , string $oid , string $attr_name )	Array (0-based numerical array) containing the elements you requested, when process is successful;
cubrid_col_size	Get the number of elements in collection type column using OID	int cubrid_col_size ( resource $conn_identifier , string $oid , string $attr_name )	Number of elements, when process is successful.
cubrid_column_names	Get the column names in result	array cubrid_column_names ( resource $req_identifier )	Array of string values containing the column names, when process is successful.
cubrid_column_types	Get column types in result	array cubrid_column_types ( resource $req_identifier )	Array of string values containing the column names, when process is successful.
cubrid_commit	Commit a transaction	bool cubrid_commit ( resource $conn_identifier )	TRUE, when process is successful.
cubrid_connect_with_url	Establish the environment for connecting to CUBRID server	resource cubrid_connect_with_url ( string $conn_url [, string $userid [, string $passwd [, bool $new_link = false ]]] )	Connection identifier, when process is successful.
cubrid_connect	Open a connection to a CUBRID Server	resource cubrid_connect ( string $host , int $port , string $dbname [, string $userid [, string $passwd [, bool $new_link = false ]]] )	Connection identifier, when process is successful.
cubrid_current_oid	Get OID of the current cursor location	string cubrid_current_oid ( resource $req_identifier )	Oid of current cursor location, when process is successful
cubrid_data_seek	Move the internal row pointer of the CUBRID result	bool cubrid_data_seek ( resource $result , int $row_number )	Returns TRUE on success or FALSE on failure.
cubrid_db_name	Get db name from results of cubrid_list_dbs	string cubrid_db_name ( array $result , int $index )	Returns the database name on success, and FALSE on failure. If FALSE is returned, use cubrid_error() to determine the nature of the error.
cubrid_disconnect	Close a database connection	bool cubrid_disconnect ([ resource $conn_identifier ] )	TRUE, when process is successful.
cubrid_drop	Delete an instance using OID	bool cubrid_drop ( resource $conn_identifier , string $oid )	TRUE, when process is successful.
cubrid_errno	Return the numerical value of the error message from previous CUBRID operation	int cubrid_errno ([ resource $conn_identifier ] )	Returns the error number from the last CUBRID function, or 0 (zero) if no error occurred.
cubrid_error_code_facility	Get the facility code of error	int cubrid_error_code_facility ( void )	Facility code of the error code that occurred: CUBRID_FACILITY_DBMS, CUBRID_FACILITY_CAS, CUBRID_FACILITY_CCI, CUBRID_FACILITY_CLIENT
cubrid_error_code	Get error code for the most recent function call	int cubrid_error_code ( void )	Error code of the error that occurred, or 0 (zero) if no error occurred.
cubrid_error_msg	Get last error message for the most recent function call	string cubrid_error_msg ( void )	Error message that occurred.
cubrid_error	Get the error message	string cubrid_error ([ resource $connection ] )	Error message that occurred.
cubrid_execute	Execute a prepared SQL statement	resource cubrid_execute ( resource $conn_identifier , string $sql [, int $option ] )	Request identifier, when process is successful and first param is conn_identifier; TRUE, when process is successful and first argument is request_identifier.
cubrid_fetch_array	Fetch a result row as an associative array, a numeric array, or both	array cubrid_fetch_array ( resource $result [, int $type = CUBRID_BOTH ] )	Returns an array of strings that corresponds to the fetched row, when process is successful.
cubrid_fetch_assoc	Return the associative array that corresponds to the fetched row	array cubrid_fetch_assoc ( resource $result [, int $type ] )	Associative array, when process is successful.
cubrid_fetch_field	Get column information from a result and return as an object	object cubrid_fetch_field ( resource $result [, int $field_offset = 0 ] )	Object with certain properties of the specific column, when process is successful.
cubrid_fetch_lengths	Return an array with the lengths of the values of each field from the current row	array cubrid_fetch_lengths ( resource $result )	An numeric array, when process is successful.
cubrid_fetch_object	Fetche the next row and returns it as an object	object cubrid_fetch_object ( resource $result [, string $class_name [, array $params [, int $type ]]] )	An object, when process is successful.
cubrid_fetch_row	Return a numerical array with the values of the current row	array cubrid_fetch_row ( resource $result [, int $type ] )	A numerical array, when process is successful.
cubrid_fetch	Fetch the next row from a result set	mixed cubrid_fetch ( resource $result [, int $type = CUBRID_BOTH ] )	Result array or object, when process is successful.
cubrid_field_flags	Return a string with the flags of the given field offset	string cubrid_field_flags ( resource $result , int $field_offset )	A string with flags, when process is successful.
cubrid_field_len	Get the maximum length of the specified field	int cubrid_field_len ( resource $result , int $field_offset )	Maximum length, when process is successful.
cubrid_field_name	Return the name of the specified field index	string cubrid_field_name ( resource $result , int $field_offset )	Name of specified field index, on success.
cubrid_field_seek	Move the result set cursor to the specified field offset	bool cubrid_field_seek ( resource $result [, int $field_offset = 0 ] )	TRUE on success.
cubrid_field_table	Return the name of the table of the specified field	string cubrid_field_table ( resource $result , int $field_offset )	Name of the table of the specified field, on success.
cubrid_field_type	Return the type of the column corresponding to the given field offset	string cubrid_field_type ( resource $result , int $field_offset )	Type of the column, on success.
cubrid_free_result	Free the memory occupied by the result data	bool cubrid_free_result ( resource $req_identifier )	TRUE on success.
cubrid_get_autocommit	Get auto-commit mode of the connection	bool cubrid_get_autocommit ( resource $conn_identifier )	TRUE, when auto-commit is on.
cubrid_get_charset	Return the current CUBRID connection charset	string cubrid_get_charset ( resource $conn_identifier )	A string that represents the CUBRID connection charset; on success.
cubrid_get_class_name	Get the class name using OID	string cubrid_get_class_name ( resource $conn_identifier , string $oid )	Class name when process is successful.
cubrid_get_client_info	Return the client library version	string cubrid_get_client_info ( void )	A string that represents the client library version; on success.
cubrid_get_db_parameter	Returns the CUBRID database parameters	array cubrid_get_db_parameter ( resource $conn_identifier )	An associative array with CUBRID database parameters; on success.
cubrid_get_query_timeout	Get the query timeout value of the request	int cubrid_get_query_timeout ( resource $req_identifier )	Success: the query timeout value of the current request. Units of msec.
cubrid_get_server_info	Return the CUBRID server version	string cubrid_get_server_info ( resource $conn_identifier )	A string that represents the CUBRID server version; on success.
cubrid_get	Get a column using OID	mixed cubrid_get ( resource $conn_identifier , string $oid [, mixed $attr ] )	Content of the requested attribute, when process is successful; When attr is set with string data type, the result is returned as a string; when attr is set with array data type (0-based numerical array), then the result is returned in associative array. When attr is omitted, then all attributes are received in array form.
cubrid_insert_id	Return the ID generated for the last updated AUTO_INCREMENT column	string cubrid_insert_id ([ resource $conn_identifier ] )	A string representing the ID generated for an AUTO_INCREMENT column by the previous query, on success.
cubrid_is_instance	Check whether the instance pointed by OID exists	int cubrid_is_instance ( resource $conn_identifier , string $oid )	1, if such instance exists;
cubrid_list_dbs	Return an array with the list of all existing CUBRID databases	array cubrid_list_dbs ([ resource $conn_identifier ] )	An numeric array with all existing Cubrid databases; on success.
cubrid_load_from_glo	Read data from a GLO instance and save it in a file	int cubrid_load_from_glo ( resource $conn_identifier , string $oid , string $file_name )	TRUE, when process is successful.
cubrid_lob_close	Close BLOB/CLOB data	bool cubrid_lob_close ( array $lob_identifier_array )	TRUE, when process is successful.
cubrid_lob_export	Export BLOB/CLOB data to file	bool cubrid_lob_export ( resource $conn_identifier , resource $lob_identifier , string $path_name )	TRUE, when process is successful.
cubrid_lob_get	Get BLOB/CLOB data	array cubrid_lob_get ( resource $conn_identifier , string $sql )	Return an array of LOB resources, when process is successful.
cubrid_lob_send	Read BLOB/CLOB data and send straight to browser	bool cubrid_lob_send ( resource $conn_identifier , resource $lob_identifier )	TRUE, when process is successful.
cubrid_lob_size	Get BLOB/CLOB data size	string cubrid_lob_size ( resource $lob_identifier )	A string representing LOB data size, when process is successful.
cubrid_lob2_bind	Bind a lob object or a string as a lob object to a prepared statement as parameters.	bool cubrid_lob2_bind ( resource $req_identifier , int $bind_index , mixed $bind_value [, string $bind_value_type ] )	TRUE, when process is successful.
cubrid_lob2_close	Close LOB object.	bool cubrid_lob2_close ( resource $lob_identifier )	TRUE, on success.
cubrid_lob2_export	Export the lob object to a file.	bool cubrid_lob2_export ( resource $lob_identifier , string $file_name )	TRUE if the process is successful and FALSE for failure.
cubrid_lob2_import	Import BLOB/CLOB data from a file.	bool cubrid_lob2_import ( resource $lob_identifier , string $file_name )	TRUE if the process is successful and FALSE for failure.
cubrid_lob2_new	Create a lob object.	resource cubrid_lob2_new ([ resource $conn_identifier [, string $type = "BLOB" ]] )	Lob identifier when it is successful.
cubrid_lob2_read	Read from BLOB/CLOB data.	string cubrid_lob2_read ( resource $lob_identifier , int $len )	Returns the contents as a string.
cubrid_lob2_seek	Move the cursor of a lob object.	bool cubrid_lob2_seek ( resource $lob_identifier , int $offset [, int $origin = CUBRID_CURSOR_CURRENT ] )	TRUE if the process is successful and FALSE for failure.
cubrid_lob2_seek64	Move the cursor of a lob object.	bool cubrid_lob2_seek64 ( resource $lob_identifier , string $offset [, int $origin = CUBRID_CURSOR_CURRENT ] )	TRUE if the process is successful and FALSE for failure.
cubrid_lob2_size	Get a lob object's size.	int cubrid_lob2_size ( resource $lob_identifier )	It will return the size of the LOB object when it processes successfully.
cubrid_lob2_size64	Get a lob object's size.	string cubrid_lob2_size64 ( resource $lob_identifier )	It will return the size of the LOB object as a string when it processes successfully.
cubrid_lob2_tell	Tell the cursor position of the LOB object.	int cubrid_lob2_tell ( resource $lob_identifier )	It will return the cursor position on the LOB object when it processes successfully.
cubrid_lob2_tell64	Tell the cursor position of the LOB object.	string cubrid_lob2_tell64 ( resource $lob_identifier )	It will return the cursor position on the LOB object as a string when it processes successfully.
cubrid_lob2_write	Write to a lob object.	bool cubrid_lob2_write ( resource $lob_identifier , string $buf )	TRUE if the process is successful and FALSE for failure.
cubrid_lock_read	Set a read lock on the given OID	bool cubrid_lock_read ( resource $conn_identifier , string $oid )	TRUE, when process is successful.
cubrid_lock_write	Set a write lock on the given OID	bool cubrid_lock_write ( resource $conn_identifier , string $oid )	TRUE, when process is successful.
cubrid_move_cursor	Move the cursor in the result	int cubrid_move_cursor ( resource $req_identifier , int $offset [, int $origin = CUBRID_CURSOR_CURRENT ] )	TRUE, when process is successful.
cubrid_new_glo	Create a glo instance	string cubrid_new_glo ( resource $conn_identifier , string $class_name , string $file_name )	Oid of the instance created, when process is successful.
cubrid_next_result	Get result of next query when executing multiple SQL statements	bool cubrid_next_result ( resource $result )	TRUE, when process is successful.
cubrid_num_cols	Return the number of columns in the result set	int cubrid_num_cols ( resource $result )	Number of columns, when process is successful.
cubrid_num_fields	Return the number of columns in the result set	int cubrid_num_fields ( resource $result )	Number of columns, on success.
cubrid_num_rows	Get the number of rows in the result set	int cubrid_num_rows ( resource $result )	Number of rows, when process is successful.
cubrid_pconnect_with_url	Open a persistent connection to CUBRID server	resource cubrid_pconnect_with_url ( string $conn_url [, string $userid [, string $passwd ]] )	Connection identifier, when process is successful.
cubrid_pconnect	Open a persistent connection to a CUBRID server	resource cubrid_pconnect ( string $host , int $port , string $dbname [, string $userid [, string $passwd ]] )	Connection identifier, when process is successful.
cubrid_ping	Ping a server connection or reconnect if there is no connection	bool cubrid_ping ([ resource $conn_identifier ] )	Returns TRUE if the connection to the server CUBRID server is working, otherwise FALSE.
cubrid_prepare	Prepare a SQL statement for execution	resource cubrid_prepare ( resource $conn_identifier , string $prepare_stmt [, int $option = 0 ] )	Request identifier, if process is successful;
cubrid_put	Update a column using OID	int cubrid_put ( resource $conn_identifier , string $oid [, string $attr ], mixed $value )	TRUE, when process is successful.
cubrid_query	Send a CUBRID query	resource cubrid_query ( string $query [, resource $conn_identifier ] )	For SELECT, SHOW, DESCRIBE, EXPLAIN and other statements returning resultset, cubrid_query() returns a resource on success, or FALSE on error.
cubrid_real_escape_string	Escape special characters in a string for use in an SQL statement	string cubrid_real_escape_string ( string $unescaped_string [, resource $conn_identifier ] )	Escaped string version of the given string, on success.
cubrid_result	Return the value of a specific field in a specific row	string cubrid_result ( resource $result , int $row [, mixed $field = 0 ] )	Value of a specific field, on success (NULL if value if null).
cubrid_rollback	Roll back a transaction	bool cubrid_rollback ( resource $conn_identifier )	TRUE, when process is successful.
cubrid_save_to_glo	Save requested file in a GLO instance	int cubrid_save_to_glo ( resource $conn_identifier , string $oid , string $file_name )	TRUE, when process is successful.
cubrid_schema	Get the requested schema information	array cubrid_schema ( resource $conn_identifier , int $schema_type [, string $class_name [, string $attr_name ]] )	Array containing the schema information, when process is successful;
cubrid_send_glo	Read data from glo and send it to std output	int cubrid_send_glo ( resource $conn_identifier , string $oid )	TRUE, when process is successful.
cubrid_seq_drop	Delete an element from sequence type column using OID	bool cubrid_seq_drop ( resource $conn_identifier , string $oid , string $attr_name , int $index )	TRUE, when process is successful.
cubrid_seq_insert	Insert an element to a sequence type column using OID	bool cubrid_seq_insert ( resource $conn_identifier , string $oid , string $attr_name , int $index , string $seq_element )	TRUE, when process is successful.
cubrid_seq_put	Update the element value of sequence type column using OID	bool cubrid_seq_put ( resource $conn_identifier , string $oid , string $attr_name , int $index , string $seq_element )	TRUE, when process is successful.
cubrid_set_add	Insert a single element to set type column using OID	bool cubrid_set_add ( resource $conn_identifier , string $oid , string $attr_name , string $set_element )	TRUE, when process is successful.
cubrid_set_autocommit	Set autocommit mode of the connection	bool cubrid_set_autocommit ( resource $conn_identifier , bool $mode )	TRUE, when process is successful.
cubrid_set_db_parameter	Sets the CUBRID database parameters	bool cubrid_set_db_parameter ( resource $conn_identifier , int $param_type , int $param_value )	TRUE on success.
cubrid_set_drop	Delete an element from set type column using OID	bool cubrid_set_drop ( resource $conn_identifier , string $oid , string $attr_name , string $set_element )	TRUE, when process is successful.
cubrid_set_query_timeout	Set the timeout time of query execution	bool cubrid_set_query_timeout ( resource $req_identifier , int $timeout )	TRUE, when process is successful.
cubrid_unbuffered_query	Perform a query without fetching the results into memory	resource cubrid_unbuffered_query ( string $query [, resource $conn_identifier ] )	For SELECT, SHOW, DESCRIBE or EXPLAIN statements returns a request identifier resource on success.
cubrid_version	Get the CUBRID PHP module's version	string cubrid_version ( void )	Version information (eg. "8.3.1.0001").
curl_close	cURL セッションを閉じる	void curl_close ( resource $ch )	値を返しません。
curl_copy_handle	cURL ハンドルを、その設定も含めてコピーする	resource curl_copy_handle ( resource $ch )	新しい cURL ハンドルを返します。
curl_errno	直近のエラー番号を返す	int curl_errno ( resource $ch )	エラー番号を返します。エラーが発生しない場合、 0 (ゼロ) を返します。
curl_error	現在のセッションに関する直近のエラー文字列を返す	string curl_error ( resource $ch )	エラーメッセージ、あるいはエラーが発生しなかった場合は '' (空文字) を返します。
curl_escape	指定した文字列を URL エンコードする	string curl_escape ( resource $ch , string $str )	エスケープした文字列を返します。失敗した場合に FALSE を返します。
curl_exec	cURL セッションを実行する	mixed curl_exec ( resource $ch )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 しかし、オプション CURLOPT_RETURNTRANSFER が設定されていると、 成功した場合に取得結果、失敗した場合に FALSE を返します。
curl_file_create	CURLFile オブジェクトを作る
curl_getinfo	指定した伝送に関する情報を得る	mixed curl_getinfo ( resource $ch [, int $opt = 0 ] )	opt を指定した場合は、その値を文字列で返します。 それ以外の場合は、以下の要素をもつ連想配列を返します (それぞれの要素が opt に対応します)。 失敗した場合は FALSE を返します。 "url" "content_type" "http_code" "header_size" "request_size" "filetime" "ssl_verify_result" "redirect_count" "total_time" "namelookup_time" "connect_time" "pretransfer_time" "size_upload" "size_download" "speed_download" "speed_upload" "download_content_length" "upload_content_length" "starttransfer_time" "redirect_time" "certinfo" "request_header" (これが設定されるのは、事前に curl_setopt() をコールしたときに CURLINFO_HEADER_OUT を設定した場合のみです)
curl_init	cURL セッションを初期化する	resource curl_init ([ string $url = NULL ] )	成功した場合に cURL ハンドル、エラー時に FALSE を返します。
curl_multi_add_handle	cURL マルチハンドルに、通常の cURL ハンドルを追加する	int curl_multi_add_handle ( resource $mh , resource $ch )	成功した場合に 0、あるいはエラーコード CURLM_XXX のいずれかを返します。
curl_multi_close	cURL ハンドルのセットを閉じる	void curl_multi_close ( resource $mh )	値を返しません。
curl_multi_exec	現在の cURL ハンドルから、サブ接続を実行する	int curl_multi_exec ( resource $mh , int &$still_running )	cURL 定義済み定数 で定義された cURL コードを返します。
curl_multi_getcontent	CURLOPT_RETURNTRANSFER が設定されている場合に、cURL ハンドルの内容を返す	string curl_multi_getcontent ( resource $ch )	CURLOPT_RETURNTRANSFER が設定されている場合に、 cURL ハンドルの内容を返します。
curl_multi_info_read	現在の転送についての情報を表示する	array curl_multi_info_read ( resource $mh [, int &$msgs_in_queue = NULL ] )	成功した場合にメッセージの連想配列、失敗した場合に FALSE を返します。
curl_multi_init	新規 cURL マルチハンドルを返す	resource curl_multi_init ( void )	成功した場合に cURL マルチハンドルリソース、失敗した場合に FALSE を返します。
curl_multi_remove_handle	cURL ハンドルのセットからマルチハンドルを削除する	int curl_multi_remove_handle ( resource $mh , resource $ch )	成功した場合に 0、失敗した場合にエラーコード CURLM_XXX のいずれかを返します。 codes.
curl_multi_select	curl_multi 接続のアクティビティを待つ	int curl_multi_select ( resource $mh [, float $timeout = 1.0 ] )	成功した場合は、記述子セットに含まれる記述子の数を返します。 select に失敗した場合は -1 を返し、それ以外の失敗時は (select システムコールから) タイムアウトします。
curl_multi_setopt	cURL マルチハンドル用のオプションを設定する	bool curl_multi_setopt ( resource $mh , int $option , mixed $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
curl_multi_strerror	エラーの内容を表す文字列を返す	string curl_multi_strerror ( int $errornum )	有効なエラーコードを指定した場合は、それに対応する文字列を返します。それ以外の場合は NULL を返します。
curl_pause	接続の中断と再開をする	int curl_pause ( resource $ch , int $bitmask )	エラーコードを返します (エラーがない場合は CURLE_OK を返します)。
curl_reset	libcurl セッションハンドルのすべてのオプションをリセットする	void curl_reset ( resource $ch )	値を返しません。
curl_setopt_array	CURL 転送用の複数のオプションを設定する	bool curl_setopt_array ( resource $ch , array $options )	すべてのオプションがうまく設定できた場合に TRUE を返します。 うまく設定できないオプションがあった時点で即時に FALSE が返され、options 配列に含まれるそれ以降のオプションは無視されます。
curl_setopt	cURL 転送用オプションを設定する	bool curl_setopt ( resource $ch , int $option , mixed $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
curl_share_close	cURL 共有ハンドルを閉じる	void curl_share_close ( resource $sh )	値を返しません。
curl_share_init	curl 共有ハンドルを初期化する	resource curl_share_init ( void )	"cURL Share Handle" 型のリソースを返します。
curl_share_setopt	cURL 共有ハンドルのオプションを設定する	bool curl_share_setopt ( resource $sh , int $option , string $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
curl_strerror	エラーコードの説明を返す	string curl_strerror ( int $errornum )	エラーの説明を返します。無効なエラーコードを指定した場合は NULL を返します。
curl_unescape	URL エンコードされた文字列をデコードする	string curl_unescape ( resource $ch , string $str )	デコードした文字列を返します。失敗した場合に FALSE を返します。
curl_version	cURL のバージョンを返す	array curl_version ([ int $age = CURLVERSION_NOW ] )	以下の要素からなる連想配列を返します。 インデックス 値の説明 version_number cURL の 24 ビットのバージョン番号 version cURL バージョン番号を表す文字列 ssl_version_number OpenSSL の 24 ビットのバージョン番号 ssl_version OpenSSL バージョン番号を表す文字列 libz_version zlib バージョンを表す文字列 host cURL をビルドしたホストについての情報 age &nbsp; features 定数 CURL_VERSION_XXX のビットマスク protocols cURL がサポートするプロトコル名の配列
current	配列内の現在の要素を返す	mixed current ( array &$array )	current() 関数は、 単に内部ポインタが現在指している配列要素の値を返します。 この関数は、ポインタを全く移動しません。 内部ポインタが最終要素の次を指していたり 配列が空だったりした場合、 current() は FALSE を返します。
cyrus_authenticate	Cyrus IMAP サーバーに対する認証を行う	void cyrus_authenticate ( resource $connection [, string $mechlist [, string $service [, string $user [, int $minssf [, int $maxssf [, string $authname [, string $password ]]]]]]] )	値を返しません。
cyrus_bind	Cyrus IMAP 接続へのコールバックをバインドする	bool cyrus_bind ( resource $connection , array $callbacks )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
cyrus_close	Cyrus IMAP サーバーへの接続を閉じる	bool cyrus_close ( resource $connection )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
cyrus_connect	Cyrus IMAP サーバーに接続する	resource cyrus_connect ([ string $host [, string $port [, int $flags ]]] )	成功した場合に接続ハンドラ、失敗した場合に FALSE を返します。
cyrus_query	Cyrus IMAP サーバーへクエリを送信する	array cyrus_query ( resource $connection , string $query )	text、msgno、 そして keyword のキーを持つ連想配列を返します。
cyrus_unbind	アンバインドする ...	bool cyrus_unbind ( resource $connection , string $trigger_name )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
date_add	DateTime::add() のエイリアス
date_create_from_format	DateTime::createFromFormat() のエイリアス
date_create_immutable_from_format	DateTimeImmutable::createFromFormat() のエイリアス
date_create_immutable	DateTimeImmutable::__construct() のエイリアス
date_create	DateTime::__construct() のエイリアス
date_date_set	DateTime::setDate() のエイリアス
date_default_timezone_get	スクリプト中の日付/時刻関数で使用されるデフォルトタイムゾーンを取得する	string date_default_timezone_get ( void )	string を返します。
date_default_timezone_set	スクリプト中の日付/時刻関数で使用されるデフォルトタイムゾーンを設定する	bool date_default_timezone_set ( string $timezone_identifier )	この関数は、timezone_identifier が 無効なものである場合に FALSE、それ以外の場合に TRUE を返します。
date_diff	DateTime::diff() のエイリアス
date_format	DateTime::format() のエイリアス
date_get_last_errors	DateTime::getLastErrors() のエイリアス
date_interval_create_from_date_string	DateInterval::createFromDateString() のエイリアス
date_interval_format	DateInterval::format() のエイリアス
date_isodate_set	DateTime::setISODate() のエイリアス
date_modify	DateTime::modify() のエイリアス
date_offset_get	DateTime::getOffset() のエイリアス
date_parse_from_format	指定した書式でフォーマットされた日付についての情報を取得する	array date_parse_from_format ( string $format , string $date )	指定した日付についての詳細情報を連想配列で返します。
date_parse	指定した日付に関する詳細な情報を連想配列で返す	array date_parse ( string $date )	成功した場合に日付情報を含む配列、失敗した場合に FALSE を返します。
date_sub	DateTime::sub() のエイリアス
date_sun_info	日の出/日の入り時刻と薄明かり (twilight) の開始/終了時刻の情報を含む配列を返す	array date_sun_info ( int $time , float $latitude , float $longitude )	成功した場合に配列、失敗した場合に FALSE を返します。
date_sunrise	指定した日付と場所についての日の出時刻を返す	mixed date_sunrise ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunrise_zenith") [, float $gmt_offset = 0 ]]]]] )	日の出時刻を、指定した format で返します。 失敗した場合に FALSE を返します。
date_sunset	指定した日付と場所についての日の入り時刻を返す	mixed date_sunset ( int $timestamp [, int $format = SUNFUNCS_RET_STRING [, float $latitude = ini_get("date.default_latitude") [, float $longitude = ini_get("date.default_longitude") [, float $zenith = ini_get("date.sunset_zenith") [, float $gmt_offset = 0 ]]]]] )	日の入り時刻を、指定した format で返します。 失敗した場合に FALSE を返します。
date_time_set	DateTime::setTime() のエイリアス
date_timestamp_get	DateTime::getTimestamp() のエイリアス
date_timestamp_set	DateTime::setTimestamp() のエイリアス
date_timezone_get	DateTime::getTimezone() のエイリアス
date_timezone_set	DateTime::setTimezone() のエイリアス
date	ローカルの日付/時刻を書式化する	string date ( string $format [, int $timestamp = time() ] )	日付を表す文字列を返します。 timestamp に数字以外が使用された場合は FALSE が返され、E_WARNING レベルのエラーが発生します。
db2_autocommit	データベース接続の AUTOCOMMIT の状態を取得または設定する	mixed db2_autocommit ( resource $connection [, bool $value ] )	db2_autocommit() に connection パラメータのみを渡した場合、 指定した接続の AUTOCOMMIT の状態を整数値で返します。 0 の場合は無効、1 の場合は有効です。
db2_bind_param	PHP 変数を SQL 文のパラメータにバインドする	bool db2_bind_param ( resource $stmt , int $parameter-number , string $variable-name [, int $parameter-type [, int $data-type = 0 [, int $precision = -1 [, int $scale = 0 ]]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
db2_client_info	DB2 データベースクライアントの情報をプロパティに保持するオブジェクトを返す	object db2_client_info ( resource $connection )	成功した場合にオブジェクト、失敗した場合に FALSE を返します。
db2_close	データベース接続を閉じる	bool db2_close ( resource $connection )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
db2_column_privileges	テーブルのカラムおよび関連する権限情報を含む結果セットを返す	resource db2_column_privileges ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name ]]]] )	指定したパラメータに一致するカラムの権限情報を含むステートメントリソースを返します。 行の内容は、以下のカラムで構成されています。 カラム名 説明 TABLE_CAT カタログの名前。テーブルがカタログを保持していない場合は NULL。 TABLE_SCHEM スキーマの名前。 TABLE_NAME テーブルあるいはビューの名前。 COLUMN_NAME カラムの名前。 GRANTOR その権限を与えたユーザーの認証 ID。 GRANTEE その権限を与えられたユーザーの認証 ID。 PRIVILEGE カラムの権限。 IS_GRANTABLE GRANTEE が、この権限を他のユーザーに与えることができるかどうか。
db2_columns	テーブルのカラムおよび関連するメタデータを含む結果セットを返す	resource db2_columns ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name ]]]] )	指定したパラメータに一致するカラムの情報を含む結果セットの ステートメントリソースを返します。 行の内容は、以下のカラムで構成されています。 カラム名 説明 TABLE_CAT カタログの名前。テーブルがカタログを保持していない場合は NULL。 TABLE_SCHEM スキーマの名前。 TABLE_NAME テーブルあるいはビューの名前。 COLUMN_NAME カラムの名前。 DATA_TYPE カラムの SQL データ型を整数値で表したもの。 TYPE_NAME カラムのデータ型を文字列で表したもの。 COLUMN_SIZE カラムのサイズを表す整数値。 BUFFER_LENGTH このカラムのデータを保存するために必要な最大のバイト数。 DECIMAL_DIGITS カラムの位取り。位取りが適用できない場合は NULL。 NUM_PREC_RADIX 10 (正確な数値データ型を表す)、 2 (概数データ型を表す)、 あるいは NULL (基数が適用できないデータ型を表す) のいずれか。 NULLABLE カラムが null 値をとることができるかどうかを表す整数値。 REMARKS カラムの説明。 COLUMN_DEF カラムのデフォルト値。 SQL_DATA_TYPE カラムのサイズを表す整数値。 SQL_DATETIME_SUB datetime 型のコードを表す整数値、 あるいはこれが適用できない SQL データ型である場合に NULL。 CHAR_OCTET_LENGTH 文字型のカラムにおける最大のオクテット数。 シングルバイト文字セットのデータの場合、これは COLUMN_SIZE に一致します。文字型でないカラムの場合は NULL となります。 ORDINAL_POSITION テーブル内でのカラムの位置を表す、1 から始まるインデックス。 IS_NULLABLE カラムが null 値をとることができるかどうかを表す文字列。 'YES' の場合は null 値をとることができ、 'NO' の場合はできません。
db2_commit	トランザクションをコミットする	bool db2_commit ( resource $connection )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
db2_conn_error	直近の接続から返された SQLSTATE を含む文字列を返す	string db2_conn_error ([ resource $connection ] )	失敗した接続試行の結果を表す SQLSTATE を返します。 直近の接続試行に関連するエラーがない場合には空の文字列を返します。
db2_conn_errormsg	直近の接続エラーメッセージおよび SQLCODE を返す	string db2_conn_errormsg ([ resource $connection ] )	失敗した接続試行の結果を表すエラーメッセージおよび SQLSTATE を返します。 直近の接続試行に関連するエラーがない場合には、 db2_conn_errormsg() はn空の文字列を返します。
db2_connect	データベースへの接続を返す	resource db2_connect ( string $database , string $username , string $password [, array $options ] )	接続に成功した場合は接続ハンドルリソースを返します。 接続に失敗した場合は、 db2_connect() は FALSE を返します。
db2_cursor_type	ステートメントリソースが使用しているカーソルの型を返す	int db2_cursor_type ( resource $stmt )	ステートメントリソースが前進のみのカーソルを使用している場合に DB2_FORWARD_ONLY、スクロール可能なカーソルを 使用している場合に DB2_SCROLLABLE を返します。
db2_escape_string	特定の文字をエスケープする	string db2_escape_string ( string $string_literal )	string_literal の中の上で挙げた文字について、 その前にバックスラッシュを追加した文字列を返します。
db2_exec	SQL 文を直接実行する	resource db2_exec ( resource $connection , string $statement [, array $options ] )	SQL 文の実行に成功した場合にステートメントリソース、 SQL 文の実行に失敗した場合に FALSE を返します。
db2_execute	プリペアドステートメントを実行する	bool db2_execute ( resource $stmt [, array $parameters ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
db2_fetch_array	結果セット内の行を表す、カラム位置をインデックスとする配列を返す	array db2_fetch_array ( resource $stmt [, int $row_number = -1 ] )	結果セットの次の行あるいは要求した行のデータを表す配列を返します。 配列の 0 から始まるインデックスが、カラムの位置を表します。 結果セットに行がもうない場合、あるいは row_number で指定された行が結果セットに存在しない場合に FALSE を返します。
db2_fetch_assoc	結果セット内の行を表す、カラム名をインデックスとする配列を返す	array db2_fetch_assoc ( resource $stmt [, int $row_number = -1 ] )	結果セットの次の行あるいは要求した行のデータを表す、 カラム名をインデックスとした連想配列を返します。 結果セットに行がもうない場合、あるいは row_number で指定された行が結果セットに存在しない場合に FALSE を返します。
db2_fetch_both	結果セット内の行を表す、 カラム位置およびカラム名の両方をインデックスとする配列を返す	array db2_fetch_both ( resource $stmt [, int $row_number = -1 ] )	結果セットの次の行あるいは要求した行のデータを表す、 カラム名および (0 から始まる) カラム番号の両方をインデックスとした連想配列を返します。 結果セットに行がもうない場合、あるいは row_number で指定された行が結果セットに存在しない場合に FALSE を返します。
db2_fetch_object	結果セット内の行を表す、カラムをプロパティとするオブジェクトを返す	object db2_fetch_object ( resource $stmt [, int $row_number = -1 ] )	結果セット内の行を表すオブジェクトを返します。 オブジェクトのプロパティが、結果セット内のカラム名に対応します。
db2_fetch_row	結果セットポインタを次の行あるいは要求された行に設定する	bool db2_fetch_row ( resource $stmt [, int $row_number ] )	結果セットに指定した行が存在する場合に TRUE、存在しない場合に FALSE を返します。
db2_field_display_size	カラムを表示するために必要な最大のバイト数を返す	int db2_field_display_size ( resource $stmt , mixed $column )	指定したカラムを表示するために必要な最大バイト数を表す整数値を返します。 結果セット内にそのカラムが存在しない場合には、 db2_field_display_size() は FALSE を返します。
db2_field_name	結果セット内のカラムの名前を返す	string db2_field_name ( resource $stmt , mixed $column )	指定したカラムの名前を含む文字列を返します。 結果セット内にそのカラムが存在しない場合には、 db2_field_name() は FALSE を返します。
db2_field_num	結果セット内の指定したカラムの位置を返す	int db2_field_num ( resource $stmt , mixed $column )	結果セット内でのカラムの位置を、0 から始まる整数値で返します。 結果セット内にそのカラムが存在しない場合には、 db2_field_num() は FALSE を返します。
db2_field_precision	結果セット内の指定したカラムの精度を返す	int db2_field_precision ( resource $stmt , mixed $column )	指定したカラムの精度を表す整数値を返します。 結果セット内にそのカラムが存在しない場合には、 db2_field_precision() は FALSE を返します。
db2_field_scale	結果セット内の指定したカラムの位取りを返す	int db2_field_scale ( resource $stmt , mixed $column )	指定したカラムの位取りを整数値で返します。 結果セット内にそのカラムが存在しない場合には、 db2_field_scale() は FALSE を返します。
db2_field_type	結果セット内の指定したカラムのデータ型を返す	string db2_field_type ( resource $stmt , mixed $column )	指定したカラムに定義されているデータ型を表す文字列を返します。 結果セット内にそのカラムが存在しない場合には、 db2_field_type() は FALSE を返します。
db2_field_width	結果セット内の指定したカラムの現在値の幅を返す	int db2_field_width ( resource $stmt , mixed $column )	結果セット内の文字型あるいはバイナリデータ型のカラムについて、 その幅を整数値で返します。 結果セット内にそのカラムが存在しない場合には、 db2_field_width() は FALSE を返します。
db2_foreign_keys	テーブルの外部キーを含む結果セットを返す	resource db2_foreign_keys ( resource $connection , string $qualifier , string $schema , string $table-name )	指定したテーブルの外部キーを含む結果セットのステートメントリソースを返します。 結果セットは、以下のカラムで構成されています。 カラム名 説明 PKTABLE_CAT 主キーを含むテーブルのカタログの名前。 テーブルがカタログを保持していない場合は NULL。 PKTABLE_SCHEM 主キーを含むテーブルのスキーマの名前。 PKTABLE_NAME 主キーを含むテーブルの名前。 PKCOLUMN_NAME 主キーを含むカラムの名前。 FKTABLE_CAT 外部キーを含むテーブルのカタログの名前。 テーブルがカタログを保持していない場合は NULL。 FKTABLE_SCHEM 外部キーを含むテーブルのスキーマの名前。 FKTABLE_NAME 外部キーを含むテーブルの名前。 FKCOLUMN_NAME 外部キーを含むカラムの名前。 KEY_SEQ 1 から始まる数字で表した、キー内のカラムの位置。 UPDATE_RULE SQL で UPDATE 操作を行った際に外部キーに適用される動作を表す整数値。 DELETE_RULE SQL で DELETE 操作を行った際に外部キーに適用される動作を表す整数値。 FK_NAME 外部キーの名前。 PK_NAME 主キーの名前。 DEFERRABILITY 外部キーの遅延度を表す整数値。 SQL_INITIALLY_DEFERRED、SQL_INITIALLY_IMMEDIATE あるいは SQL_NOT_DEFERRABLE のいずれか。
db2_free_result	結果セットに関連付けられたリソースを開放する	bool db2_free_result ( resource $stmt )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
db2_free_stmt	指定されたステートメントリソースに関連付けられたリソースを開放する	bool db2_free_stmt ( resource $stmt )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
db2_get_option	ステートメントリソースあるいは接続リソースからオプションの値を取得する	string db2_get_option ( resource $resource , string $option )	成功した場合に接続属性の現在の設定内容、 失敗した場合に FALSE を返します。
db2_last_insert_id	この接続上で最後に成功した insert クエリが自動生成した ID を返す	string db2_last_insert_id ( resource $resource )	この接続上で最後に成功した insert クエリが自動生成した ID を返します。
db2_lob_read	LOB ファイルから、ユーザーが定義したサイズの内容を取得する	string db2_lob_read ( resource $stmt , int $colnum , int $length )	指定したサイズのデータを返します。データが取得できない場合は FALSE を返します。
db2_next_result	ストアドプロシージャから、次の結果セットを要求する	resource db2_next_result ( resource $stmt )	ストアドプロシージャが別の結果セットを返している場合には 次の結果セットを含む新しいステートメントリソース、 別の結果セットを返していない場合には FALSE を返します。
db2_num_fields	結果セットに含まれるフィールドの数を返す	int db2_num_fields ( resource $stmt )	指定したステートメントリソースに関連付けられた結果セット内の フィールドの数を表す整数値を返します。ステートメントリソースが 不正な値の場合には FALSE を返します。
db2_num_rows	SQL 文によって変更された行の数を返す	int db2_num_rows ( resource $stmt )	指定したステートメントハンドルによって発行された、 直近の SQL 文によって変更された行の数を返します。
db2_pclose	持続的データベース接続を閉じる	bool db2_pclose ( resource $resource )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
db2_pconnect	データベースへの持続的接続を返す	resource db2_pconnect ( string $database , string $username , string $password [, array $options ] )	接続に成功した場合は接続ハンドルリソースを返します。 パラメータ database、username および password に完全に一致する接続が 既に存在した場合、 db2_pconnect() はそれを再利用します。接続に失敗した場合は db2_pconnect() は FALSE を返します。
db2_prepare	実行する SQL 文を準備する	resource db2_prepare ( resource $connection , string $statement [, array $options ] )	SQL 文のパースに成功し、データベースサーバー内で正しく準備された場合に ステートメントリソースを返します。データベースサーバーがエラーを返した場合に FALSE を返します。返されたエラーの詳細を調べるには、 db2_stmt_error() あるいは db2_stmt_errormsg() をコールします。
db2_primary_keys	テーブルの主キーを含む結果セットを返す	resource db2_primary_keys ( resource $connection , string $qualifier , string $schema , string $table-name )	指定したテーブルの主キーを含む結果セットのステートメントリソースを返します。 結果セットは、以下のカラムで構成されています。 カラム名 説明 TABLE_CAT 主キーを含むテーブルのカタログの名前。 テーブルがカタログを保持していない場合は NULL。 TABLE_SCHEM 主キーを含むテーブルのスキーマの名前。 TABLE_NAME 主キーを含むテーブルの名前。 COLUMN_NAME 主キーを含むカラムの名前。 KEY_SEQ 1 から始まる数字で表した、キー内のカラムの位置。 PK_NAME 主キーの名前。
db2_procedure_columns	ストアドプロシージャのパラメータを含む結果セットを返す	resource db2_procedure_columns ( resource $connection , string $qualifier , string $schema , string $procedure , string $parameter )	指定したパラメータに一致するストアドプロシージャのパラメータ情報を含む結果セットの ステートメントリソースを返します。 行の内容は、以下のカラムで構成されています。 カラム名 説明 PROCEDURE_CAT プロシージャを含むカタログ。テーブルがカタログを保持していない場合は NULL。 PROCEDURE_SCHEM ストアドプロシージャを含むスキーマの名前。 PROCEDURE_NAME プロシージャの名前。 COLUMN_NAME パラメータの名前。 COLUMN_TYPE パラメータの型を表す整数値。 返される値 パラメータの型 1 (SQL_PARAM_INPUT) 入力 (IN) パラメータ。 2 (SQL_PARAM_INPUT_OUTPUT) 入力/出力 (INOUT) パラメータ。 3 (SQL_PARAM_OUTPUT) 出力 (OUT) パラメータ。 DATA_TYPE パラメータの SQL データ型を表す整数値。 TYPE_NAME パラメータのデータ型を表す文字列。 COLUMN_SIZE パラメータのサイズを表す整数値。 BUFFER_LENGTH このパラメータのデータを保存するために必要な最大バイト数。 DECIMAL_DIGITS パラメータの位取り。位取りが適用できない場合は NULL。 NUM_PREC_RADIX 10 (正確な数値データ型を表す)、 2 (概数データ型を表す)、 あるいは NULL (基数が適用できないデータ型を表す) のいずれか。 NULLABLE パラメータが null 値をとることができるかどうかを表す整数値。 REMARKS パラメータの説明。 COLUMN_DEF パラメータのデフォルト値。 SQL_DATA_TYPE パラメータのサイズを表す整数値。 SQL_DATETIME_SUB datetime 型のコードを表す整数値、 あるいはこれが適用できない SQL データ型である場合に NULL。 CHAR_OCTET_LENGTH 文字型のパラメータにおける最大のオクテット数。 シングルバイト文字セットのデータの場合、これは COLUMN_SIZE に一致します。文字型でないカラムの場合は NULL となります。 ORDINAL_POSITION CALL 文の中でのパラメータの位置を表す、1 から始まるインデックス。 IS_NULLABLE パラメータが null 値をとることができるかどうかを表す文字列。 'YES' の場合は null 値をとることができ、 'NO' の場合はできません。
db2_procedures	データベース内に登録されているストアドプロシージャの一覧を含む結果セットを返す	resource db2_procedures ( resource $connection , string $qualifier , string $schema , string $procedure )	指定したパラメータに一致するストアドプロシージャの情報を含む結果セットの ステートメントリソースを返します。 行の内容は、以下のカラムで構成されています。 カラム名 説明 PROCEDURE_CAT プロシージャを含むカタログ。テーブルがカタログを保持していない場合は NULL。 PROCEDURE_SCHEM ストアドプロシージャを含むスキーマの名前。 PROCEDURE_NAME プロシージャの名前。 NUM_INPUT_PARAMS ストアドプロシージャの入力 (IN) パラメータの数。 NUM_OUTPUT_PARAMS ストアドプロシージャの出力 (OUT) パラメータの数。 NUM_RESULT_SETS ストアドプロシージャが返す結果セットの数。 REMARKS ストアドプロシージャのコメント。 PROCEDURE_TYPE 常に 1 を返します。これは、 ストアドプロシージャが返り値を返さないことを意味します。
db2_result	結果セットの行からひとつのカラムを返す	mixed db2_result ( resource $stmt , mixed $column )	指定したフィールドが結果セットに存在する場合にそのフィールドの値を返します。 フィールドが存在しない場合には NULL を返し、警告を発生させます。
db2_rollback	トランザクションをロールバックする	bool db2_rollback ( resource $connection )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
db2_server_info	DB2 データベースサーバーの情報をプロパティに保持するオブジェクトを返す	object db2_server_info ( resource $connection )	成功した場合にオブジェクト、失敗した場合に FALSE を返します。
db2_set_option	接続リソースあるいはステートメントリソースのオプションを設定する	bool db2_set_option ( resource $resource , array $options , int $type )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
db2_special_columns	テーブルのユニーク行 ID カラムを含む結果セットを返す	resource db2_special_columns ( resource $connection , string $qualifier , string $schema , string $table_name , int $scope )	テーブルのユニーク行 ID 情報を含む結果セットの ステートメントリソースを返します。 行の内容は、以下のカラムで構成されています。 カラム名 説明 SCOPE 整数値 SQL 定数 説明 0 SQL_SCOPE_CURROW 行 ID は、カーソルがその行にある場合にのみ有効です。 1 SQL_SCOPE_TRANSACTION 行 ID は、そのトランザクションの間のみ有効です。 2 SQL_SCOPE_SESSION 行 ID は、その接続の間のみ有効です。 COLUMN_NAME ユニークカラムの名前。 DATA_TYPE カラムの SQL データ型。 TYPE_NAME カラムの SQL データ型を文字列で表したもの。 COLUMN_SIZE カラムのサイズを表す整数値。 BUFFER_LENGTH このカラムのデータを保存するために必要な最大のバイト数。 DECIMAL_DIGITS カラムの位取り。位取りが適用できない場合は NULL。 NUM_PREC_RADIX 10 (正確な数値データ型を表す)、 2 (概数データ型を表す)、 あるいは NULL (基数が適用できないデータ型を表す) のいずれか。 PSEUDO_COLUMN 常に 1 を返します。
db2_statistics	インデックスの情報およびテーブルの統計情報を含む結果セットを返す	resource db2_statistics ( resource $connection , string $qualifier , string $schema , string $table-name , bool $unique )	指定したパラメータに一致するテーブルの統計およびインデックスを含む ステートメントリソースを返します。 行の内容は、以下のカラムで構成されています。 カラム名 説明 TABLE_CAT テーブルを含むカタログの名前。テーブルがカタログを保持していない場合は NULL。 TABLE_SCHEM テーブルを含むスキーマの名前。 TABLE_NAME テーブルの名前。 NON_UNIQUE インデックスが一意でなければならないかどうか、 あるいはその行がテーブルの統計情報であるかどうかを表す整数値。 返り値 パラメータの型 0 (SQL_FALSE) インデックスは、重複した値をとることができます。 1 (SQL_TRUE) インデックスは、一意でなければなりません。 NULL この行は、テーブル自身についての統計情報です。 INDEX_QUALIFIER インデックスの資格を満たすため、INDEX_NAME の先頭に付加しなければならない修飾子を表す文字列。 INDEX_NAME インデックスの名前を表す文字列。 TYPE 結果セットのこの行に含まれる情報の型を表す整数値。 返り値 パラメータの型 0 (SQL_TABLE_STAT) この行は、テーブル自身の統計情報を含みます。 1 (SQL_INDEX_CLUSTERED) この行は、クラスタ化インデックスについての情報を含みます。 2 (SQL_INDEX_HASH) この行は、ハッシュインデックスについての情報を含みます。 3 (SQL_INDEX_OTHER) この行は、クラスタ化もハッシュも行われていない インデックスについての情報を含みます。 ORDINAL_POSITION インデックス内の、1 から始まるカラムの位置。 その行がテーブル自身についての統計情報を含んでいる場合は NULL。 COLUMN_NAME インデックス内のカラムの名前。 その行がテーブル自身についての統計情報を含んでいる場合は NULL。 ASC_OR_DESC カラムの並び順が昇順の場合は A、 降順の場合は D、 その行がテーブル自身についての統計情報を含んでいる場合は NULL。 CARDINALITY その行がインデックスの情報を含んでいる場合、このカラムには インデックス内の一意な値の数を表す整数値が含まれます。 その行がテーブル自身についての情報を含んでいる場合、 このカラムにはテーブルの行数を表す整数値が含まれます。 PAGES その行がインデックスの情報を含んでいる場合、このカラムには インデックスを保存するために使用しているページ数を表す整数値が含まれます。 その行がテーブル自身についての情報を含んでいる場合、このカラムには テーブルを保存するために使用しているページ数を表す整数値が含まれます。 FILTER_CONDITION 常に NULL。
db2_stmt_error	SQL 文が返す SQLSTATE を含む文字列を返す	string db2_stmt_error ([ resource $stmt ] )	SQLSTATE を含む文字列を返します。
db2_stmt_errormsg	直近の SQL 文のエラーメッセージを含む文字列を返す	string db2_stmt_errormsg ([ resource $stmt ] )	SQL 文の発行により直近に発生したエラーを表す エラーメッセージおよび SQLSTATE を返します。
db2_table_privileges	データベース内のテーブルおよび関連する権限情報を含む結果セットを返す	resource db2_table_privileges ( resource $connection [, string $qualifier [, string $schema [, string $table_name ]]] )	指定したパラメータに一致するテーブルの権限情報を含むステートメントリソースを返します。 行の内容は、以下のカラムで構成されています。 カラム名 説明 TABLE_CAT テーブルを含むカタログの名前。テーブルがカタログを保持していない場合は NULL。 TABLE_SCHEM テーブルを含むスキーマの名前。 TABLE_NAME テーブルの名前。 GRANTOR その権限を与えたユーザーの認証 ID。 GRANTEE その権限を与えられたユーザーの認証 ID。 PRIVILEGE 与えられた権限。ALTER、 CONTROL、DELETE、INDEX、INSERT、REFERENCES、SELECT あるいは UPDATE のいずれかです。 IS_GRANTABLE grantee が、この権限を他のユーザーに与えることができるかどうかを、 文字列 "YES" あるいは "NO" で表す。
db2_tables	データベース内のテーブルおよび関連するメタデータを含む結果セットを返す	resource db2_tables ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $table-type ]]]] )	指定したパラメータに一致するテーブルの情報を含む結果セットのリソースを返します。 行の内容は、以下のカラムで構成されています。 カラム名 説明 TABLE_CAT テーブルを含むカタログ。テーブルがカタログを保持していない場合は NULL。 TABLE_SCHEM テーブルを含むスキーマの名前。 TABLE_NAME テーブルの名前。 TABLE_TYPE テーブルの型識別子。 REMARKS テーブルの説明。
dba_close	DBA データベースを閉じる	void dba_close ( resource $handle )	値を返しません。
dba_delete	キーが指す DBA エントリを削除する	bool dba_delete ( string $key , resource $handle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
dba_exists	キーが存在するかどうかを確認する	bool dba_exists ( string $key , resource $handle )	キーが存在する場合に TRUE 、それ以外の場合に FALSE を返します。
dba_fetch	キーが指すデータを取得する	string dba_fetch ( string $key , resource $handle )	キー / データの組が見つかった場合にそれに関連する文字列、 それ以外の場合に FALSE を返します。
dba_firstkey	最初のキーを取得する	string dba_firstkey ( resource $handle )	成功した場合にキー、失敗した場合に FALSE を返します。
dba_handlers	利用可能なハンドラの一覧を得る	array dba_handlers ([ bool $full_info = false ] )	データベースハンドラの配列を返します。full_info が TRUE の場合、この配列はハンドラ名をキー、そのバージョンを値とする 連想配列となります。それ以外の場合はハンドラ名を値に持つ数値添字の配列と なります。
dba_insert	エントリを挿入する	bool dba_insert ( string $key , string $value , resource $handle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
dba_key_split	文字列形式のキーを配列形式に分割する	mixed dba_key_split ( mixed $key )	array(0 => group, 1 => value_name) 形式の配列を返します。 key が NULL あるいは FALSE の場合には この関数は FALSE を返します。
dba_list	オープンされている全データベースファイルのリストを得る	array dba_list ( void )	resourceid => filename 形式の連想配列を返します。
dba_nextkey	次のキーを取得する	string dba_nextkey ( resource $handle )	成功した場合にキー、失敗した場合に FALSE を返します。
dba_open	データベースをオープンする	resource dba_open ( string $path , string $mode [, string $handler [, mixed $... ]] )	成功した場合に正のハンドル、失敗した場合に FALSE を返します。
dba_optimize	データベースを最適化する	bool dba_optimize ( resource $handle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
dba_popen	データベースを持続的にオープンする	resource dba_popen ( string $path , string $mode [, string $handler [, mixed $... ]] )	成功した場合に正のハンドル、失敗した場合に FALSE を返します。
dba_replace	エントリを置換または挿入する	bool dba_replace ( string $key , string $value , resource $handle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
dba_sync	データベースを同期する	bool dba_sync ( resource $handle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
dbase_add_record	データベースにレコードを追加する	bool dbase_add_record ( int $dbase_identifier , array $record )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
dbase_close	データベースを閉じる	bool dbase_close ( int $dbase_identifier )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
dbase_create	データベースを作成する	int dbase_create ( string $filename , array $fields )	データベースの作成に成功した場合にリンク ID 、エラーが発生した場合に FALSE を返します。
dbase_delete_record	データベースからレコードを削除する	bool dbase_delete_record ( int $dbase_identifier , int $record_number )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
dbase_get_header_info	データベースのヘッダ情報を得る	array dbase_get_header_info ( int $dbase_identifier )	データベースの各カラムについての要素を格納した配列を返します。 配列の添字は 0 から始まります。
dbase_get_record_with_names	データベースからレコードを連想配列として得る	array dbase_get_record_with_names ( int $dbase_identifier , int $record_number )	レコードの連想配列を返します。これには deleted という名前のキーも含まれており、もしレコードに削除マークがつけられている 場合にはその値が 1 となります （ dbase_delete_record() を参照ください）。
dbase_get_record	データベースからレコードを配列形式で得る	array dbase_get_record ( int $dbase_identifier , int $record_number )	レコードの連想配列を返します。これには deleted という名前のキーも含まれており、もしレコードに削除マークがつけられている 場合にはその値が 1 となります （ dbase_delete_record() を参照ください）。
dbase_numfields	データベースのフィールド数を得る	int dbase_numfields ( int $dbase_identifier )	データベースのフィールド数を返します。エラーが発生した場合には FALSE を返します。
dbase_numrecords	データベースのレコード数を得る	int dbase_numrecords ( int $dbase_identifier )	データベースのレコード数を返します。エラーが発生した場合には FALSE を返します。
dbase_open	データベースをオープンする	int dbase_open ( string $filename , int $mode )	データベースのオープンに成功した場合にリンク ID 、エラーが発生した場合に FALSE を返します。
dbase_pack	データベースを圧縮する	bool dbase_pack ( int $dbase_identifier )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
dbase_replace_record	データベースのレコードを置換する	bool dbase_replace_record ( int $dbase_identifier , array $record , int $record_number )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
dbplus_add	リレーションにタプルを追加する	int dbplus_add ( resource $relation , array $tuple )	この関数は、成功した場合に DBPLUS_ERR_NOERR、 失敗した場合に db++ エラーコードを返します。
dbplus_aql	AQL クエリを実行する	resource dbplus_aql ( string $query [, string $server [, string $dbpath ]] )	成功時に関係ハンドルを返します。結果データは、 dbplus_next() および dbplus_curr() をコールすることにより、このリレーションから取得可能です。 他のリレーションアクセス関数は結果のリレーションで動作しません。
dbplus_chdir	データベース仮想カレントディレクトリを設定/取得する	string dbplus_chdir ([ string $newdir ] )	カレントディレクトリの絶対パスを返します。
dbplus_close	リレーションを閉じる	mixed dbplus_close ( resource $relation )	成功した場合に TRUE、失敗した場合に DBPLUS_ERR_UNKNOWN を返します。
dbplus_curr	リレーションからカレントタプルを取得する	int dbplus_curr ( resource $relation , array &$tuple )	この関数は、成功時にゼロ (すなわち DBPLUS_ERR_NOERR)、失敗時に db++ エラーコードを返します。
dbplus_errcode	指定したエラーコードまたは直近のエラーに関するエラー文字列を取得する	string dbplus_errcode ([ int $errno ] )	エラーメッセージを返します。
dbplus_errno	直近の操作に関するエラーコードを取得する	int dbplus_errno ( void )	エラーコードを表す整数値を返します。
dbplus_find	リレーションに拘束を設定する	int dbplus_find ( resource $relation , array $constraints , mixed $tuple )
dbplus_first	リレーションから最初のタプルを取得する	int dbplus_first ( resource $relation , array &$tuple )	成功した場合に DBPLUS_ERR_NOERR、 失敗した場合に db++ エラーコードを返します。
dbplus_flush	リレーションに行った全ての変更をフラッシュする	int dbplus_flush ( resource $relation )	成功した場合に DBPLUS_ERR_NOERR、 失敗した場合に db++ エラーコードを返します。
dbplus_freealllocks	このクライアントにより保持された全てのロックを解放する	int dbplus_freealllocks ( void )
dbplus_freelock	タプルの書き込みロックを解放する	int dbplus_freelock ( resource $relation , string $tuple )
dbplus_freerlocks	指定したリレーションに関する全てのタプルロックを解放する	int dbplus_freerlocks ( resource $relation )
dbplus_getlock	タプルの書き込みロックを取得する	int dbplus_getlock ( resource $relation , string $tuple )	成功時にゼロ、失敗時にゼロでないコード、特に DBPLUS_ERR_WLOCKED を返します。
dbplus_getunique	あるリレーションのユニークな ID 番号を取得する	int dbplus_getunique ( resource $relation , int $uniqueid )	成功した場合に DBPLUS_ERR_NOERR、 失敗した場合に db++ エラーコードを返します。
dbplus_info	リレーションについての情報を取得する	int dbplus_info ( resource $relation , string $key , array &$result )
dbplus_last	リレーションから直近のタプルを取得する	int dbplus_last ( resource $relation , array &$tuple )	成功した場合に DBPLUS_ERR_NOERR、 失敗した場合に db++ エラーコードを返します。 code on failure.
dbplus_lockrel	リレーションに書き込みロックを要求する	int dbplus_lockrel ( resource $relation )
dbplus_next	リレーションから次のタプルを取得する	int dbplus_next ( resource $relation , array &$tuple )	成功した場合に DBPLUS_ERR_NOERR、 失敗した場合に db++ エラーコードを返します。
dbplus_open	リレーションファイルをオープンする	resource dbplus_open ( string $name )	成功時にリレーションファイルリソース(カーソル)が返されます。これは、 このリレーションを参照する以降の全てのコマンドで使用されます。 失敗時にはゼロが返されます。実際のエラーコードは、 dbplus_errno() により取得可能です。
dbplus_prev	リレーションから前のタプルを取得する	int dbplus_prev ( resource $relation , array &$tuple )	成功した場合に DBPLUS_ERR_NOERR、 失敗した場合に db++ エラーコードを返します。
dbplus_rchperm	リレーションの許可属性を変更する	int dbplus_rchperm ( resource $relation , int $mask , string $user , string $group )
dbplus_rcreate	新しい DB++ リレーションを作成する	resource dbplus_rcreate ( string $name , mixed $domlist [, bool $overwrite ] )
dbplus_rcrtexact	インデックスを含む、リレーションの空のコピーを作成する	mixed dbplus_rcrtexact ( string $name , resource $relation [, bool $overwrite ] )	成功した場合にリソース、失敗した場合に DBPLUS_ERR_UNKNOWN を返します。
dbplus_rcrtlike	デフォルトのインデックスで、リレーションの空のコピーを作成する	mixed dbplus_rcrtlike ( string $name , resource $relation [, int $overwrite ] )	成功した場合にリソース、失敗した場合に DBPLUS_ERR_UNKNOWN を返します。
dbplus_resolve	リレーションのホスト情報を取得する	array dbplus_resolve ( string $relation_name )	キー sid、host および host_path を含む配列、あるいはエラー時に FALSE を返します。
dbplus_restorepos	位置を復元する	int dbplus_restorepos ( resource $relation , array $tuple )
dbplus_rkeys	リレーションの主キーを新規に指定する	mixed dbplus_rkeys ( resource $relation , mixed $domlist )	成功した場合にリソース、失敗した場合に DBPLUS_ERR_UNKNOWN を返します。
dbplus_ropen	リレーションファイルをローカルにオープンする	resource dbplus_ropen ( string $name )
dbplus_rquery	ローカル (raw) AQL クエリを実行する	resource dbplus_rquery ( string $query [, string $dbpath ] )
dbplus_rrename	リレーションの名前を変更する	int dbplus_rrename ( resource $relation , string $name )
dbplus_rsecindex	リレーションに新規セカンダリインデックスを作成する	mixed dbplus_rsecindex ( resource $relation , mixed $domlist , int $type )	成功した場合にリソース、失敗した場合に DBPLUS_ERR_UNKNOWN を返します。
dbplus_runlink	ファイルシステムからリレーションを削除する	int dbplus_runlink ( resource $relation )
dbplus_rzap	リレーションから全てのタプルを削除する	int dbplus_rzap ( resource $relation )
dbplus_savepos	位置を保存する	int dbplus_savepos ( resource $relation )
dbplus_setindex	インデックスを設定する	int dbplus_setindex ( resource $relation , string $idx_name )
dbplus_setindexbynumber	インデックスを数字で設定する	int dbplus_setindexbynumber ( resource $relation , int $idx_number )
dbplus_sql	SQL クエリを実行する	resource dbplus_sql ( string $query [, string $server [, string $dbpath ]] )
dbplus_tcl	サーバー側で TCL コードを実行する	string dbplus_tcl ( int $sid , string $script )
dbplus_tremove	タプルを削除し、新規カレントタプルを返す	int dbplus_tremove ( resource $relation , array $tuple [, array &$current ] )
dbplus_undo	元に戻す	int dbplus_undo ( resource $relation )
dbplus_undoprepare	元に戻す準備をする	int dbplus_undoprepare ( resource $relation )
dbplus_unlockrel	リレーションの書き込みロックを中断する	int dbplus_unlockrel ( resource $relation )
dbplus_unselect	リレーションから制約を削除する	int dbplus_unselect ( resource $relation )
dbplus_update	リレーション内の指定したタプルを更新する	int dbplus_update ( resource $relation , array $old , array $new )
dbplus_xlockrel	リレーションの排他的ロックを要求する	int dbplus_xlockrel ( resource $relation )
dbplus_xunlockrel	リレーションの排他的ロックを解放する	int dbplus_xunlockrel ( resource $relation )
dbx_close	オープンされた接続/データベースを閉じる	int dbx_close ( object $link_identifier )	成功した場合に 1、エラーの場合に 0 を返します。
dbx_compare	ソートするために二つのレコードを比較する	int dbx_compare ( array $row_a , array $row_b , string $column_key [, int $flags = DBX_CMP_ASC | DBX_CMP_NATIVE ] )	row_a[$column_key] が row_b[$column_key] に等しい場合に 0、 前者が後者より大きいかあるいは小さい場合にそれぞれ 1 あるいは -1、 もし DBX_CMP_DESC が設定されていればその逆を返します。
dbx_connect	接続/データベースをオープンする	object dbx_connect ( mixed $module , string $host , string $database , string $username , string $password [, int $persistent ] )	dbx_connect() は成功時にオブジェクト、エラー時に FALSE を返します。接続は確立したもののデータベースが選択できなかった場合には、 接続はクローズされて FALSE を返します。
dbx_error	使用するモジュールの最新の関数コールにおけるエラーメッセージを出力する	string dbx_error ( object $link_identifier )	抽象化されたモジュール（例えば mysql モジュール）の直近の関数コールからエラーメッセージを有する文字列を返します。 同じモジュールに複数の接続がある場合、 最後のエラーのみが取得されます。別のモジュールに接続がある場合、 （link_identifier パラメータで）指定した モジュールに関する直近のエラーのみが返されます。
dbx_escape_string	SQL ステートメントで安全に使用できるように文字列をエスケープする	string dbx_escape_string ( object $link_identifier , string $text )	テキストを返します。 必要なら（クォートやバックスラッシュなど）エスケープ処理を行います。 エラー時には NULL を返します。
dbx_fetch_row	DBX_RESULT_UNBUFFERED フラグを指定した クエリ結果から、行を取得する	mixed dbx_fetch_row ( object $result_identifier )	成功した場合にオブジェクトを返します。このオブジェクトには、 dbx_query() の結果における data プロパティの内容と同じ情報が含まれ、 dbx_query() で設定した内容に応じてインデックスあるいはフィールド名でアクセスが可能です。
dbx_query	クエリを送信し、(ある場合には)結果を全て取得する	mixed dbx_query ( object $link_identifier , string $sql_statement [, int $flags ] )	dbx_query() は、成功した場合に オブジェクトあるいは 1、失敗した場合に 0 を返します。 結果オブジェクトが返されるのは、sql_statement で指定されたクエリが結果セットを生成する場合（例: SELECT クエリ。結果が 0 件の場合も含む）のみです。
dbx_sort	カスタマイズされたソート関数により、dbx_query から結果をソートする	bool dbx_sort ( object $result , string $user_compare_function )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
dcgettext	単一の参照に関するドメインを上書きする	string dcgettext ( string $domain , string $message , int $category )	成功した場合に文字列を返します。
dcngettext	dcgettext の複数形版	string dcngettext ( string $domain , string $msgid1 , string $msgid2 , int $n , int $category )	成功した場合に文字列を返します。
deaggregate	集約されたメソッドやプロパティをオブジェクトから取り除く	void deaggregate ( object $object [, string $class_name ] )	値を返しません。
debug_backtrace	バックトレースを生成する	array debug_backtrace ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0 ]] )	連想配列の配列を返します。連想配列の要素として返される可能性があるものは以下のとおりです。
debug_print_backtrace	バックトレースを表示する	void debug_print_backtrace ([ int $options = 0 [, int $limit = 0 ]] )	値を返しません。
debug_zval_dump	内部的な Zend の値を表す文字列をダンプする	void debug_zval_dump ( mixed $variable [, mixed $... ] )	値を返しません。
decbin	10 進数を 2 進数に変換する	string decbin ( int $number )	binary_string を 2 進文字列で表した値を返します。
dechex	10 進数を 16 進数に変換する	string dechex ( int $number )	number を 16 進文字列で表した値を返します。
decoct	10 進数を 8 進数に変換する	string decoct ( int $number )	number を 8 進文字列で表した値を返します。
define_syslog_variables	syslog に関係する全ての定数を初期化する	void define_syslog_variables ( void )	値を返しません。
define	名前を指定して定数を定義する	bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
defined	指定した名前の定数が存在するかどうかを調べる	bool defined ( string $name )	name で指定した名前の定数が定義されている 場合に TRUE、その他の場合にFALSEを返します。
deg2rad	度単位の数値をラジアン単位に変換する	float deg2rad ( float $number )	number と同等な値をラジアンで表したものを返します。
delete	unlink() か unset() を参照してください	値を返しません。
dgettext	現在のドメインを上書きする	string dgettext ( string $domain , string $message )	成功した場合に文字列を返します。
die	exit と同等
dio_close	fd で指定したファイル記述子を閉じる	void dio_close ( resource $fd )	値を返しません。
dio_fcntl	fd について C ライブラリの fcntl を実行する	mixed dio_fcntl ( resource $fd , int $cmd [, mixed $args ] )	C ライブラリをコールした結果を返します。
dio_open	C ライブラリの入出力ストリーム関数が許すよりも低レベルでファイルをオープンする (必要ならファイルを作成する)	resource dio_open ( string $filename , int $flags [, int $mode = 0 ] )	ファイル記述子を返します。エラー時には FALSE を返します。
dio_read	ファイル記述子からバイトデータを読み込む	string dio_read ( resource $fd [, int $len = 1024 ] )	fd から読み込んだバイトデータを返します。
dio_seek	fd 上で whence から pos に移動する	int dio_seek ( resource $fd , int $pos [, int $whence = SEEK_SET ] )
dio_stat	ファイル記述子 fd に関する stat 情報を取得する	array dio_stat ( resource $fd )	以下のキーを含む連想配列を返します。 "device" - デバイス "inode" - i ノード "mode" - モード "nlink" - ハードリンク数 "uid" - ユーザー ID "gid" - グループ ID "device_type" - デバイス型（inode デバイスの場合） "size" - サイズ（バイト数） "blocksize" - ブロック長 "blocks" - 割り当てられたブロック数 "atime" - 最終アクセス時刻 "mtime" - 最終更新時刻 "ctime" - 最終変更時刻 エラー時には dio_stat() は NULL を返します。
dio_tcsetattr	シリアルポートの端末属性とボーレートを設定する	bool dio_tcsetattr ( resource $fd , array $options )	値を返しません。
dio_truncate	ファイル記述子 fd をオフセットバイトへ丸める	bool dio_truncate ( resource $fd , int $offset )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
dio_write	オプションで丸め長さを指定してデータを書き込む	int dio_write ( resource $fd , string $data [, int $len = 0 ] )	fd に書き込んだバイト数を返します。
dir	ディレクトリクラスのインスタンスを返す	Directory dir ( string $directory [, resource $context ] )	Directory のインスタンスを返します。 パラメータが間違っている場合は NULL、それ以外のエラーの場合は FALSE を返します。
dirname	親ディレクトリのパスを返す	string dirname ( string $path )	親ディレクトリのパスを返します。 path にスラッシュが無い場合は、 カレントディレクトリを示すドット ('.') を返します。それ以外の場合は、スラッシュ以降の /component 部分を取り除いた path を返します。
disk_free_space	ファイルシステムあるいはディスクパーティション上で利用可能な領域を返す	float disk_free_space ( string $directory )	利用可能なバイト数を float 型で返します。 失敗した場合に FALSE を返します。
disk_total_space	ファイルシステムあるいはディスクパーティションの全体サイズを返す	float disk_total_space ( string $directory )	総バイト数を float 型で返します。 失敗した場合に FALSE を返します。
diskfreespace	disk_free_space() のエイリアス
dl	実行時に PHP 拡張モジュールをロードする	bool dl ( string $library )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 拡張モジュールのロード機能が無効だったり、あるいは 無効化されている(enable_dl でオフにされているか または php.ini で セーフモード が有効になっている)場合は、 E_ERROR を発行して実行は停止されます。 指定されたライブラリをロードできず dl() が 失敗した場合、FALSE に加えて E_WARNING メッセージが 発行されます。
dngettext	dgettext の複数形版	string dngettext ( string $domain , string $msgid1 , string $msgid2 , int $n )	成功した場合に文字列を返します。
dns_check_record	checkdnsrr() のエイリアス
dns_get_mx	getmxrr() のエイリアス
dns_get_record	ホスト名に関連する DNS リソースレコードを取得する	array dns_get_record ( string $hostname [, int $type = DNS_ANY [, array &$authns [, array &$addtl [, bool &$raw = false ]]]] )	この関数は、連想配列を要素にもつ配列を返します。 失敗した場合に FALSE を返します。 それぞれの連想配列には 少なくとも 以下のキーが含まれています: 基本 DNS 属性 属性 意味 host これ以降の関連するデータが参照する DNS 名。 class dns_get_record() は Internet クラスのレコードのみを返すので、このパラメータは常に IN を返します。 type レコード型を表す文字列。type の値に応じて、 結果の配列には追加の属性が含まれます。以下の表を参照ください。 ttl このレコードの"有効期限 (Time To Live)"。レコードの本来の ttl と一致するとは 限りません。むしろ、 ネームサーバーへのクエリにかかった時間をそこから引いたものに一致します。
dom_import_simplexml	SimpleXMLElement オブジェクトから DOMElement オブジェクトを取得する	DOMElement dom_import_simplexml ( SimpleXMLElement $node )	追加された DOMElement ノード、あるいは 何らかのエラーが発生した場合は FALSE を返します。
dotnet_load	DOTNET モジュールをロードする	int dotnet_load ( string $assembly_name [, string $datatype_name [, int $codepage ]] )
doubleval	floatval() のエイリアス
each	配列から現在のキーと値のペアを返して、カーソルを進める	array each ( array &$array )	配列 array から現在のキーと値のペアを返します。 このペアは 4 つの要素を持つ配列で、 それぞれの要素は 0, 1, key, value というキーを有しています。 要素 0とkey の各々は配列要素のキー名称を保持しており、1 と value の各々はそのデータを保持しています。
easter_date	指定した年における復活祭の真夜中のUnix時を得る	int easter_date ([ int $year ] )	復活祭の日を Unix タイムスタンプで返します。
easter_days	指定した年において、3 月 21 日から復活祭までの日数を得る	int easter_days ([ int $year [, int $method = CAL_EASTER_DEFAULT ]] )	指定した年 year において、3 月 21 日から復活祭までの日数を返します。
echo	1 つ以上の文字列を出力する	void echo ( string $arg1 [, string $... ] )	値を返しません。
eio_busy	人為的に負荷を高くする。テストやベンチマークなどで有用	resource eio_busy ( int $delay [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_busy() は成功した場合にリクエストリソースを返します。エラー時には FALSE を返します。
eio_cancel	リクエストを取り消す	void eio_cancel ( resource $req )	値を返しません。
eio_chmod	ファイルやディレクトリのパーミッションを変更する	resource eio_chmod ( string $path , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_chmod() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_chown	ファイルやディレクトリのオーナーを変更する	resource eio_chown ( string $path , int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )	eio_chown() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_close	ファイルを閉じる	resource eio_close ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_close() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_custom	eio_* のようなカスタムリクエストを実行する	resource eio_custom ( callable $execute , int $pri , callable $callback [, mixed $data = NULL ] )	eio_custom() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_dup2	ファイルディスクリプタを複製する	resource eio_dup2 ( mixed $fd , mixed $fd2 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_dup2() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_event_loop	すべてのリクエストを処理し終えるまで libeio をポールする	bool eio_event_loop ( void )	eio_event_loop() は、成功した場合に TRUE を返します。エラー時に FALSE を返します。
eio_fallocate	呼び出し元が、ファイルに割り当てられたディスク空間を直接操作できるようにする	resource eio_fallocate ( mixed $fd , int $mode , int $offset , int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_fallocate() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_fchmod	ファイルのパーミッションを変更する	resource eio_fchmod ( mixed $fd , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_fchmod() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_fchown	ファイルのオーナーを変更する	resource eio_fchown ( mixed $fd , int $uid [, int $gid = -1 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )
eio_fdatasync	ファイルのコア内の情報をストレージデバイスに同期させる	resource eio_fdatasync ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_fdatasync() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_fstat	ファイルの状態を取得する	resource eio_fstat ( mixed $fd , int $pri , callable $callback [, mixed $data ] )	eio_busy() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_fstatvfs	ファイルシステムの状態を取得する	resource eio_fstatvfs ( mixed $fd , int $pri , callable $callback [, mixed $data ] )	eio_fstatvfs() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_fsync	メモリ内でのファイルの状態をストレージデバイスに同期させる	resource eio_fsync ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_fsync() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_ftruncate	ファイルを切り詰める	resource eio_ftruncate ( mixed $fd [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )	eio_ftruncate() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_futime	ファイルの最終アクセス時刻と変更時刻を変更する	resource eio_futime ( mixed $fd , float $atime , float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_futime() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_get_event_stream	内部での libeio との通信に使う変数を表すストリームを取得する	mixed eio_get_event_stream ( void )	eio_get_event_stream() は、成功した場合にストリームを返します。それ以外の場合に NULL を返します。
eio_get_last_error	リクエストリソースに関連づけられた直近のエラーの説明を文字列で返す	string eio_get_last_error ( resource $req )	eio_get_last_error() は、req に関連づけられた直近のエラーの説明を文字列で返します。
eio_grp_add	リクエストをリクエストグループに追加する	void eio_grp_add ( resource $grp , resource $req )	eio_grp_add() は値を返しません。
eio_grp_cancel	リクエストグループをキャンセルする	void eio_grp_cancel ( resource $grp )	値を返しません。
eio_grp_limit	グループリミットを設定する	void eio_grp_limit ( resource $grp , int $limit )	値を返しません。
eio_grp	リクエストグループを作る	resource eio_grp ( callable $callback [, string $data = NULL ] )	eio_grp() は、成功した場合にリクエストグループリソースを返します。エラー時に FALSE を返します。
eio_init	Eio を初期化する	void eio_init ( void )	値を返しません。
eio_link	ファイルのハードリンクを作る	resource eio_link ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )
eio_lstat	ファイルの状態を取得する	resource eio_lstat ( string $path , int $pri , callable $callback [, mixed $data = NULL ] )	eio_lstat() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_mkdir	ディレクトリを作る	resource eio_mkdir ( string $path , int $mode [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_mkdir() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_mknod	特殊ファイルあるいは一般ファイルを作る	resource eio_mknod ( string $path , int $mode , int $dev [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_mknod() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_nop	何もせず、ただリクエストのサイクルを回す	resource eio_nop ([ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_nop() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_npending	終了したけれども処理されなかったリクエストの数を返す	int eio_npending ( void )	eio_npending() は、終了したけれども処理されなかったリクエストの数を返します。
eio_nready	未処理のリクエスト数を返す	int eio_nready ( void )	eio_nready() は、未処理のリクエスト数を返します。
eio_nreqs	処理対象のリクエスト数を返す	int eio_nreqs ( void )	eio_nreqs() は、処理対象のリクエスト数を返します。
eio_nthreads	現在利用中のスレッド数を返す	int eio_nthreads ( void )	eio_nthreads() は、現在利用中のスレッド数を返します。
eio_open	ファイルを開く	resource eio_open ( string $path , int $flags , int $mode , int $pri , callable $callback [, mixed $data = NULL ] )	eio_open() は、成功した場合に callback の result 引数でファイルディスクリプタを返します。 それ以外の場合は、result は -1 になります。
eio_poll	未処理のリクエストがあるかどうかを調べる	int eio_poll ( void )	何かのリクエストを実行してそれが非ゼロを返した場合は、その値を返します。 それ以外の場合は 0 を返します。
eio_read	ファイルを、指定したオフセットから読み込む	resource eio_read ( mixed $fd , int $length , int $offset , int $pri , callable $callback [, mixed $data = NULL ] )	eio_read() は、読み込んだデータを callback 関数の result 引数に格納します。
eio_readahead	ファイルを先読みしてページキャッシュに格納する	resource eio_readahead ( mixed $fd , int $offset , int $length [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_readahead() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_readdir	ディレクトリ全体を読み込む	resource eio_readdir ( string $path , int $flags , int $pri , callable $callback [, string $data = NULL ] )	eio_readdir() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。 callback 関数の result に設定される内容は flags によって変わります。
eio_readlink	シンボリックリンクの値を読む	resource eio_readlink ( string $path , int $pri , callable $callback [, string $data = NULL ] )	eio_readlink() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_realpath	正規化した絶対パスを取得する	resource eio_realpath ( string $path , int $pri , callable $callback [, string $data = NULL ] )
eio_rename	ファイル名や場所を変更する	resource eio_rename ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_rename() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_rmdir	ディレクトリを削除する	resource eio_rmdir ( string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_rmdir() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_seek	fd で指定したファイル内でのオフセットを、offset と whence に従って移動する	resource eio_seek ( mixed $fd , int $offset , int $whence [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_seek() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_sendfile	ファイルディスクリプタ間でデータを転送する	resource eio_sendfile ( mixed $out_fd , mixed $in_fd , int $offset , int $length [, int $pri [, callable $callback [, string $data ]]] )	eio_sendfile() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_set_max_idle	アイドルスレッドの最大数を設定する	void eio_set_max_idle ( int $nthreads )	値を返しません。
eio_set_max_parallel	最大の並列スレッド数を設定する	void eio_set_max_parallel ( int $nthreads )	値を返しません。
eio_set_max_poll_reqs	一度のポールで行う最大のリクエスト回数を設定する	void eio_set_max_poll_reqs ( int $nreqs )	値を返しません。
eio_set_max_poll_time	最大のポール時間を設定する	void eio_set_max_poll_time ( float $nseconds )	値を返しません。
eio_set_min_parallel	最小の並列スレッド数を設定する	void eio_set_min_parallel ( string $nthreads )	値を返しません。
eio_stat	ファイルの状態を取得する	resource eio_stat ( string $path , int $pri , callable $callback [, mixed $data = NULL ] )	eio_stat() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。 成功した場合は、callback の result 引数に配列が格納されます。
eio_statvfs	ファイルシステムの状態を取得する	resource eio_statvfs ( string $path , int $pri , callable $callback [, mixed $data ] )	eio_statvfs() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。 成功した場合は、callback の result 引数に配列が格納されます。
eio_symlink	シンボリックリンクを作る	resource eio_symlink ( string $path , string $new_path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_symlink() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_sync_file_range	ファイルセグメントをディスクに同期する	resource eio_sync_file_range ( mixed $fd , int $offset , int $nbytes , int $flags [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_sync_file_range() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_sync	バッファのキャッシュをディスクに書き込む	resource eio_sync ([ int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_sync() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_syncfs	Linux の syncfs システムコールが使えれば、それを呼ぶ	resource eio_syncfs ( mixed $fd [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_syncfs() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_truncate	ファイルを切り詰める	resource eio_truncate ( string $path [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]] )	eio_busy() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_unlink	名前を削除し、その名前で参照しているファイルも削除する	resource eio_unlink ( string $path [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_unlink() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_utime	ファイルの最終アクセス時刻と変更時刻を変更する	resource eio_utime ( string $path , float $atime , float $mtime [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]] )	eio_utime() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
eio_write	ファイルに書き込む	resource eio_write ( mixed $fd , string $str [, int $length = 0 [, int $offset = 0 [, int $pri = EIO_PRI_DEFAULT [, callable $callback = NULL [, mixed $data = NULL ]]]]] )	eio_write() は、成功した場合にリクエストリソースを返します。エラー時に FALSE を返します。
empty	変数が空であるかどうかを検査する	bool empty ( mixed $var )	var が存在し、かつその値が空や0でなければ FALSE を返します。 それ以外の場合は TRUE を返します。
enchant_broker_describe	Enchant プロバイダを列挙する	array enchant_broker_describe ( resource $broker )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
enchant_broker_dict_exists	辞書が存在するかどうかを調べる。空でないタグを使用する	bool enchant_broker_dict_exists ( resource $broker , string $tag )	タグが存在する場合に TRUE、存在しない場合に FALSE を返します。
enchant_broker_free_dict	辞書リソースを開放する	bool enchant_broker_free_dict ( resource $dict )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
enchant_broker_free	ブローカーリソースおよびその辞書を開放する	bool enchant_broker_free ( resource $broker )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
enchant_broker_get_error	ブローカーの直近のエラーを返す	string enchant_broker_get_error ( resource $broker )	エラーが見つかった場合にメッセージ文字列、それ以外の場合に FALSE を返します。
enchant_broker_init	要求を満たすブローカーオブジェクトを作成する	resource enchant_broker_init ( void )	成功した場合にブローカーリソース、それ以外の場合に FALSE を返します。
enchant_broker_list_dicts	使用可能な辞書の一覧を返す	mixed enchant_broker_list_dicts ( resource $broker )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
enchant_broker_request_dict	タグを使用して新しい辞書を作成する	resource enchant_broker_request_dict ( resource $broker , string $tag )	成功した場合に辞書リソース、失敗した場合に FALSE を返します。
enchant_broker_request_pwl_dict	PWL ファイルを使用して辞書を作成する	resource enchant_broker_request_pwl_dict ( resource $broker , string $filename )	成功した場合に辞書リソース、失敗した場合に FALSE を返します。
enchant_broker_set_ordering	その言語で使用する辞書の優先順位を宣言する	bool enchant_broker_set_ordering ( resource $broker , string $tag , string $ordering )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
enchant_dict_add_to_personal	パーソナル単語リストに単語を追加する	void enchant_dict_add_to_personal ( resource $dict , string $word )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
enchant_dict_add_to_session	'単語' を、このスペルチェックセッションに追加する	void enchant_dict_add_to_session ( resource $dict , string $word )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
enchant_dict_check	単語のスペルが正しいかどうかを調べる	bool enchant_dict_check ( resource $dict , string $word )	単語のスペルが正しい場合に TRUE、 そうでない場合に FALSE を返します。
enchant_dict_describe	個々の辞書について説明する	mixed enchant_dict_describe ( resource $dict )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
enchant_dict_get_error	現在のスペリングセッションの直近のエラーを返す	string enchant_dict_get_error ( resource $dict )	エラーメッセージを表す文字列、あるいはエラーが発生していない場合に FALSE を返します。
enchant_dict_is_in_session	このスペリングセッションに '単語' が存在するかどうかを調べる	bool enchant_dict_is_in_session ( resource $dict , string $word )	単語が存在する場合に TRUE、それ以外の場合に FALSE を返します。
enchant_dict_quick_check	単語のスペルが正しいかどうかを調べ、修正候補を提供する	bool enchant_dict_quick_check ( resource $dict , string $word [, array &$suggestions ] )	単語のスペルが正しい場合に TRUE、 そうでない場合に FALSE を返します。
enchant_dict_store_replacement	単語の修正候補を追加する	void enchant_dict_store_replacement ( resource $dict , string $mis , string $cor )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
enchant_dict_suggest	修正候補となる値の一覧を返す	array enchant_dict_suggest ( resource $dict , string $word )	単語のスペルが間違っている場合に、修正候補の配列を返します。
end	配列の内部ポインタを最終要素にセットする	mixed end ( array &$array )	最後の要素の値、あるいは空の配列の場合は FALSE を返します。
ereg_replace	正規表現による置換を行う	string ereg_replace ( string $pattern , string $replacement , string $string )	置換後の文字列を返します。 マッチしなかった場合は、元の文字列をそのまま返します。
ereg	正規表現によるマッチングを行う	int ereg ( string $pattern , string $string [, array &$regs ] )	string の中で pattern がマッチした場合にはマッチした文字列の長さを返し、マッチしなかった場合 またはエラーとなった場合は FALSE を返します。
eregi_replace	大文字小文字を区別せずに正規表現による置換を行う	string eregi_replace ( string $pattern , string $replacement , string $string )	置換後の文字列を返します。 マッチしなかった場合は、元の文字列をそのまま返します。
eregi	大文字小文字を区別せずに正規表現によるマッチングを行う	int eregi ( string $pattern , string $string [, array &$regs ] )	string の中で pattern がマッチした場合にはマッチした文字列の長さを返し、マッチしなかった場合 またはエラーとなった場合は FALSE を返します。
error_get_last	最後に発生したエラーを取得する	array error_get_last ( void )	最後に発生したエラーについての情報を連想配列で返します。連想配列のキーは "type"、"message"、"file" および "line" となります。 PHP の内部関数で発生したエラーの場合は、 "message" の先頭に関数名が含まれています。 エラーが発生していない場合は NULL を返します。
error_log	定義されたエラー処理ルーチンにエラーメッセージを送信する	bool error_log ( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
error_reporting	出力する PHP エラーの種類を設定する	int error_reporting ([ int $level ] )	変更前の error_reporting レベルを返します。level パラメータを指定しなかった場合は、現在のレベルを返します。
escapeshellarg	シェル引数として使用される文字列をエスケープする	string escapeshellarg ( string $arg )	エスケープされた文字列
escapeshellcmd	シェルのメタ文字をエスケープする	string escapeshellcmd ( string $command )	エスケープされた文字列
eval	文字列を PHP コードとして評価する	mixed eval ( string $code )	評価されるコードの中で return が コールされない限り、 eval() は NULL を返します。 return がコールされた場合は、その値を返します。 評価されるコードの中でパースエラーが発生した場合は、 eval() は FALSE を返します。 それ以降のコードは通常通り実行されます。 eval() の中でのパースエラーを set_error_handler() で捕捉することはできません。
event_add	モニタするイベントに追加する	bool event_add ( resource $event [, int $timeout = -1 ] )	event_add() は、成功した場合に TRUE、エラー時に FALSE を返します。
event_base_free	イベントベースを破棄する	void event_base_free ( resource $event_base )
event_base_loop	イベントを処理する	int event_base_loop ( resource $event_base [, int $flags = 0 ] )	event_base_loop() は、成功した場合に 0、エラー時に -1、 イベントが登録されていなければ 1 を返します。
event_base_loopbreak	イベントループを中止する	bool event_base_loopbreak ( resource $event_base )	event_base_loopbreak() は、成功した場合に TRUE、エラー時に FALSE を返します。
event_base_loopexit	あとでループを終了する	bool event_base_loopexit ( resource $event_base [, int $timeout = -1 ] )	event_base_loopexit() は、成功した場合に TRUE、エラー時に FALSE を返します。
event_base_new	新しいイベントベースを作成して初期化する	resource event_base_new ( void )	event_base_new() は、成功した場合に有効なイベントベースリソース、 エラー時に FALSE を返します。
event_base_priority_init	イベントの優先度レベルの数値を設定する	bool event_base_priority_init ( resource $event_base , int $npriorities )	event_base_priority_init() は、成功した場合に TRUE、 エラー時に FALSE を返します。
event_base_set	イベントベースをイベントと関連づける	bool event_base_set ( resource $event , resource $event_base )	event_base_set() は、成功した場合に TRUE、エラー時に FALSE を返します。
event_buffer_base_set	バッファつきイベントをイベントベースと関連づける	bool event_buffer_base_set ( resource $bevent , resource $event_base )	event_buffer_base_set() は、成功した場合に TRUE、エラー時に FALSE を返します。
event_buffer_disable	バッファつきイベントを無効にする	bool event_buffer_disable ( resource $bevent , int $events )	event_buffer_disable() は、成功した場合に TRUE、エラー時に FALSE を返します。
event_buffer_enable	バッファつきイベントを有効にする	bool event_buffer_enable ( resource $bevent , int $events )	event_buffer_enable() は、成功した場合に TRUE、エラー時に FALSE を返します。
event_buffer_fd_set	バッファつきイベントのファイル記述子を変更する	void event_buffer_fd_set ( resource $bevent , resource $fd )
event_buffer_free	バッファつきイベントを破棄する	void event_buffer_free ( resource $bevent )
event_buffer_new	新しいバッファつきイベントを作成する	resource event_buffer_new ( resource $stream , mixed $readcb , mixed $writecb , mixed $errorcb [, mixed $arg ] )	event_buffer_new() は、成功した場合に新しいバッファつきイベント、 エラー時に FALSE を返します。
event_buffer_priority_set	バッファ着きイベントの優先度を設定する	bool event_buffer_priority_set ( resource $bevent , int $priority )	event_buffer_priority_set() は、成功した場合に TRUE、エラー時に FALSE を返します。
event_buffer_read	バッファつきイベントからデータを読み込む	string event_buffer_read ( resource $bevent , int $data_size )
event_buffer_set_callback	バッファつきイベントのコールバックを設定あるいはリセットする	bool event_buffer_set_callback ( resource $event , mixed $readcb , mixed $writecb , mixed $errorcb [, mixed $arg ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
event_buffer_timeout_set	バッファつきイベントの読み込みタイムアウトおよび書き込みタイムアウトを設定する	void event_buffer_timeout_set ( resource $bevent , int $read_timeout , int $write_timeout )
event_buffer_watermark_set	読み込みおよび書き込みイベントのウォーターマークを設定する	void event_buffer_watermark_set ( resource $bevent , int $events , int $lowmark , int $highmark )
event_buffer_write	バッファつきイベントにデータを書き込む	bool event_buffer_write ( resource $bevent , string $data [, int $data_size = -1 ] )	event_buffer_write() は、成功した場合に TRUE、エラー時に FALSE を返します。
event_del	モニタするイベントから削除する	bool event_del ( resource $event )	event_del() は、成功した場合に TRUE、 エラー時に FALSE を返します。
event_free	イベントリソースを解放する	void event_free ( resource $event )
event_new	新しいイベントを作成する	resource event_new ( void )	event_new() は、成功した場合にイベントリソース、 エラー時に FALSE を返します。
event_set	イベントを準備する	bool event_set ( resource $event , mixed $fd , int $events , mixed $callback [, mixed $arg ] )	event_set() は成功した場合に TRUE、エラー時に FALSE を返します。
exec	外部プログラムを実行する	string exec ( string $command [, array &$output [, int &$return_var ]] )	コマンド結果の最後の行を返します。コマンドを実行し、 一切干渉を受けずに直接コマンドから全てのデータを受けとる必要が あるならば、 PassThru() 関数を使ってください。
exif_imagetype	イメージの型を定義する	int exif_imagetype ( string $filename )	正しいサインが見つかった場合は適切な定数、それ以外の場合は FALSE を返します。返り値は getimagesize() がインデックス 2 に対して返す値と同じですが、 exif_imagetype() のほうがずっと早く動作します。
exif_read_data	JPEG あるいは TIFF から EXIF ヘッダを読み込む	array exif_read_data ( string $filename [, string $sections = NULL [, bool $arrays = false [, bool $thumbnail = false ]]] )	ヘッダ名がキー・ヘッダの内容が値となる連想配列を返します。 返されるデータがない場合は exif_read_data() は FALSE を返します。
exif_tagname	インデックスに対応するヘッダ名を取得する	string exif_tagname ( int $index )	ヘッダ名を返します。もし index が EXIF タグ ID として未定義の場合は FALSE を返します。
exif_thumbnail	TIFF あるいは JPEG 形式の画像に埋め込まれたサムネイルを取得する	string exif_thumbnail ( string $filename [, int &$width [, int &$height [, int &$imagetype ]]] )	埋め込まれたサムネイルを返します。画像がサムネイルを含まない場合は FALSE を返します。
exit	メッセージを出力し、現在のスクリプトを終了する	void exit ([ string $status ] )	値を返しません。
exp	e の累乗を計算する	float exp ( float $arg )	'e' の arg 乗を返します。
expect_expectl	プロセスの出力がパターンに一致する・指定した時間が経過する・ あるいは EOF に達するのいずれかにあてはまるまで待ち続ける	int expect_expectl ( resource $expect , array $cases [, array &$match ] )	一致したパターンに関連付けられた値を返します。
expect_popen	Bourne シェル経由でコマンドを実行し、プロセスへの PTY ストリームをオープンする	resource expect_popen ( string $command )	プロセスの標準入力・標準出力・標準エラー出力への PTY ストリームを返します。
explode	文字列を文字列により分割する	array explode ( string $delimiter , string $string [, int $limit ] )	string の内容を delimiter で分割した文字列の配列を返します。
expm1	値がゼロに近い時にでも精度を保つために exp(number) - 1 を返す	float expm1 ( float $arg )	'e' の arg 乗から 1 を引いた値を返します。
extension_loaded	ある拡張機能がロードされているかどうかを調べる	bool extension_loaded ( string $name )	name で指定する拡張機能がロードされている場合に TRUE を返します。さもなければ FALSE を返します。
extract	配列からシンボルテーブルに変数をインポートする	int extract ( array &$var_array [, int $extract_type = EXTR_OVERWRITE [, string $prefix = NULL ]] )	シンボルテーブルにインポートした変数の数を返します。
ezmlm_hash	EZMLM で必要なハッシュ値を計算する	int ezmlm_hash ( string $addr )	addr のハッシュ値を返します。
fam_cancel_monitor	監視を終了する	bool fam_cancel_monitor ( resource $fam , resource $fam_monitor )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fam_close	FAM 接続を閉じる	void fam_close ( resource $fam )	値を返しません。
fam_monitor_collection	指定したディレクトリにあるファイルの変更を監視する	resource fam_monitor_collection ( resource $fam , string $dirname , int $depth , string $mask )	モニタリングリソース、あるいはエラー時に FALSE を返します。
fam_monitor_directory	ディレクトリの変更を監視する	resource fam_monitor_directory ( resource $fam , string $dirname )	モニタリングリソース、あるいはエラー時に FALSE を返します。
fam_monitor_file	通常のファイルの変更を監視する	resource fam_monitor_file ( resource $fam , string $filename )	モニタリングリソース、あるいはエラー時に FALSE を返します。
fam_next_event	次の待機中の FAM イベントを返す	array fam_next_event ( resource $fam )	FAM イベントコードを要素 'code' に、このイベントが適用されるファイルのパスを 要素 'filename' に、 オプションでホスト名を要素 'hostname' に 含む配列を返します。
fam_open	FAM デーモンへの接続をオープンする	resource fam_open ([ string $appname ] )	成功した場合に FAM サービスへの接続を表すリソース、 失敗した場合に FALSE を返します。
fam_pending	待機中の FAM イベントの有無を調べる	int fam_pending ( resource $fam )	fam_next_event() により取得可能な待機中のイベントが ある場合にゼロ以外の値、ない場合にゼロを返します。
fam_resume_monitor	中断された監視処理を再開する	bool fam_resume_monitor ( resource $fam , resource $fam_monitor )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fam_suspend_monitor	監視を一時的に中断する	bool fam_suspend_monitor ( resource $fam , resource $fam_monitor )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fann_cascadetrain_on_data	Trains on an entire dataset, for a period of time using the Cascade2 training algorithm	bool fann_cascadetrain_on_data ( resource $ann , resource $data , int $max_neurons , int $neurons_between_reports , float $desired_error )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_cascadetrain_on_file	Trains on an entire dataset read from file, for a period of time using the Cascade2 training algorithm.	bool fann_cascadetrain_on_file ( resource $ann , string $filename , int $max_neurons , int $neurons_between_reports , float $desired_error )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_clear_scaling_params	Clears scaling parameters	bool fann_clear_scaling_params ( resource $ann )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_copy	Creates a copy of a fann structure	resource fann_copy ( resource $ann )	Returns a copy of neural network resource on success, or FALSE on error
fann_create_from_file	Constructs a backpropagation neural network from a configuration file	resource fann_create_from_file ( string $configuration_file )	成功した場合にニューラルネットワークリソース、エラー時に FALSE を返します。
fann_create_shortcut_array	Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections	resource fann_create_shortcut_array ( int $num_layers , array $layers )	Returns a neural network resource on success, or FALSE on error.
fann_create_shortcut	Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections	reference fann_create_shortcut ( int $num_layers , int $num_neurons1 , int $num_neurons2 [, int $... ] )	Returns a neural network resource on success, or FALSE on error.
fann_create_sparse_array	Creates a standard backpropagation neural network, which is not fully connected using an array of layer sizes	ReturnType fann_create_sparse_array ( float $connection_rate , int $num_layers , array $layers )	Returns a neural network resource on success, or FALSE on error.
fann_create_sparse	Creates a standard backpropagation neural network, which is not fully connected	ReturnType fann_create_sparse ( float $connection_rate , int $num_layers , int $num_neurons1 , int $num_neurons2 [, int $... ] )	Returns a neural network resource on success, or FALSE on error.
fann_create_standard_array	Creates a standard fully connected backpropagation neural network using an array of layer sizes	resource fann_create_standard_array ( int $num_layers , array $layers )	Returns a neural network resource on success, or FALSE on error.
fann_create_standard	Creates a standard fully connected backpropagation neural network	resource fann_create_standard ( int $num_layers , int $num_neurons1 , int $num_neurons2 [, int $... ] )	Returns a neural network resource on success, or FALSE on error.
fann_create_train_from_callback	Creates the training data struct from a user supplied function	resource fann_create_train_from_callback ( int $num_data , int $num_input , int $num_output , collable $user_function )	成功した場合にニューラルネットワークトレーニングリソース、エラー時に FALSE を返します。
fann_create_train	Creates an empty training data struct	resource fann_create_train ( int $num_data , int $num_input , int $num_output )	成功した場合にニューラルネットワークトレーニングリソース、エラー時に FALSE を返します。
fann_descale_input	Scale data in input vector after get it from ann based on previously calculated parameters	bool fann_descale_input ( resource $ann , array $input_vector )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_descale_output	Scale data in output vector after get it from ann based on previously calculated parameters	bool fann_descale_output ( resource $ann , array $output_vector )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_descale_train	Descale input and output data based on previously calculated parameters	bool fann_descale_train ( resource $ann , resource $train_data )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_destroy_train	Destructs the training data	bool fann_destroy_train ( resource $train_data )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_destroy	Destroys the entire network and properly freeing all the associated memory	bool fann_destroy ( resource $ann )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_duplicate_train_data	Returns an exact copy of a fann train data	resource fann_duplicate_train_data ( resource $data )	成功した場合にニューラルネットワークトレーニングリソース、エラー時に FALSE を返します。
fann_get_activation_function	Returns the activation function	int fann_get_activation_function ( resource $ann , int $layer , int $neuron )	Learning functions constant or -1 if the neuron is not defined in the neural network, or FALSE on error.
fann_get_activation_steepness	Returns the activation steepness for supplied neuron and layer number	float fann_get_activation_steepness ( resource $ann , int $layer , int $neuron )	The activation steepness for the neuron or -1 if the neuron is not defined in the neural network, or FALSE on error.
fann_get_bias_array	Get the number of bias in each layer in the network	array fann_get_bias_array ( resource $ann )	An array of numbers of bias in each layer
fann_get_bit_fail_limit	Returns the bit fail limit used during training	float fann_get_bit_fail_limit ( resource $ann )	The bit fail limit, or FALSE on error.
fann_get_bit_fail	The number of fail bits	int fann_get_bit_fail ( resource $ann )	The number of bits fail, or FALSE on error.
fann_get_cascade_activation_functions_count	Returns the number of cascade activation functions	int fann_get_cascade_activation_functions_count ( resource $ann )	The number of cascade activation functions, or FALSE on error.
fann_get_cascade_activation_functions	Returns the cascade activation functions	array fann_get_cascade_activation_functions ( resource $ann )	The cascade activation functions, or FALSE on error.
fann_get_cascade_activation_steepnesses_count	The number of activation steepnesses	int fann_get_cascade_activation_steepnesses_count ( resource $ann )	The number of activation steepnesses, or FALSE on error.
fann_get_cascade_activation_steepnesses	Returns the cascade activation steepnesses	array fann_get_cascade_activation_steepnesses ( resource $ann )	The cascade activation steepnesses, or FALSE on error.
fann_get_cascade_candidate_change_fraction	Returns the cascade candidate change fraction	float fann_get_cascade_candidate_change_fraction ( resource $ann )	The cascade candidate change fraction, or FALSE on error.
fann_get_cascade_candidate_limit	Return the candidate limit	float fann_get_cascade_candidate_limit ( resource $ann )	The candidate limit, or FALSE on error.
fann_get_cascade_candidate_stagnation_epochs	Returns the number of cascade candidate stagnation epochs	float fann_get_cascade_candidate_stagnation_epochs ( resource $ann )	The number of cascade candidate stagnation epochs, or FALSE on error.
fann_get_cascade_max_cand_epochs	Returns the maximum candidate epochs	int fann_get_cascade_max_cand_epochs ( resource $ann )	The maximum candidate epochs, or FALSE on error.
fann_get_cascade_max_out_epochs	Returns the maximum out epochs	int fann_get_cascade_max_out_epochs ( resource $ann )	The maximum out epochs, or FALSE on error.
fann_get_cascade_min_cand_epochs	Returns the minimum candidate epochs	int fann_get_cascade_min_cand_epochs ( resource $ann )	The minimum candidate epochs, or FALSE on error.
fann_get_cascade_min_out_epochs	Returns the minimum out epochs	int fann_get_cascade_min_out_epochs ( resource $ann )	The minimum out epochs, or FALSE on error.
fann_get_cascade_num_candidate_groups	Returns the number of candidate groups	int fann_get_cascade_num_candidate_groups ( resource $ann )	The number of candidate groups, or FALSE on error.
fann_get_cascade_num_candidates	Returns the number of candidates used during training	int fann_get_cascade_num_candidates ( resource $ann )	The number of candidates used during training, or FALSE on error.
fann_get_cascade_output_change_fraction	Returns the cascade output change fraction	float fann_get_cascade_output_change_fraction ( resource $ann )	The cascade output change fraction, or FALSE on error.
fann_get_cascade_output_stagnation_epochs	Returns the number of cascade output stagnation epochs	int fann_get_cascade_output_stagnation_epochs ( resource $ann )	The number of cascade output stagnation epochs, or FALSE on error.
fann_get_cascade_weight_multiplier	Returns the weight multiplier	float fann_get_cascade_weight_multiplier ( resource $ann )	The weight multiplier, or FALSE on error.
fann_get_connection_array	Get connections in the network	array fann_get_connection_array ( resource $ann )	An array of connections in the network
fann_get_connection_rate	Get the connection rate used when the network was created	float fann_get_connection_rate ( resource $ann )	The connection rate used when the network was created, or FALSE on error.
fann_get_errno	Returns the last error number	int fann_get_errno ( resource $errdat )	The error number, or FALSE on error.
fann_get_errstr	Returns the last errstr	string fann_get_errstr ( resource $errdat )	The last error string, or FALSE on error.
fann_get_layer_array	Get the number of neurons in each layer in the network	array fann_get_layer_array ( resource $ann )	An array of numbers of neurons in each leayer
fann_get_learning_momentum	Returns the learning momentum	float fann_get_learning_momentum ( resource $ann )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_get_learning_rate	Returns the learning rate	float fann_get_learning_rate ( resource $ann )	The learning rate, or FALSE on error.
fann_get_MSE	Reads the mean square error from the network	float fann_get_MSE ( resource $ann )	The mean square error, or FALSE on error.
fann_get_network_type	Get the type of neural network it was created as	int fann_get_network_type ( resource $ann )	Network type constant, or FALSE on error.
fann_get_num_input	Get the number of input neurons	int fann_get_num_input ( resource $ann )	Number of input neurons, or FALSE on error
fann_get_num_layers	Get the number of layers in the neural network	int fann_get_num_layers ( resource $ann )	The number of leayers in the neural network, or FALSE on error.
fann_get_num_output	Get the number of output neurons	int fann_get_num_output ( resource $ann )	Number of output neurons, or FALSE on error
fann_get_quickprop_decay	Returns the decay which is a factor that weights should decrease in each iteration during quickprop training	float fann_get_quickprop_decay ( resource $ann )	The decay, or FALSE on error.
fann_get_quickprop_mu	Returns the mu factor	float fann_get_quickprop_mu ( resource $ann )	The mu factor, or FALSE on error.
fann_get_rprop_decrease_factor	Returns the increase factor used during RPROP training	float fann_get_rprop_decrease_factor ( resource $ann )	The decrease factor, or FALSE on error.
fann_get_rprop_delta_max	Returns the maximum step-size	float fann_get_rprop_delta_max ( resource $ann )	The maximum step-size, or FALSE on error.
fann_get_rprop_delta_min	Returns the minimum step-size	float fann_get_rprop_delta_min ( resource $ann )	The minimum step-size, or FALSE on error.
fann_get_rprop_delta_zero	Returns the initial step-size	ReturnType fann_get_rprop_delta_zero ( resource $ann )	The initial step-size, or FALSE on error.
fann_get_rprop_increase_factor	Returns the increase factor used during RPROP training	float fann_get_rprop_increase_factor ( resource $ann )	The increase factor, or FALSE on error.
fann_get_sarprop_step_error_shift	Returns the sarprop step error shift	float fann_get_sarprop_step_error_shift ( resource $ann )	The sarprop step error shift , or FALSE on error.
fann_get_sarprop_step_error_threshold_factor	Returns the sarprop step error threshold factor	float fann_get_sarprop_step_error_threshold_factor ( resource $ann )	The sarprop step error threshold factor, or FALSE on error.
fann_get_sarprop_temperature	Returns the sarprop temperature	float fann_get_sarprop_temperature ( resource $ann )	The sarprop temperature, or FALSE on error.
fann_get_sarprop_weight_decay_shift	Returns the sarprop weight decay shift	float fann_get_sarprop_weight_decay_shift ( resource $ann )	The sarprop weight decay shift, or FALSE on error.
fann_get_total_connections	Get the total number of connections in the entire network	int fann_get_total_connections ( resource $ann )	Total number of connections in the entire network, or FALSE on error
fann_get_total_neurons	Get the total number of neurons in the entire network	int fann_get_total_neurons ( resource $ann )	Total number of neurons in the entire network, or FALSE on error.
fann_get_train_error_function	Returns the error function used during training	int fann_get_train_error_function ( resource $ann )	The error function constant, or FALSE on error.
fann_get_train_stop_function	Returns the the stop function used during training	int fann_get_train_stop_function ( resource $ann )	The stop function constant, or FALSE on error.
fann_get_training_algorithm	Returns the training algorithm	int fann_get_training_algorithm ( resource $ann )	Training algorithm constant, or FALSE on error.
fann_init_weights	Initialize the weights using Widrow + Nguyen’s algorithm	bool fann_init_weights ( resource $ann , resource $train_data )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_length_train_data	Returns the number of training patterns in the train data	int fann_length_train_data ( resource $data )	Number of elements in the train data resource , or FALSE on error.
fann_merge_train_data	Merges the train data	resource fann_merge_train_data ( resource $data1 , resource $data2 )	New merged train data resource , or FALSE on error.
fann_num_input_train_data	Returns the number of inputs in each of the training patterns in the train data	int fann_num_input_train_data ( resource $data )	The number of inputs, or FALSE on error.
fann_num_output_train_data	Returns the number of outputs in each of the training patterns in the train data	int fann_num_output_train_data ( resource $data )	The number of outputs, or FALSE on error.
fann_print_error	Prints the error string	void fann_print_error ( string $errdat )	値を返しません。
fann_randomize_weights	Give each connection a random weight between min_weight and max_weight	bool fann_randomize_weights ( resource $ann , float $min_weight , float $max_weight )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_read_train_from_file	Reads a file that stores training data	resource fann_read_train_from_file ( string $filename )	成功した場合にニューラルネットワークトレーニングリソース、エラー時に FALSE を返します。
fann_reset_errno	Resets the last error number	void fann_reset_errno ( resource $errdat )	値を返しません。
fann_reset_errstr	Resets the last error string	void fann_reset_errstr ( resource $errdat )	値を返しません。
fann_reset_MSE	Resets the mean square error from the network	bool fann_reset_MSE ( string $ann )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_run	Will run input through the neural network	array fann_run ( resource $ann , array $input )	Array of output values, or FALSE on error
fann_save_train	Save the training structure to a file	bool fann_save_train ( resource $data , string $file_name )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_save	Saves the entire network to a configuration file	bool fann_save ( resource $ann , string $configuration_file )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_scale_input_train_data	Scales the inputs in the training data to the specified range	bool fann_scale_input_train_data ( resource $train_data , float $new_min , float $new_max )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_scale_input	Scale data in input vector before feed it to ann based on previously calculated parameters	bool fann_scale_input ( resource $ann , array $input_vector )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_scale_output_train_data	Scales the outputs in the training data to the specified range	bool fann_scale_output_train_data ( resource $train_data , float $new_min , float $new_max )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_scale_output	Scale data in output vector before feed it to ann based on previously calculated parameters	bool fann_scale_output ( resource $ann , array $output_vector )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_scale_train_data	Scales the inputs and outputs in the training data to the specified range	bool fann_scale_train_data ( resource $train_data , float $new_min , float $new_max )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_scale_train	Scale input and output data based on previously calculated parameters	bool fann_scale_train ( resource $ann , resource $train_data )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_activation_function_hidden	Sets the activation function for all of the hidden layers	bool fann_set_activation_function_hidden ( resource $ann , int $activation_function )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_activation_function_layer	Sets the activation function for all the neurons in the supplied layer.	bool fann_set_activation_function_layer ( resource $ann , int $activation_function , int $layer )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_activation_function_output	Sets the activation function for the output layer	bool fann_set_activation_function_output ( resource $ann , int $activation_function )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_activation_function	Sets the activation function for supplied neuron and layer	bool fann_set_activation_function ( resource $ann , int $activation_function , int $layer , int $neuron )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_activation_steepness_hidden	Sets the steepness of the activation steepness for all neurons in the all hidden layers	bool fann_set_activation_steepness_hidden ( resource $ann , float $activation_steepness )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_activation_steepness_layer	Sets the activation steepness for all of the neurons in the supplied layer number	bool fann_set_activation_steepness_layer ( resource $ann , float $activation_steepness , int $layer )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_activation_steepness_output	Sets the steepness of the activation steepness in the output layer	bool fann_set_activation_steepness_output ( resource $ann , float $activation_steepness )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_activation_steepness	Sets the activation steepness for supplied neuron and layer number	bool fann_set_activation_steepness ( resource $ann , float $activation_steepness , int $layer , int $neuron )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_bit_fail_limit	Set the bit fail limit used during training	bool fann_set_bit_fail_limit ( resource $ann , float $bit_fail_limit )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_callback	Sets the callback function for use during training	bool fann_set_callback ( resource $ann , collable $callback )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_cascade_activation_functions	Sets the array of cascade candidate activation functions	bool fann_set_cascade_activation_functions ( resource $ann , array $cascade_activation_functions )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_cascade_activation_steepnesses	Sets the array of cascade candidate activation steepnesses	bool fann_set_cascade_activation_steepnesses ( resource $ann , array $cascade_activation_steepnesses_count )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_cascade_candidate_change_fraction	Sets the cascade candidate change fraction	bool fann_set_cascade_candidate_change_fraction ( resource $ann , float $cascade_candidate_change_fraction )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_cascade_candidate_limit	Sets the candidate limit	bool fann_set_cascade_candidate_limit ( resource $ann , float $cascade_candidate_limit )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_cascade_candidate_stagnation_epochs	Sets the number of cascade candidate stagnation epochs	bool fann_set_cascade_candidate_stagnation_epochs ( resource $ann , int $cascade_candidate_stagnation_epochs )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_cascade_max_cand_epochs	Sets the max candidate epochs	bool fann_set_cascade_max_cand_epochs ( resource $ann , int $cascade_max_cand_epochs )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_cascade_max_out_epochs	Sets the maximum out epochs	bool fann_set_cascade_max_out_epochs ( resource $ann , int $cascade_max_out_epochs )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_cascade_min_cand_epochs	Sets the min candidate epochs	bool fann_set_cascade_min_cand_epochs ( resource $ann , int $cascade_min_cand_epochs )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_cascade_min_out_epochs	Sets the minimum out epochs	bool fann_set_cascade_min_out_epochs ( resource $ann , int $cascade_min_out_epochs )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_cascade_num_candidate_groups	Sets the number of candidate groups	bool fann_set_cascade_num_candidate_groups ( resource $ann , int $cascade_num_candidate_groups )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_cascade_output_change_fraction	Sets the cascade output change fraction	bool fann_set_cascade_output_change_fraction ( resource $ann , float $cascade_output_change_fraction )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_cascade_output_stagnation_epochs	Sets the number of cascade output stagnation epochs	bool fann_set_cascade_output_stagnation_epochs ( resource $ann , int $cascade_output_stagnation_epochs )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_cascade_weight_multiplier	Sets the weight multiplier	bool fann_set_cascade_weight_multiplier ( resource $ann , float $cascade_weight_multiplier )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_error_log	Sets where the errors are logged to	void fann_set_error_log ( resource $errdat , string $log_file )	値を返しません。
fann_set_input_scaling_params	Calculate input scaling parameters for future use based on training data	bool fann_set_input_scaling_params ( resource $ann , resource $train_data , float $new_input_min , float $new_input_max )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_learning_momentum	Sets the learning momentum	bool fann_set_learning_momentum ( resource $ann , float $learning_momentum )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_learning_rate	Sets the learning rate	bool fann_set_learning_rate ( resource $ann , float $learning_rate )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_output_scaling_params	Calculate output scaling parameters for future use based on training data	bool fann_set_output_scaling_params ( resource $ann , resource $train_data , float $new_output_min , float $new_output_max )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_quickprop_decay	Sets the quickprop decay factor	bool fann_set_quickprop_decay ( resource $ann , float $quickprop_decay )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_quickprop_mu	Sets the quickprop mu factor	bool fann_set_quickprop_mu ( resource $ann , float $quickprop_mu )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_rprop_decrease_factor	Sets the decrease factor used during RPROP training	bool fann_set_rprop_decrease_factor ( resource $ann , float $rprop_decrease_factor )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_rprop_delta_max	Sets the maximum step-size	bool fann_set_rprop_delta_max ( resource $ann , float $rprop_delta_max )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_rprop_delta_min	Sets the minimum step-size	bool fann_set_rprop_delta_min ( resource $ann , float $rprop_delta_min )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_rprop_delta_zero	Sets the initial step-size	bool fann_set_rprop_delta_zero ( resource $ann , float $rprop_delta_zero )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_rprop_increase_factor	Sets the increase factor used during RPROP training	bool fann_set_rprop_increase_factor ( resource $ann , float $rprop_increase_factor )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_sarprop_step_error_shift	Sets the sarprop step error shift	bool fann_set_sarprop_step_error_shift ( resource $ann , float $sarprop_step_error_shift )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_sarprop_step_error_threshold_factor	Sets the sarprop step error threshold factor	bool fann_set_sarprop_step_error_threshold_factor ( resource $ann , float $sarprop_step_error_threshold_factor )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_sarprop_temperature	Sets the sarprop temperature	bool fann_set_sarprop_temperature ( resource $ann , float $sarprop_temperature )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_sarprop_weight_decay_shift	Sets the sarprop weight decay shift	bool fann_set_sarprop_weight_decay_shift ( resource $ann , float $sarprop_weight_decay_shift )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_scaling_params	Calculate input and output scaling parameters for future use based on training data	bool fann_set_scaling_params ( resource $ann , resource $train_data , float $new_input_min , float $new_input_max , float $new_output_min , float $new_output_max )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_train_error_function	Sets the error function used during training	bool fann_set_train_error_function ( resource $ann , int $error_function )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_train_stop_function	Sets the stop function used during training	bool fann_set_train_stop_function ( resource $ann , int $stop_function )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_training_algorithm	Sets the training algorithm	bool fann_set_training_algorithm ( resource $ann , int $training_algorithm )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_weight_array	Set connections in the network	bool fann_set_weight_array ( resource $ann , array $connections )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_set_weight	Set a connection in the network	bool fann_set_weight ( resource $ann , int $from_neuron , int $to_neuron , float $weight )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_shuffle_train_data	Shuffles training data, randomizing the order	bool fann_shuffle_train_data ( resource $train_data )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_subset_train_data	Returns an copy of a subset of the train data	resource fann_subset_train_data ( resource $data , int $pos , int $length )	成功した場合にニューラルネットワークトレーニングリソース、エラー時に FALSE を返します。
fann_test_data	Test a set of training data and calculates the MSE for the training data	float fann_test_data ( resource $ann , resource $data )	The updated MSE, or FALSE on error.
fann_test	Test with a set of inputs, and a set of desired outputs	bool fann_test ( resource $ann , array $input , array $desired_output )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_train_epoch	Train one epoch with a set of training data	float fann_train_epoch ( resource $ann , resource $data )	The MSE, or FALSE on error.
fann_train_on_data	Trains on an entire dataset for a period of time	bool fann_train_on_data ( resource $ann , resource $data , int $max_epochs , int $epochs_between_reports , float $desired_error )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_train_on_file	Trains on an entire dataset, which is read from file, for a period of time	bool fann_train_on_file ( resource $ann , string $filename , int $max_epochs , int $epochs_between_reports , float $desired_error )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fann_train	Train one iteration with a set of inputs, and a set of desired outputs	bool fann_train ( resource $ann , array $input , array $desired_output )	成功した場合に TRUE、それ以外の場合に FALSE を返します。
fastcgi_finish_request	Flushes all response data to the client	boolean fastcgi_finish_request ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fbsql_affected_rows	直近の FrontBase 操作により変更されたレコードの数を得る	int fbsql_affected_rows ([ resource $link_identifier ] )	直近のクエリが失敗した場合、この関数は -1 を返します。
fbsql_autocommit	autocommit を有効または無効にする	bool fbsql_autocommit ( resource $link_identifier [, bool $OnOff ] )	現在の autocommit の状態を boolean 値で返します。
fbsql_blob_size	BLOB の大きさを取得する	int fbsql_blob_size ( string $blob_handle [, resource $link_identifier ] )	BLOB の大きさを整数値で返します。エラー時には FALSE を返します。
fbsql_change_user	アクティブな接続にログインしているユーザーを変更する	bool fbsql_change_user ( string $user , string $password [, string $database [, resource $link_identifier ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fbsql_clob_size	CLOB の大きさを取得する	int fbsql_clob_size ( string $clob_handle [, resource $link_identifier ] )	CLOB の大きさを整数値で返します。エラー時には FALSE を返します。
fbsql_close	FrontBase 接続を閉じる	bool fbsql_close ([ resource $link_identifier ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fbsql_commit	データベースへのトランザクションをコミットする	bool fbsql_commit ([ resource $link_identifier ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fbsql_connect	FrontBase サーバーへの接続をオープンする	resource fbsql_connect ([ string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password") ]]] )	成功時に正の FrontBase リンク ID、エラー時に FALSE を返します。
fbsql_create_blob	BLOB を作成する	string fbsql_create_blob ( string $blob_data [, resource $link_identifier ] )	新しく作成した BLOB のリソースハンドルを返します。 これを insert や update コマンドで使用すると、 データベースに BLOB を保存することができます。
fbsql_create_clob	CLOB を作成する	string fbsql_create_clob ( string $clob_data [, resource $link_identifier ] )	新しく作成した CLOB のリソースハンドルを返します。 これを insert や update コマンドで使用すると、 データベースに CLOB を保存することができます。
fbsql_create_db	FrontBase データベースを作成する	bool fbsql_create_db ( string $database_name [, resource $link_identifier [, string $database_options ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fbsql_data_seek	内部結果ポインタを移動する	bool fbsql_data_seek ( resource $result , int $row_number )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fbsql_database_password	FrontBase データベースのパスワードを設定または取得する	string fbsql_database_password ( resource $link_identifier [, string $database_password ] )	リンク ID により表されるデータベースのデータベースパスワードを返します。
fbsql_database	接続で使用するデータベース名を取得あるいは設定する	string fbsql_database ( resource $link_identifier [, string $database ] )	この接続で使用するデータベースの名前を返します。
fbsql_db_query	FrontBase クエリを送信する	resource fbsql_db_query ( string $database , string $query [, resource $link_identifier ] )	クエリ結果への正の FrontBase 結果 ID、またはエラー時には FALSE を返します。
fbsql_db_status	指定したデータベースの状態を取得する	int fbsql_db_status ( string $database_name [, resource $link_identifier ] )	現在の状態を表す整数値を返します。これは、以下の定数のいずれかです。 FALSE - host の exec ハンドラが無効です。このエラーは、 link_identifier がポート番号を用いてデータベースへ直接接続する場合に発生します。 FBExec はサーバーで利用可能ですが、接続が行われていません。 FBSQL_UNKNOWN - 状態は不明です。 FBSQL_STOPPED - FBSQL_STOPPED - データベースは実行されていません。 データベースを開始するには、 fbsql_start_db() を使用してください。 FBSQL_STARTING - データベースは起動中です。 FBSQL_RUNNING - データベースは実行中で、SQL 処理を実行可能です。 FBSQL_STOPPING - データベースは停止中です。 FBSQL_NOEXEC - FBExec がサーバーで実行されておらず、 データベースの状態を取得することはできません。
fbsql_drop_db	FrontBase データベースを破棄(削除)する	bool fbsql_drop_db ( string $database_name [, resource $link_identifier ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fbsql_errno	前の FrontBase 操作によるエラーメッセージの数値を返す	int fbsql_errno ([ resource $link_identifier ] )	直近の fbsql 関数のエラー番号、あるいはエラーが発生しなかった場合に 0 (ゼロ) を返します。
fbsql_error	前の FrontBase 操作によるエラーメッセージの文字列を返す	string fbsql_error ([ resource $link_identifier ] )	直近の fbsql 関数のエラー文字列を返します。エラーが発生していない場合は '' (空の文字列) を返します。
fbsql_fetch_array	連想配列、数値配列、またはその両方として結果レコードを取得する	array fbsql_fetch_array ( resource $result [, int $result_type ] )	取得した行に対応する配列を返します。行がもうない場合には FALSE を返します。
fbsql_fetch_assoc	連想配列として結果レコードを取得する	array fbsql_fetch_assoc ( resource $result )	取得した行に対応する連想配列を返します。行がもうない場合には FALSE を返します。
fbsql_fetch_field	結果からカラム情報を得て、オブジェクトとして返す	object fbsql_fetch_field ( resource $result [, int $field_offset ] )	フィールド情報を含むオブジェクト、あるいはエラー時に FALSE を返します。
fbsql_fetch_lengths	結果の各出力の長さを得る	array fbsql_fetch_lengths ( resource $result )	オフセット 0 から始まる配列を返します。各要素は、 fbsql_fetch_row() で取得した行の各フィールドの長さを表します。 エラー時には FALSE を返します。
fbsql_fetch_object	オブジェクトとして結果レコードを取得する	object fbsql_fetch_object ( resource $result )	取得した行に対応するプロパティをもつオブジェクトを返します。 行がもうない場合には FALSE を返します。
fbsql_fetch_row	数値配列として結果レコードを得る	array fbsql_fetch_row ( resource $result )	取得した行は配列として返されます。各カラムは、配列の 0 からはじまる オフセットに格納されます。行がもうない場合には FALSE を返します。
fbsql_field_flags	クエリ結果において指定したフィールドに関するフラグを得る	string fbsql_field_flags ( resource $result [, int $field_offset ] )	指定したフィールドの フィールドフラグを返します。フラグは、単語ごとに空白 1 文字で 区切られた形式で報告されます。そのため、 explode() を使用して返り値を分割することが可能です。
fbsql_field_len	指定したフィールドの長さを返す	int fbsql_field_len ( resource $result [, int $field_offset ] )	指定したフィールドの長さを返します。
fbsql_field_name	結果の指定したフィールドの名前を得る	string fbsql_field_name ( resource $result [, int $field_index ] )	名前を表す文字列、あるいはフィールドが存在しない場合に FALSE を返します。
fbsql_field_seek	指定したフィールドオフセットに結果ポインタを設定する	bool fbsql_field_seek ( resource $result [, int $field_offset ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fbsql_field_table	指定したフィールドがあるテーブルの名前を得る	string fbsql_field_table ( resource $result [, int $field_offset ] )	テーブル名を文字列で返します。
fbsql_field_type	結果の中で指定したフィールドの型を得る	string fbsql_field_type ( resource $result [, int $field_offset ] )	フィールドの型を文字列で返します。
fbsql_free_result	結果メモリを開放する	bool fbsql_free_result ( resource $result )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fbsql_get_autostart_info		array fbsql_get_autostart_info ([ resource $link_identifier ] )
fbsql_hostname	接続で使用されているホスト名を取得あるいは設定する	string fbsql_hostname ( resource $link_identifier [, string $host_name ] )	現在の接続で使用しているホスト名を返します。
fbsql_insert_id	直近の INSERT 処理により生成された ID を得る	int fbsql_insert_id ([ resource $link_identifier ] )	直近の INSERT クエリが生成した ID を返します。 直近のクエリが DEFAULT UNIQUE 値を生成していない場合は 0 を返します。
fbsql_list_dbs	FrontBase サーバーで利用可能なデータベースの一覧を得る	resource fbsql_list_dbs ([ resource $link_identifier ] )	結果ポインタあるいはエラー時に FALSE を返します。
fbsql_list_fields	FrontBase 結果フィールドの一覧を得る	resource fbsql_list_fields ( string $database_name , string $table_name [, resource $link_identifier ] )	結果ポインタを返します。これは、 fbsql_field_xxx で使用できます。 エラー時には FALSE を返します。
fbsql_list_tables	FrontBase データベースのテーブル一覧を得る	resource fbsql_list_tables ( string $database [, resource $link_identifier ] )	結果ポインタを返します。これを fbsql_tablename() 関数で使用すると、 実際のテーブル名が取得できます。エラー時には FALSE を返します。
fbsql_next_result	内部結果ポインタを次の結果に移動する	bool fbsql_next_result ( resource $result )	追加の結果セットが使用可能な場合に TRUE、それ以外の場合に FALSE を返します。
fbsql_num_fields	結果のフィールド数を得る	int fbsql_num_fields ( resource $result )	フィールドの数を整数値で返します。
fbsql_num_rows	結果のレコード数を得る	int fbsql_num_rows ( resource $result )	直近の SELECT 文が返す行の数を返します。
fbsql_password	接続に対して使用するユーザーパスワードを取得あるいは設定する	string fbsql_password ( resource $link_identifier [, string $password ] )	現在の接続パスワードを返します。
fbsql_pconnect	FrontBase サーバーへの持続的接続をオープンする	resource fbsql_pconnect ([ string $hostname = ini_get("fbsql.default_host") [, string $username = ini_get("fbsql.default_user") [, string $password = ini_get("fbsql.default_password") ]]] )	成功した場合には正の FrontBase 持続的リンク ID、 エラー時には FALSE を返します。
fbsql_query	FrontBase クエリを送信する	resource fbsql_query ( string $query [, resource $link_identifier [, int $batch_size ]] )	fbsql_query() は、クエリが成功したかどうかを 示すために TRUE (非ゼロ) あるいは FALSE を返します。 返り値が TRUE の場合、クエリは正しい形式であってサーバーで実行された ことを示します。変更された行数や返された行数については何も示しません。 クエリが成功しても 1 行も変更しなかったり 1 行も返さなかったりすることは 十分にありえることです。
fbsql_read_blob	データベースから BLOB を読み込む	string fbsql_read_blob ( string $blob_handle [, resource $link_identifier ] )	指定した BLOB データを含む文字列を返します。
fbsql_read_clob	データベースから CLOB を読み込む	string fbsql_read_clob ( string $clob_handle [, resource $link_identifier ] )	指定した CLOB データを含む文字列を返します。
fbsql_result	結果データを得る	mixed fbsql_result ( resource $result [, int $row [, mixed $field ]] )
fbsql_rollback	データベースへのトランザクションをロールバックする	bool fbsql_rollback ([ resource $link_identifier ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fbsql_rows_fetched	直近の文で影響をうけた行の数を取得する	int fbsql_rows_fetched ( resource $result )	行の数を整数値で返します。
fbsql_select_db	FrontBase データベースを選択する	bool fbsql_select_db ([ string $database_name [, resource $link_identifier ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fbsql_set_characterset	入出力文字セットを変更する	void fbsql_set_characterset ( resource $link_identifier , int $characterset [, int $in_out_both ] )	値を返しません。
fbsql_set_lob_mode	FrontBase 結果セットの LOB 取得モードを設定する	bool fbsql_set_lob_mode ( resource $result , int $lob_mode )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fbsql_set_password	指定したユーザーのパスワードを変更する	bool fbsql_set_password ( resource $link_identifier , string $user , string $password , string $old_password )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fbsql_set_transaction	トランザクションのロックと分離レベルを設定する	void fbsql_set_transaction ( resource $link_identifier , int $locking , int $isolation )	値を返しません。
fbsql_start_db	ローカルまたはリモートサーバーのデータベースを開始する	bool fbsql_start_db ( string $database_name [, resource $link_identifier [, string $database_options ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fbsql_stop_db	ローカルまたはリモートサーバーのデータベースを停止する	bool fbsql_stop_db ( string $database_name [, resource $link_identifier ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fbsql_table_name	フィールドのテーブル名を得る	string fbsql_table_name ( resource $result , int $index )	テーブル名を文字列で返します。
fbsql_tablename	fbsql_table_name() のエイリアス
fbsql_username	接続に使用するホストユーザーを取得あるいは設定する	string fbsql_username ( resource $link_identifier [, string $username ] )	この接続で使用する現在のユーザー名を文字列で返します。
fbsql_warnings	FrontBase 警告を有効または無効にする	bool fbsql_warnings ([ bool $OnOff ] )	警告をオンにした場合は TRUE、そうでない場合は FALSE を返します。
fclose	オープンされたファイルポインタをクローズする	bool fclose ( resource $handle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fdf_add_doc_javascript	FDF ドキュメントに javascript コードを追加する	bool fdf_add_doc_javascript ( resource $fdf_document , string $script_name , string $script_code )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fdf_add_template	テンプレートを FDF ドキュメントに追加する	bool fdf_add_template ( resource $fdf_document , int $newpage , string $filename , string $template , int $rename )
fdf_close	FDF ドキュメントを閉じる	void fdf_close ( resource $fdf_document )	値を返しません。
fdf_create	新規 FDF ドキュメントを作成する	resource fdf_create ( void )	FDF ドキュメントハンドル、あるいはエラー時に FALSE を返します。
fdf_enum_values	各ドキュメントの値に対してユーザー定義関数をコールする	bool fdf_enum_values ( resource $fdf_document , callable $function [, mixed $userdata ] )
fdf_errno	直近の fdf 操作に関するエラーコードを返す	int fdf_errno ( void )	エラーコードを表す整数値、あるいはエラーがない場合にゼロを返します。
fdf_error	直近の fdf エラーコードについての説明を返す	string fdf_error ([ int $error_code = -1 ] )	エラーメッセージを表す文字列、あるいは何も問題がない場合は no error を返します。
fdf_get_ap	フィールドの外観を取得する	bool fdf_get_ap ( resource $fdf_document , string $field , int $face , string $filename )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fdf_get_attachment	FDF に埋め込まれている、アップロードされたファイルを展開する	array fdf_get_attachment ( resource $fdf_document , string $fieldname , string $savepath )	返される配列は以下のようなフィールドを保持します。 path - ファイルが保存された場所 size - 保存されたファイルのバイト数 type - (もし FDF 指定されていた場合) FDF の mimetype
fdf_get_encoding	/Encoding キーの値を取得する	string fdf_get_encoding ( resource $fdf_document )	エンコーディングを文字列で返します。 デフォルトの PDFDocEncoding/Unicode スキームを使用している場合は空の文字列を返します。
fdf_get_file	/F キーの値を得る	string fdf_get_file ( resource $fdf_document )	キーの値を文字列を返します。
fdf_get_flags	フィールドのフラグを取得する	int fdf_get_flags ( resource $fdf_document , string $fieldname , int $whichflags )
fdf_get_opt	フィールドのオプション配列から値を取得する	mixed fdf_get_opt ( resource $fdf_document , string $fieldname [, int $element = -1 ] )
fdf_get_status	/STATUS キーの値を得る	string fdf_get_status ( resource $fdf_document )	キーの値を文字列で返します。
fdf_get_value	フィールドの値を得る	mixed fdf_get_value ( resource $fdf_document , string $fieldname [, int $which = -1 ] )	フィールドの値を返します。
fdf_get_version	FDF API あるいはファイルのバージョンを取得する	string fdf_get_version ([ resource $fdf_document ] )	バージョンを表す文字列を返します。 現在の FDF ツールキット 5.0 では API のバージョン番号は 5.0 で、 ドキュメントのバージョン番号は 1.2 1.3 あるいは 1.4 です。
fdf_header	FDF 固有の出力ヘッダをセットする	void fdf_header ( void )	値を返しません。
fdf_next_field_name	次のフィールド名を得る	string fdf_next_field_name ( resource $fdf_document [, string $fieldname ] )	フィールド名を文字列で返します。
fdf_open_string	文字列から FDF ドキュメントを読み込む	resource fdf_open_string ( string $fdf_data )	FDF ドキュメントハンドル、あるいはエラー時に FALSE を返します。
fdf_open	FDF ドキュメントをオープンする	resource fdf_open ( string $filename )	FDF ドキュメントのハンドル、あるいはエラー時に FALSE を返します。
fdf_remove_item	フォームのターゲットフレームを設定する	bool fdf_remove_item ( resource $fdf_document , string $fieldname , int $item )
fdf_save_string	FDF ドキュメントを文字列として返す	string fdf_save_string ( resource $fdf_document )	ドキュメントを表す文字列、あるいはエラー時に FALSE を返します。
fdf_save	FDF ドキュメントを保存する	bool fdf_save ( resource $fdf_document [, string $filename ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fdf_set_ap	フィールドの外観を設定する	bool fdf_set_ap ( resource $fdf_document , string $field_name , int $face , string $filename , int $page_number )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fdf_set_encoding	FDF 文字エンコーディングを設定する	bool fdf_set_encoding ( resource $fdf_document , string $encoding )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fdf_set_file	FDF データを表示する PDF ドキュメントを設定する	bool fdf_set_file ( resource $fdf_document , string $url [, string $target_frame ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fdf_set_flags	フィールドのフラグを設定する	bool fdf_set_flags ( resource $fdf_document , string $fieldname , int $whichFlags , int $newFlags )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fdf_set_javascript_action	フィールドの javascript アクションを設定する	bool fdf_set_javascript_action ( resource $fdf_document , string $fieldname , int $trigger , string $script )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fdf_set_on_import_javascript	Acrobat が FDF をオープンした際に実行される javascript のコードを追加する	bool fdf_set_on_import_javascript ( resource $fdf_document , string $script , bool $before_data_import )
fdf_set_opt	フィールドのオプションを設定する	bool fdf_set_opt ( resource $fdf_document , string $fieldname , int $element , string $str1 , string $str2 )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fdf_set_status	/STATUS キーの値を設定する	bool fdf_set_status ( resource $fdf_document , string $status )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fdf_set_submit_form_action	フィールドの投稿フォームアクションを設定する	bool fdf_set_submit_form_action ( resource $fdf_document , string $fieldname , int $trigger , string $script , int $flags )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fdf_set_target_frame	フォームの表示対象となるフレームを設定する	bool fdf_set_target_frame ( resource $fdf_document , string $frame_name )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fdf_set_value	フィールドの値を設定する	bool fdf_set_value ( resource $fdf_document , string $fieldname , mixed $value [, int $isName ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fdf_set_version	FDF ファイルのバージョン番号を設定する	bool fdf_set_version ( resource $fdf_document , string $version )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
feof	ファイルポインタがファイル終端に達しているかどうか調べる	bool feof ( resource $handle )	ファイルポインタが EOF に達しているかまたはエラー (ソケットタイムアウトを含みます) の場合に TRUE 、 その他の場合に FALSE を返します。
fflush	出力をファイルにフラッシュする	bool fflush ( resource $handle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
fgetc	ファイルポインタから1文字取り出す	string fgetc ( resource $handle )	handleが指すファイルポインタから 1 文字読み出し、 その文字からなる文字列を返します。EOF の場合に FALSE を返します。
fgetcsv	ファイルポインタから行を取得し、CSVフィールドを処理する	array fgetcsv ( resource $handle [, int $length = 0 [, string $delimiter = ',' [, string $enclosure = '"' [, string $escape = '\\' ]]]] )	読み込んだフィールドの内容を含む数値添字配列を返します。
fgets	ファイルポインタから 1 行取得する	string fgets ( resource $handle [, int $length ] )	handle で指定したファイルポインタから最大 length - 1 バイト読み出し、 その文字列を返します。ファイルポインタから読み込むデータがもうない場合は FALSE を返します。
fgetss	ファイルポインタから 1 行取り出し、HTML タグを取り除く	string fgetss ( resource $handle [, int $length [, string $allowable_tags ]] )	handle で指定したファイルポインタから最大 length - 1 バイト読み出し、 HTML や PHP コードを取り除いた文字列を返します。
file_exists	ファイルまたはディレクトリが存在するかどうか調べる	bool file_exists ( string $filename )	filename で指定したファイルまたはディレクトリが存在すれば TRUE を返し、そうでなければ FALSE を返します。
file_get_contents	ファイルの内容を全て文字列に読み込む	string file_get_contents ( string $filename [, bool $use_include_path = false [, resource $context [, int $offset = -1 [, int $maxlen ]]]] )	読み込んだデータを返します。失敗した場合に FALSE を返します。
file_put_contents	文字列をファイルに書き込む	int file_put_contents ( string $filename , mixed $data [, int $flags = 0 [, resource $context ]] )	この関数はファイルに書き込まれたバイト数を返します。 あるいは失敗した場合には FALSE を返します。
file	ファイル全体を読み込んで配列に格納する	array file ( string $filename [, int $flags = 0 [, resource $context ]] )	ファイルを配列に入れて返します。 配列の各要素はファイルの各行に対応します。改行記号はついたままとなります。 失敗すると file() は FALSE を返します。
fileatime	ファイルの最終アクセス時刻を取得する	int fileatime ( string $filename )	ファイルの最終アクセス時刻を返し、失敗した場合に FALSE を返します。 時間は Unix タイムスタンプとして返されます。
filectime	ファイルの inode 変更時刻を取得する	int filectime ( string $filename )	ファイルの最終更新時刻を返し、失敗した場合に FALSE を返します。 時間は Unix タイムスタンプとして返されます。
filegroup	ファイルのグループを取得する	int filegroup ( string $filename )	ファイルの所有者のグループ ID を返し、エラーの場合は FALSE を返します。 グループ ID は数値で返されます。グループ名に変換するには posix_getgrgid() を使用してください。 失敗すると FALSE を返します。
fileinode	ファイルの inode を取得する	int fileinode ( string $filename )	ファイルの inode 番号を返し、失敗した場合に FALSE を返します。
filemtime	ファイルの更新時刻を取得する	int filemtime ( string $filename )	ファイルの最終更新時刻を返し、失敗した場合に FALSE を返します 時間は Unix タイムスタンプとして返されます。 この関数の結果は date() 等で使用できます。
fileowner	ファイルの所有者を取得する	int fileowner ( string $filename )	ファイルの所有者のユーザー ID を返し、失敗した場合に FALSE を返します。 ユーザー ID は数値で返されます。ユーザー名に変換するには posix_getpwuid() を使用してください。
fileperms	ファイルのパーミッションを取得する	int fileperms ( string $filename )	ファイルのパーミッションを数値モードで返します。このモードの下位ビットは chmod() に渡すのと同じ形式です。 しかし、大半のプラットフォームでは、それだけではなく filename のファイル形式に関する情報も含まれます。 以下の例で示すのは、ファイルのパーミッションやファイル形式を POSIX システム (Linux や Mac OS X など) で調べる方法です。
filepro_fieldcount	filePro データベース中のフィールド数を返す	int filepro_fieldcount ( void )	オープンした filePro データベースのフィールド数、 あるいはエラーの場合に FALSE を返します。
filepro_fieldname	フィールド名を取得する	string filepro_fieldname ( int $field_number )	フィールド名を表す文字列、あるいはエラーの場合に FALSE を返します。
filepro_fieldtype	フィールド型を取得する	string filepro_fieldtype ( int $field_number )	編集フィールド型を表す文字列、あるいはエラーの場合に FALSE を返します。
filepro_fieldwidth	フィールド幅を取得する	int filepro_fieldwidth ( int $field_number )	フィールドの幅を表す整数値、あるいはエラーの場合に FALSE を返します。
filepro_retrieve	filePro データベースからデータを取得する	string filepro_retrieve ( int $row_number , int $field_number )	指定したデータ、あるいはエラーの場合に FALSE を返します。
filepro_rowcount	filePro データベースの行の数を返します	int filepro_rowcount ( void )	オープンされた filePro データベースにおける行の数を返します。 エラーの場合は FALSE を返します。
filepro	map ファイルの読み込みと照合を行う	bool filepro ( string $directory )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
filesize	ファイルのサイズを取得する	int filesize ( string $filename )	ファイルのサイズを返し、エラーの場合は FALSE を返します (また E_WARNING レベルのエラーを発生させます) 。
filetype	ファイルタイプを取得する	string filetype ( string $filename )	ファイルのタイプを返します。返される値は fifo、char、dir、 block、link、file、socket および unknown のいずれかです。
filter_has_var	指定した型の変数が存在するかどうかを調べる	bool filter_has_var ( int $type , string $variable_name )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
filter_id	フィルタの名前からフィルタ ID を返す	int filter_id ( string $filtername )	フィルタの ID を返します。フィルタが存在しない場合は FALSE を返します。
filter_input_array	外部から変数を受け取り、オプションでそれらをフィルタリングする	mixed filter_input_array ( int $type [, mixed $definition [, bool $add_empty = true ]] )	成功した場合は要求された変数の値を含む配列、 あるいは失敗した場合に FALSE を返します。 配列の値は、フィルタリングに失敗した場合には FALSE、 変数が設定されていない場合は NULL となります。 フラグ FILTER_NULL_ON_FAILURE が指定されている場合は、変数が設定されていないときに FALSE、 フィルタリングに失敗した場合に NULL となります。
filter_input	指定した名前の変数を外部から受け取り、オプションでそれをフィルタリングする	mixed filter_input ( int $type , string $variable_name [, int $filter = FILTER_DEFAULT [, mixed $options ]] )	成功した場合は要求された変数の値、フィルタリングに失敗した場合に FALSE、 あるいは変数 variable_name が設定されていない場合に NULL を返します。フラグ FILTER_NULL_ON_FAILURE が指定されている場合は、変数が設定されていなければ FALSE、 フィルタリングに失敗したら NULL を返します。
filter_list	サポートされるフィルタの一覧を返す	array filter_list ( void )	サポートされる全フィルタの名前の配列を返します。 フィルタが存在しない場合は空の配列を返します。 この配列のインデックスはフィルタの ID ではありません。 ID を取得するには filter_id() にフィルタ名を渡します。
filter_var_array	複数の変数を受け取り、オプションでそれらをフィルタリングする	mixed filter_var_array ( array $data [, mixed $definition [, bool $add_empty = true ]] )	成功した場合は要求された変数の値を含む配列、 あるいは失敗した場合に FALSE を返します。 配列の値は、フィルタリングに失敗した場合には FALSE、 変数が設定されていない場合は NULL となります。
filter_var	指定したフィルタでデータをフィルタリングする	mixed filter_var ( mixed $variable [, int $filter = FILTER_DEFAULT [, mixed $options ]] )	フィルタリングされたデータ、あるいは処理に失敗した場合に FALSE を返します。
finfo_buffer	文字列バッファの情報を返す	string finfo_buffer ( resource $finfo , string $string = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )	string のテキスト表現、あるいはエラーが発生した場合に FALSE を返します。
finfo_close	fileinfo リソースを閉じる	bool finfo_close ( resource $finfo )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
finfo_file	ファイルについての情報を返す	string finfo_file ( resource $finfo , string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] )	filename のテキスト表現、あるいはエラーが発生した場合に FALSE を返します。
finfo_open	新しい fileinfo リソースを作成する	resource finfo_open ([ int $options = FILEINFO_NONE [, string $magic_file = NULL ]] )	(手続き型の場合のみ) 成功した場合に magic データベースリソース、失敗した場合に FALSE を返します。
finfo_set_flags	libmagic のオプションを設定する	bool finfo_set_flags ( resource $finfo , int $options )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
floatval	変数の float 値を取得する	float floatval ( mixed $var )	指定した変数の float 値を返します。 空の配列の場合は 0、空でない配列の場合は 1 を返します。
flock	汎用のファイルロックを行う	bool flock ( resource $handle , int $operation [, int &$wouldblock ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
floor	端数の切り捨て	float floor ( float $value )	value をこえない最大の整数の値を返します。 floor() の返り値は float 型のままとなります。これは、 float の範囲が int よりも広いためです。
flush	出力バッファをフラッシュする	void flush ( void )	値を返しません。
fmod	引数で除算をした際の剰余を返す	float fmod ( float $x , float $y )	x/y の剰余を返します。
fnmatch	ファイル名がパターンにマッチするか調べる	bool fnmatch ( string $pattern , string $string [, int $flags = 0 ] )	マッチした場合に TRUE、それ以外の場合に FALSE を返します。
fopen	ファイルまたは URL をオープンする	resource fopen ( string $filename , string $mode [, bool $use_include_path = false [, resource $context ]] )	成功した場合にファイルポインタリソース、エラー時に FALSE を返します。
forward_static_call_array	静的メソッドをコールし、引数を配列で渡す	mixed forward_static_call_array ( callable $function , array $parameters )	関数の結果、あるいはエラー時に FALSE を返します。
forward_static_call	静的メソッドをコールする	mixed forward_static_call ( callable $function [, mixed $parameter [, mixed $... ]] )	関数の結果、あるいはエラー時に FALSE を返します。
fpassthru	ファイルポインタ上に残っているすべてのデータを出力する	int fpassthru ( resource $handle )	エラーが起こった場合、 fpassthru() は FALSE を返します。 それ以外の場合、 fpassthru() は handle から読み込んだ文字の数を返し、出力へ渡します。
fprintf	フォーマットされた文字列をストリームに書き込む	int fprintf ( resource $handle , string $format [, mixed $args [, mixed $... ]] )	書き込まれた文字列の長さを返します。
fputcsv	行を CSV 形式にフォーマットし、ファイルポインタに書き込む	int fputcsv ( resource $handle , array $fields [, string $delimiter = ',' [, string $enclosure = '"' ]] )	書き込んだ文字列の長さを返します。失敗した場合に FALSE を返します。
fputs	fwrite() のエイリアス
fread	バイナリセーフなファイルの読み込み	string fread ( resource $handle , int $length )	読み込んだ文字列を返します。失敗した場合に FALSE を返します。
FrenchToJD	フランス革命暦をユリウス積算日に変換する	int frenchtojd ( int $month , int $day , int $year )	フランス革命暦の日付をユリウス積算日になおした結果を整数値で返します。
fribidi_log2vis	論理表記を物理表記に変換する	string fribidi_log2vis ( string $str , string $direction , int $charset )	成功した場合に物理表記の文字列、失敗した場合に FALSE を返します。
fscanf	フォーマットに基づきファイルからの入力を処理する	mixed fscanf ( resource $handle , string $format [, mixed &$... ] )	この関数のパラメータが二つだけの場合、処理された値は配列として返されます。 他方、オプションのパラメータが指定された場合、 この関数は、代入された値の数を返します。 オプション引数は参照渡しとする必要があります。
fseek	ファイルポインタを移動する	int fseek ( resource $handle , int $offset [, int $whence = SEEK_SET ] )	成功すると 0 を返し、そうでなければ -1 を返します。
fsockopen	インターネット接続もしくは Unix ドメインソケット接続をオープンする	resource fsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") ]]]] )	fsockopen() は、ファイルポインタを返します。 このファイルポインタは、 ( fgets() , fgetss() , fputs() , fclose() , feof() のような) 他のファイル関数で使用可能です。 失敗した場合は FALSE を返します。
fstat	オープンしたファイルポインタからファイルに関する情報を取得する	array fstat ( resource $handle )	ファイルの統計情報の配列を返します。配列のフォーマットについては stat() のマニュアルをご覧ください。
ftell	ファイルの読み書き用ポインタの現在位置を返す	int ftell ( resource $handle )	handle が示すファイルポインタの位置、 すなわちファイル・ストリーム上のオフセットを整数値で返します。
ftok	パス名とプロジェクト ID を、System V IPC キーに変換する	int ftok ( string $pathname , string $proj )	成功した場合には作成されたキーの値を、それ以外の場合には -1 を返します。
ftp_alloc	アップロードされるファイルのためのスペースを確保する	bool ftp_alloc ( resource $ftp_stream , int $filesize [, string &$result ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ftp_cdup	親ディレクトリに移動する	bool ftp_cdup ( resource $ftp_stream )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ftp_chdir	FTP サーバー上でディレクトリを移動する	bool ftp_chdir ( resource $ftp_stream , string $directory )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 ディレクトリの変更に失敗した場合は、PHP は警告を出します。
ftp_chmod	FTP 経由でファイルのパーミッションを設定する	int ftp_chmod ( resource $ftp_stream , int $mode , string $filename )	成功した場合に新しいパーミッションを、エラー時に FALSE を返します。
ftp_close	FTP 接続を閉じる	bool ftp_close ( resource $ftp_stream )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ftp_connect	FTP 接続をオープンする	resource ftp_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] )	成功した場合に FTP ストリームを、エラー時に FALSE を返します。
ftp_delete	FTP サーバー上のファイルを削除する	bool ftp_delete ( resource $ftp_stream , string $path )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ftp_exec	FTP サーバー上でのコマンドの実行をリクエストする	bool ftp_exec ( resource $ftp_stream , string $command )	コマンドが成功した（サーバーの応答コードが 200） 場合に TRUE を、それ以外の場合に FALSE を返します。
ftp_fget	FTP サーバーからファイルをダウンロードし、オープン中のファイルに保存する	bool ftp_fget ( resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ftp_fput	オープン中のファイルを FTP サーバーにアップロードする	bool ftp_fput ( resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ftp_get_option	カレント FTP ストリームでの種々の実行時動作を取得する	mixed ftp_get_option ( resource $ftp_stream , int $option )	成功した場合はその値を、指定した option がサポートされていない場合は FALSE を返します。後者の場合は、 同時に警告メッセージも発生します。
ftp_get	FTP サーバーからファイルをダウンロードする	bool ftp_get ( resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ftp_login	FTP 接続にログインする	bool ftp_login ( resource $ftp_stream , string $username , string $password )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 失敗した場合は、PHP が警告を発生します。
ftp_mdtm	指定したファイルが最後に更新された時刻を返す	int ftp_mdtm ( resource $ftp_stream , string $remote_file )	成功した場合にUNIXのタイムスタンプ、エラー時に -1 を返します。
ftp_mkdir	ディレクトリを作成する	string ftp_mkdir ( resource $ftp_stream , string $directory )	成功した時には新規に作成したディレクトリ名、エラー時に FALSE を返します。
ftp_nb_continue	ファイルの取得/送信を継続する（非ブロッキング）	int ftp_nb_continue ( resource $ftp_stream )	FTP_FAILED、FTP_FINISHED あるいは FTP_MOREDATA を返します。
ftp_nb_fget	FTP サーバーからファイルをダウンロードし、オープン中のファイルに保存する（非ブロッキング）	int ftp_nb_fget ( resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos = 0 ] )	FTP_FAILED、FTP_FINISHED あるいは FTP_MOREDATA を返します。
ftp_nb_fput	オープン中のファイルを FTP サーバーに保存する（非ブロッキング）	int ftp_nb_fput ( resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos = 0 ] )	FTP_FAILED、FTP_FINISHED あるいは FTP_MOREDATA を返します。
ftp_nb_get	FTP サーバーからファイルを取得し、ローカルファイルに書き込む（非ブロッキング）	int ftp_nb_get ( resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos = 0 ] )	FTP_FAILED、FTP_FINISHED あるいは FTP_MOREDATA を返します。
ftp_nb_put	FTP サーバーにファイルを保存する（非ブロッキング）	int ftp_nb_put ( resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos = 0 ] )	FTP_FAILED、FTP_FINISHED あるいは FTP_MOREDATA を返します。
ftp_nlist	指定したディレクトリのファイルの一覧を返す	array ftp_nlist ( resource $ftp_stream , string $directory )	成功した場合は指定したディレクトリ内のファイル名の配列を、 エラー時には FALSE を返します。
ftp_pasv	パッシブモードをオンまたはオフにする	bool ftp_pasv ( resource $ftp_stream , bool $pasv )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ftp_put	FTP サーバーにファイルをアップロードする	bool ftp_put ( resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ftp_pwd	カレントのディレクトリ名を返す	string ftp_pwd ( resource $ftp_stream )	カレントのディレクトリ名、またはエラー時には FALSE を返します。
ftp_quit	ftp_close() のエイリアス
ftp_raw	FTP サーバーに任意のコマンドを送信する	array ftp_raw ( resource $ftp_stream , string $command )	サーバーからの応答を文字列の配列で返します。 結果の文字列に対して、何の処理も行いません。また、 ftp_raw() はそのコマンドが成功したのかどうかを 判断できません。
ftp_rawlist	指定したディレクトリの詳細なファイル一覧を返す	array ftp_rawlist ( resource $ftp_stream , string $directory [, bool $recursive = false ] )	各要素が 1 行分のテキストに対応する配列を返します。
ftp_rename	FTP サーバー上のファイルまたはディレクトリの名前を変更する	bool ftp_rename ( resource $ftp_stream , string $oldname , string $newname )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ftp_rmdir	ディレクトリを削除する	bool ftp_rmdir ( resource $ftp_stream , string $directory )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ftp_set_option	さまざまな FTP 実行時オプションを設定する	bool ftp_set_option ( resource $ftp_stream , int $option , mixed $value )	オプションが設定できた場合に TRUE 、そうでない場合に FALSE を返します。 option がサポートされていなかった場合や option が想定していない値を value に渡した場合は警告メッセージが発生します。
ftp_site	SITEコマンドをサーバーに送信する	bool ftp_site ( resource $ftp_stream , string $command )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ftp_size	指定したファイルのサイズを返す	int ftp_size ( resource $ftp_stream , string $remote_file )	成功した場合はファイルのサイズを、エラー時には -1 を返します。
ftp_ssl_connect	セキュアな SSL-FTP 接続をオープンする	resource ftp_ssl_connect ( string $host [, int $port = 21 [, int $timeout = 90 ]] )	成功した場合に SSL-FTP ストリーム、エラー時に FALSE を返します。
ftp_systype	リモート FTP サーバーのシステム型 ID を返す	string ftp_systype ( resource $ftp_stream )	リモートシステム型を返します。エラー時には FALSE を返します。
ftruncate	ファイルを指定した長さに丸める	bool ftruncate ( resource $handle , int $size )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
func_get_arg	引数のリストから要素をひとつ返す	mixed func_get_arg ( int $arg_num )	指定した引数、あるいはエラー時に FALSE を返します。
func_get_args	関数の引数リストを配列として返す	array func_get_args ( void )	配列を返します。この配列の各要素は、 現在のユーザー定義関数の引数リストにおける対応するメンバのコピーとなります。
GearmanWorker::setId	Give the worker an identifier so it can be tracked when asking gearmand for the list of available workers.	public bool GearmanWorker::setId ( string $id )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
func_num_args	関数に渡された引数の数を返す	int func_num_args ( void )	現在のユーザー定義関数に渡された引数の数を返します。
function_exists	指定した関数が定義されている場合に TRUE を返す	bool function_exists ( string $function_name )	function_name が存在し、関数である場合に TRUE、 それ以外の場合に FALSE を返します。
fwrite	バイナリセーフなファイル書き込み処理	int fwrite ( resource $handle , string $string [, int $length ] )
gc_collect_cycles	すべての既存ガベージサイクルを強制的に収集する	int gc_collect_cycles ( void )	収集したサイクルの数を返します。
gc_disable	循環参照コレクタを無効にする	void gc_disable ( void )	値を返しません。
gc_enable	循環参照コレクタを有効にする	void gc_enable ( void )	値を返しません。
gc_enabled	循環参照コレクタの状態を返す	bool gc_enabled ( void )	ガベージコレクタが有効な場合に TRUE、そうでない場合に FALSE を返します。
gd_info	現在インストールされているGDライブラリに関する情報を取得する	array gd_info ( void )	連想配列を返します。
geoip_continent_code_by_name	二文字の大陸コードを取得する	string geoip_continent_code_by_name ( string $hostname )	成功した場合には二文字の大陸コード、 アドレスがデータベースで見つからない場合には FALSE を返します。
geoip_country_code_by_name	二文字の国コードを取得する	string geoip_country_code_by_name ( string $hostname )	成功した場合には二文字の ISO 国コード、 アドレスがデータベースで見つからない場合には FALSE を返します。
geoip_country_code3_by_name	三文字の国コードを取得する	string geoip_country_code3_by_name ( string $hostname )	成功した場合には三文字の国コード、 アドレスがデータベースで見つからない場合には FALSE を返します。
geoip_country_name_by_name	完全な国名を取得する	string geoip_country_name_by_name ( string $hostname )	成功した場合には国名、 アドレスがデータベースで見つからない場合には FALSE を返します。
geoip_database_info	GeoIP データベースの情報を取得する	string geoip_database_info ([ int $database = GEOIP_COUNTRY_EDITION ] )	対応するデータベースのバージョン、あるいはエラー時に NULL を返します。
geoip_db_avail	GeoIP データベースが使用可能かどうかを調べる	bool geoip_db_avail ( int $database )	データベースが存在する場合に TRUE、存在しない場合に FALSE、 エラー時に NULL を返します。
geoip_db_filename	対応する GeoIP データベースのファイル名を返す	string geoip_db_filename ( int $database )	対応するデータベースのファイル名、あるいはエラー時に NULL を返します。
geoip_db_get_all_info	すべての GeoIP データベース形式についての詳細情報を返す	array geoip_db_get_all_info ( void )	連想配列を返します。
geoip_id_by_name	インターネット接続方式を取得する	int geoip_id_by_name ( string $hostname )	接続方式を返します。
geoip_isp_by_name	インターネットサービスプロバイダ (ISP) 名を取得する	string geoip_isp_by_name ( string $hostname )	成功した場合には ISP 名、 アドレスがデータベースで見つからない場合には FALSE を返します。
geoip_org_by_name	組織名を取得する	string geoip_org_by_name ( string $hostname )	成功した場合には組織名、 アドレスがデータベースで見つからない場合には FALSE を返します。
geoip_record_by_name	GeoIP データベースで見つかった詳細な都市情報を返す	array geoip_record_by_name ( string $hostname )	成功した場合には連想配列、 アドレスがデータベースで見つからない場合には FALSE を返します。
geoip_region_by_name	国コードおよび地域を取得する	array geoip_region_by_name ( string $hostname )	成功した場合には連想配列、 アドレスがデータベースで見つからない場合には FALSE を返します。
geoip_region_name_by_code	国コードと地域コードから地域名を返す	string geoip_region_name_by_code ( string $country_code , string $region_code )	成功した場合は地域名、国コードと地域コードの組に対応する地域が見つからなかった場合は FALSE を返します。
geoip_time_zone_by_country_and_region	国コードと地域コードからタイムゾーンを返す	string geoip_time_zone_by_country_and_region ( string $country_code [, string $region_code ] )	成功した場合はタイムゾーン、国コードと地域コードの組に対応するタイムゾーンが見つからなかった場合は FALSE を返します。
get_browser	ユーザーのブラウザの機能を取得する	mixed get_browser ([ string $user_agent [, bool $return_array = false ]] )	情報は、オブジェクトあるいは配列形式で返されます。 たとえばブラウザのメジャーバージョン番号、マイナーバージョン番号や ID 文字列といったさまざまなデータが含まれています。また、 フレームや JavaScript、クッキーといった機能についての TRUE/FALSE 値も含んでいます。
get_called_class	"静的遅延束縛" のクラス名	string get_called_class ( void )	クラス名を返します。クラスの外部からコールされた場合は FALSE を返します。
get_cfg_var	PHP 設定オプションの値を取得する	string get_cfg_var ( string $option )	option で指定された PHP 設定オプションの現在の値を返し、 エラーの場合は FALSE を返します。
get_class_methods	クラスメソッドの名前を取得する	array get_class_methods ( mixed $class_name )	この関数は、指定したクラス class_name についてメソッドの名前を配列として返します。 エラー時には NULL を返します。
get_class_vars	クラスのデフォルトプロパティを取得する	array get_class_vars ( string $class_name )	宣言されているプロパティのうち、現在のスコープから見えるものとそのデフォルト値を連想配列で返します。 返される配列要素は、変数名 => 値 の形式となります。 エラーが発生した場合は FALSE を返します。
get_class	オブジェクトのクラス名を返す	string get_class ([ object $object = NULL ] )	オブジェクト object がインスタンス であるクラスの名前を返します。object がオブジェクトでない場合にはFALSEが返されます。
get_current_user	現在の PHP スクリプトの所有者の名前を取得する	string get_current_user ( void )	ユーザー名を表す文字列。
get_declared_classes	定義済のクラスの名前を配列として返す	array get_declared_classes ( void )	この関数は、現在のスクリプトで宣言されたクラスの名前の配列を返します。
get_declared_interfaces	宣言されている全てのインターフェイスの配列を返す	array get_declared_interfaces ( void )	現在のスクリプトで宣言されているインターフェイス名の配列を返します。
get_declared_traits	宣言されているすべてのトレイトの配列を返す	array get_declared_traits ( void )	宣言されているすべてのトレイトの名前を値に持つ配列を返します。 失敗した場合は NULL を返します。
get_defined_constants	すべての定数の名前とその値を連想配列として返す	array get_defined_constants ([ bool $categorize = false ] )	定数名 => 定数値 の配列の配列を返します。 オプションで、その定数を定義している拡張モジュール名ごとにグループ化することもできます。
get_defined_functions	定義済みの全ての関数を配列で返す	array get_defined_functions ( void )	この関数は、組込 (内部) 関数およびユーザー定義関数を共に含む定義済み の全ての関数のリストを有する多次元配列を返します。内部関数は、 $arr["internal"]、ユーザー定義関数は $arr["user"] によりアクセス可能となります (以下の例を参照ください)。
get_defined_vars	全ての定義済の変数を配列で返す	array get_defined_vars ( void )	すべての変数を含む多次元の配列を返します。
get_extension_funcs	あるモジュールの関数名を配列として返す	array get_extension_funcs ( string $module_name )	すべての関数を含む配列を返します。 module_name が拡張モジュールでない場合は FALSE を返します。
get_headers	HTTP リクエストに対するレスポンス内で サーバーによって送出された全てのヘッダを取得する	array get_headers ( string $url [, int $format = 0 ] )	数値添字配列あるいは連想配列でヘッダを返します。 失敗した場合は FALSE を返します。
get_html_translation_table	htmlspecialchars() および htmlentities() で使用される変換テーブルを返す	array get_html_translation_table ([ int $table = HTML_SPECIALCHARS [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' ]]] )	変換テーブルを配列で返します。元の文字がキー、そしてエンティティが値となります。
get_include_path	現在の include_path 設定オプションを取得する	string get_include_path ( void )	パスを表す文字列を返します。
get_included_files	include または require で読み込まれたファイルの名前を配列として返す	array get_included_files ( void )	すべてのファイル名を含む配列を返します。
get_loaded_extensions	コンパイル/ロードされている全てのモジュールの名前を配列として返す	array get_loaded_extensions ([ bool $zend_extensions = false ] )	モジュール名の配列を返します。
get_magic_quotes_gpc	magic_quotes_gpc の現在の設定を得る	bool get_magic_quotes_gpc ( void )	magic_quotes_gpc がオフの場合に 0、そうでない場合に 1 を返します。 PHP 5.4.0 以降は、常に FALSE を返します。
get_magic_quotes_runtime	magic_quotes_runtime の現在アクティブな設定値を取得する	bool get_magic_quotes_runtime ( void )	magic_quotes_runtime がオフの場合に 0、そうでない場合に 1 を返します。 PHP 5.4.0 以降は、常に FALSE を返します。
get_meta_tags	ファイル上のすべてのメタタグ情報を配列に展開する	array get_meta_tags ( string $filename [, bool $use_include_path = false ] )	パースされたメタタグを含む配列を返します。
get_object_vars	指定したオブジェクトのプロパティを取得する	array get_object_vars ( object $object )	指定したオブジェクト object について、 そのスコープ内でアクセス可能な非 static プロパティを連想配列として返します。 プロパティに値が設定されていない場合は、NULL 値が返されます。
get_parent_class	オブジェクトの親クラスの名前を取得する	string get_parent_class ([ mixed $object ] )	object がインスタンスあるいは名前であるクラスの親クラス名を返します。
get_required_files	get_included_files() のエイリアス
get_resource_type	リソース型を返す	string get_resource_type ( resource $handle )	指定された handle がリソースであった場合、 この関数はその型を表す文字列を返します。この関数で型が判別できなかった 場合は、返り値は文字列 Unknown となります。
getallheaders	全てのHTTPリクエストヘッダを取得する	array getallheaders ( void )	全てのHTTPリクエストヘッダの連想配列、もしくは失敗時に FALSE を返します。
getcwd	カレントのワーキングディレクトリを取得する	string getcwd ( void )	成功時はカレントのワーキングディレクトリを返します。 失敗時は FALSE を返します。
getdate	日付/時刻情報を取得する	array getdate ([ int $timestamp = time() ] )	timestamp に関連する情報を連想配列で返します。 返される連想配列の内容は、次のようになります。
getenv	環境変数の値を取得する	string getenv ( string $varname )	varname が示す環境変数の値を返し、 環境変数 varname が存在しない場合はFALSEを返します。
gethostbyaddr	指定した IP アドレスに対応するインターネットホスト名を取得する	string gethostbyaddr ( string $ip_address )	成功した場合はホスト名を返します。 失敗した場合は、そのままの形の ip_address を文字列で返します。 入力が壊れている場合は FALSE を返します。
gethostbyname	インターネットホスト名に対応するIPv4アドレスを取得する	string gethostbyname ( string $hostname )	IPv4 アドレスを返します。失敗した場合は、そのままの形の hostname を文字列で返します。
gethostbynamel	指定したインターネットホスト名に対応するIPv4アドレスのリストを取得する	array gethostbynamel ( string $hostname )	IPv4 アドレスの配列を返します。 もし hostname が解決できなかった場合は FALSE を返します。
gethostname	ホスト名を取得する	string gethostname ( void )	成功時にはホスト名を示す文字列。失敗時には FALSE を返します
getimagesize	画像の大きさを取得する	array getimagesize ( string $filename [, array &$imageinfo ] )	7 つの要素からなる配列を返します。
getimagesizefromstring	画像の大きさを文字列から取得する	array getimagesizefromstring ( string $imagedata [, array &$imageinfo ] )	getimagesize() を参照ください。
getlastmod	最終更新時刻を取得する	int getlastmod ( void )	現在のページの最終更新時刻を返します。 この値は Unix のタイムスタンプで、そのまま date () に渡す事ができます。エラーの場合は FALSE を返します。
getmxrr	指定したインターネットホスト名に対応する MX レコードを取得する	bool getmxrr ( string $hostname , array &$mxhosts [, array &$weight ] )	何かレコードが見つかった場合に TRUE、 何も見つからないかエラーが発生した場合に FALSE を返します。
getmygid	PHP スクリプトの所有者の GID を得る	int getmygid ( void )	現在のスクリプトのグループ ID を返します。またはエラー時に FALSE を返します。
getmyinode	現在のスクリプトの inode を取得する	int getmyinode ( void )	現在のスクリプトの inode を表す整数値、あるいはエラーの場合は FALSE を返します。
getmypid	PHP のプロセス ID を取得する	int getmypid ( void )	現在の PHP のプロセス ID を返し、エラーの場合は FALSE を返します。
getmyuid	PHP スクリプト所有者のユーザー ID を取得する	int getmyuid ( void )	現在のスクリプトのユーザー ID を返し、エラーの場合は FALSE を返します。
getopt	コマンドライン引数のリストからオプションを取得する	array getopt ( string $options [, array $longopts ] )	この関数はオプション/引数のペアを連想配列で返します。 失敗した場合は FALSE を返します。
getprotobyname	プロトコル名のプロトコル番号を得る	int getprotobyname ( string $name )	プロトコル番号を返します。 失敗した場合に FALSE を返します。
getprotobynumber	プロトコル番号が指すプロトコル名を取得する	string getprotobynumber ( int $number )	プロトコル名を文字列で返します。失敗した場合に FALSE を返します。
getrandmax	乱数の最大値を取得する	int getrandmax ( void )	rand() が返す乱数の最大値を返します。
getrusage	現在のリソース使用状況を取得する	array getrusage ([ int $who = 0 ] )	システムコールから返されたデータを含む連想配列を返します。 すべてのエントリは、記述されたフィールド名を用いてアクセス可能です。
getservbyname	インターネットサービスおよびプロトコルが関連するポート番号を取得する	int getservbyname ( string $service , string $protocol )	ポート番号を返します。 service あるいは protocol が見つからない場合は FALSE を返します。
getservbyport	ポートおよびプロトコルに対応するインターネットサービスを得る	string getservbyport ( int $port , string $protocol )	インターネットサービス名を文字列で返します。
gettext	現在のドメインのメッセージを参照する	string gettext ( string $message )	翻訳テーブルに翻訳文字列が見つかった場合にその文字列、 あるいは見つからなかった場合に元の文字列を返します。
gettimeofday	現在の時間を得る	mixed gettimeofday ([ bool $return_float = false ] )	デフォルトでは配列を返します。return_float が設定されている場合は float を返します。
gettype	変数の型を取得する	string gettype ( mixed $var )	返された文字列は、以下のいずれかの値を持ちます。 "boolean " "integer " "double " (歴史的な理由により、float の場合には "double"が返されます。"float" とはなりません) "string " "array " "object " "resource " "NULL " "unknown type"
glob	パターンにマッチするパス名を探す	array glob ( string $pattern [, int $flags = 0 ] )	マッチするファイル／ディレクトリを含む配列を返します。 マッチするファイルがなかった場合には空の配列、 そして失敗した場合には FALSE を返します。
gmdate	GMT/UTC の日付/時刻を書式化する	string gmdate ( string $format [, int $timestamp = time() ] )	日付を表す文字列を返します。 timestamp に数字以外が使用された場合は FALSE が返され、E_WARNING レベルのエラーが発生します。
gmmktime	GMT 日付から Unix タイムスタンプを取得する	int gmmktime ([ int $hour = gmdate("H") [, int $minute = gmdate("i") [, int $second = gmdate("s") [, int $month = gmdate("n") [, int $day = gmdate("j") [, int $year = gmdate("Y") [, int $is_dst = -1 ]]]]]]] )	Unix タイムスタンプを integer で返します。
gmp_abs	絶対値	resource gmp_abs ( resource $a )	a の絶対値を GMP 数で返します。
gmp_add	数値を加算する	resource gmp_add ( resource $a , resource $b )	加算の結果を GMP 数で返します。
gmp_and	ビット AND を計算する	resource gmp_and ( resource $a , resource $b )	ビット AND 演算の結果を GMP 数で返します。
gmp_clrbit	ビットをクリアする	void gmp_clrbit ( resource $a , int $index )	GMP 数リソースを返します。
gmp_cmp	数を比較する	int gmp_cmp ( resource $a , resource $b )	a > b の場合に正の値、a = b の場合にゼロ、a < b の場合に負の値を返します。
gmp_com	1 の補数を計算する	resource gmp_com ( resource $a )	a についての 1 の補数を GMP 数で返します。
gmp_div_q	数値を除算する	resource gmp_div_q ( resource $a , resource $b [, int $round = GMP_ROUND_ZERO ] )	GMP 数リソースを返します。
gmp_div_qr	除算を行い、商と余りを得る	array gmp_div_qr ( resource $n , resource $d [, int $round = GMP_ROUND_ZERO ] )	配列を返します。配列の最初の要素は [n/d] (割算の結果の整数値)、2 番目の要素は (n - [n/d] * d) (割算の余り) です。
gmp_div_r	除算の余りを計算する	resource gmp_div_r ( resource $n , resource $d [, int $round = GMP_ROUND_ZERO ] )	余りを GMP 数で返します。
gmp_div	gmp_div_q() のエイリアス
gmp_divexact	正確な除算	resource gmp_divexact ( resource $n , resource $d )	GMP 数リソースを返します。
gmp_fact	階乗	resource gmp_fact ( mixed $a )	GMP 数リソースを返します。
gmp_gcd	最大公約数を計算する	resource gmp_gcd ( resource $a , resource $b )	a と b の両方を割り切ることができる正の数を GMP 数で返します。
gmp_gcdext	最大公約数と乗数を計算する	array gmp_gcdext ( resource $a , resource $b )	GMP 数の配列を返します。
gmp_hamdist	ハミング距離	int gmp_hamdist ( resource $a , resource $b )	GMP 数リソースを返します。
gmp_init	GMP 数を作成する	resource gmp_init ( mixed $number [, int $base = 0 ] )	GMP 数リソースを返します。
gmp_intval	GMP 数を整数に変換する	int gmp_intval ( resource $gmpnumber )	gmpnumber を整数に変換した結果を返します。
gmp_invert	法による逆	resource gmp_invert ( resource $a , resource $b )	成功した場合に GMP 数、逆が存在しない場合に FALSE を返します。
gmp_jacobi	ヤコビ記号	int gmp_jacobi ( resource $a , resource $p )	GMP 数リソースを返します。
gmp_legendre	ルジェンドル記号	int gmp_legendre ( resource $a , resource $p )	GMP 数リソースを返します。
gmp_mod	モジュロ演算	resource gmp_mod ( resource $n , resource $d )	GMP 数リソースを返します。
gmp_mul	数値を乗算する	resource gmp_mul ( resource $a , resource $b )	GMP 数リソースを返します。
gmp_neg	符号を反転する	resource gmp_neg ( resource $a )	-a を GMP 数で返します。
gmp_nextprime	次の素数を見つける	resource gmp_nextprime ( int $a )	a より大きい次の素数を GMP 数として返します。
gmp_or	ビット OR を計算する	resource gmp_or ( resource $a , resource $b )	GMP 数リソースを返します。
gmp_perfect_square	平方数かどうかを調べる	bool gmp_perfect_square ( resource $a )	a が平方数の場合に TRUE、その他の場合に FALSE を返します。
gmp_popcount	セットされているビットの数	int gmp_popcount ( resource $a )	a にセットされているビットの数を返します。
gmp_pow	べき乗を計算する	resource gmp_pow ( resource $base , int $exp )	べき乗の結果を GMP 数で返します。 0^0 は 1 となります。
gmp_powm	べき乗とモジュロを計算する	resource gmp_powm ( resource $base , resource $exp , resource $mod )	結果を GMP 数で返します。
gmp_prob_prime	数が"おそらく素数"であるかどうかを調べる	int gmp_prob_prime ( resource $a [, int $reps = 10 ] )	この関数が 0 を返す場合、a は確実に素数ではありません。 1 を返す場合、a は「おそらく」 素数です。2 を返す場合、a は確実に素数です。
gmp_random	乱数を生成する	resource gmp_random ([ int $limiter = 20 ] )	ランダムな GMP 数を返します。
gmp_scan0	0 を探す	int gmp_scan0 ( resource $a , int $start )	ビットが見つかった場所のインデックスを整数値で返します。 インデックスは 0 から始まります。
gmp_scan1	1 を探す	int gmp_scan1 ( resource $a , int $start )	ビットが見つかった場所のインデックスを整数値で返します。 セットされているビットが存在しない場合には -1 を返します。
gmp_setbit	ビットを設定する	void gmp_setbit ( resource &$a , int $index [, bool $bit_on = true ] )	GMP 数リソースを返します。
gmp_sign	数の符号	int gmp_sign ( resource $a )	a が正の場合に 1、 a が負の場合に -1、そして a がゼロの場合に 0 を返します。
gmp_sqrt	平方根を計算する	resource gmp_sqrt ( resource $a )	平方根の整数部分を GMP 数で返します。
gmp_sqrtrem	余りつきの平方根	array gmp_sqrtrem ( resource $a )	最初の要素が a の整数平方根 ( gmp_sqrt() も参照ください)、2 番目の要素が余り (すなわち、a と最初の要素の 2 乗の差) であるような配列を返します。
gmp_strval	GMP 数を文字列に変換する	string gmp_strval ( resource $gmpnumber [, int $base = 10 ] )	数を文字列で表したものを返します。
gmp_sub	数値の減算	resource gmp_sub ( resource $a , resource $b )	GMP 数リソースを返します。
gmp_testbit	ビットが設定されているかどうかを調べる	bool gmp_testbit ( resource $a , int $index )	リソース $a にビットが設定されている場合に TRUE、 それ以外の場合に FALSE を返します。
gmp_xor	ビット XOR を計算する	resource gmp_xor ( resource $a , resource $b )	GMP 数リソースを返します。
gmstrftime	ロケールの設定に基づいて GMT/UTC 時刻/日付をフォーマットする	string gmstrftime ( string $format [, int $timestamp = time() ] )	指定した timestamp または timestamp が指定されていない場合に現在のローカル時間を用いて、 指定したフォーマット文字列に基づき文字列をフォーマットして返します。 月および曜日の名前、およびその他の言語依存の文字列は、 setlocale() で設定された現在のロケールを尊重して表示されます。
gnupg_adddecryptkey	復号のためのキーを追加する	bool gnupg_adddecryptkey ( resource $identifier , string $fingerprint , string $passphrase )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gnupg_addencryptkey	暗号化のためのキーを追加する	bool gnupg_addencryptkey ( resource $identifier , string $fingerprint )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gnupg_addsignkey	署名のためのキーを追加する	bool gnupg_addsignkey ( resource $identifier , string $fingerprint [, string $passphrase ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gnupg_cleardecryptkeys	事前に復号のために設定されたすべてのキーを削除する	bool gnupg_cleardecryptkeys ( resource $identifier )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gnupg_clearencryptkeys	事前に暗号化のために設定されたすべてのキーを削除する	bool gnupg_clearencryptkeys ( resource $identifier )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gnupg_clearsignkeys	事前に署名のために設定されたすべてのキーを削除する	bool gnupg_clearsignkeys ( resource $identifier )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gnupg_decrypt	指定されたテキストを復号する	string gnupg_decrypt ( resource $identifier , string $text )	成功した場合、この関数は復号されたテキストを返します。 失敗した場合、この関数は FALSE を返します。
gnupg_decryptverify	指定されたテキストを復号し、検証する	array gnupg_decryptverify ( resource $identifier , string $text , string &$plaintext )	成功した場合、この関数は署名の情報を返し、復号されたテキストを plaintext に保存します。 失敗した場合、この関数は FALSE を返します。
gnupg_encrypt	指定したテキストを暗号化する	string gnupg_encrypt ( resource $identifier , string $plaintext )	成功した場合、この関数は暗号化されたテキストを返します。 失敗した場合、この関数は FALSE を返します。
gnupg_encryptsign	指定したテキストを暗号化し、署名する	string gnupg_encryptsign ( resource $identifier , string $plaintext )	成功した場合、この関数は暗号化されて署名されたテキストを返します。 失敗した場合、この関数は FALSE を返します。
gnupg_export	キーをエクスポートする	string gnupg_export ( resource $identifier , string $fingerprint )	成功した場合、この関数はキーのデータを返します。 失敗した場合、この関数は FALSE を返します。
gnupg_geterror	関数が失敗した場合にエラー文字列を返す	string gnupg_geterror ( resource $identifier )	エラーが発生した場合にエラー文字列、それ以外の場合に FALSE を返します。
gnupg_getprotocol	すべての操作で現在アクティブなプロトコルを返す	int gnupg_getprotocol ( resource $identifier )	現在アクティブなプロトコルを返します。結果は GNUPG_PROTOCOL_OpenPGP あるいは GNUPG_PROTOCOL_CMS のいずれかとなります。
gnupg_import	キーをインポートする	array gnupg_import ( resource $identifier , string $keydata )	成功した場合、この関数はインポート処理の情報を配列で返します。 失敗した場合、この関数は FALSE を返します。
gnupg_init	接続を初期化する	resource gnupg_init ( void )	GnuPG 接続リソースを返します。これを他の GnuPG 関数で使用します。
gnupg_keyinfo	指定したパターンに一致するすべてのキーについての情報を配列で返す	array gnupg_keyinfo ( resource $identifier , string $pattern )	指定したパターンに一致するすべてのキーについての情報を配列で返します。 エラーが発生した場合は FALSE を返します。
gnupg_setarmor	armor 形式を切り替える	bool gnupg_setarmor ( resource $identifier , int $armor )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gnupg_seterrormode	エラー報告モードを設定する	void gnupg_seterrormode ( resource $identifier , int $errormode )	値を返しません。
gnupg_setsignmode	署名方式を設定する	bool gnupg_setsignmode ( resource $identifier , int $signmode )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gnupg_sign	指定したテキストに署名する	string gnupg_sign ( resource $identifier , string $plaintext )	成功した場合、この関数は署名済みテキストあるいは署名を返します。 失敗した場合、この関数は FALSE を返します。
gnupg_verify	署名済みテキストを検証する	array gnupg_verify ( resource $identifier , string $signed_text , string $signature [, string &$plaintext ] )	成功した場合、この関数は署名についての情報を返します。 失敗した場合、この関数は FALSE を返します。
gopher_parsedir	gopher フォーマットのディレクトリエントリを連想配列に変換する	array gopher_parsedir ( string $dirent )	以下の要素からなる連想配列を返します。 type - GOPHER_XXX 定数のいずれか。 title - リソースの名前。 path - リソースのパス。 host - このドキュメント (あるいはディレクトリ) を保持するホストのドメイン名。 port - host に接続するポート。
grapheme_extract	デフォルトの書記素クラスタシーケンスをテキストバッファから取り出す関数。 テキストは UTF-8 でエンコードされている必要があります	string grapheme_extract ( string $haystack , int $size [, int $extract_type [, int $start = 0 [, int &$next ]]] )	オフセット $start から始まり、 指定した $size と $extract_type を満たす、 デフォルトの書記素クラスタバウンダリで終わる文字列を返します。
grapheme_stripos	大文字小文字を区別せず、文字列内で最初にあらわれる場所の (書記素単位の) 位置を見つける	int grapheme_stripos ( string $haystack , string $needle [, int $offset = 0 ] )	位置を表す整数値を返します。needle が見つからない場合は grapheme_stripos() は FALSE を返します。
grapheme_stristr	大文字小文字を区別せず、haystack 文字列の中で needle が最初に登場した場所以降の部分文字列を返す	string grapheme_stristr ( string $haystack , string $needle [, bool $before_needle = false ] )	$haystack の部分文字列、あるいは $needle が見つからなかった場合に FALSE を返します。
grapheme_strlen	書記素単位で文字列の長さを取得する	int grapheme_strlen ( string $input )	成功した場合に文字列の長さ。文字列が空の場合に 0 を返します。
grapheme_strpos	文字列内で最初にあらわれる場所の (書記素単位の) 位置を見つける	int grapheme_strpos ( string $haystack , string $needle [, int $offset = 0 ] )	位置を表す整数値を返します。needle が見つからない場合は strpos() は FALSE を返します。
grapheme_strripos	大文字小文字を区別せず、文字列内で最後にあらわれる場所の (書記素単位の) 位置を見つける	int grapheme_strripos ( string $haystack , string $needle [, int $offset = 0 ] )	位置を表す整数値を返します。needle が見つからない場合は grapheme_strripos() は FALSE を返します。
grapheme_strrpos	文字列内で最後にあらわれる場所の (書記素単位の) 位置を見つける	int grapheme_strrpos ( string $haystack , string $needle [, int $offset = 0 ] )	位置を表す整数値を返します。needle が見つからない場合は grapheme_strrpos() は FALSE を返します。
grapheme_strstr	haystack 文字列の中で、needle が最初に登場した場所以降の部分文字列を返す	string grapheme_strstr ( string $haystack , string $needle [, bool $before_needle = false ] )	部分文字列、あるいは needle が見つからなかった場合に FALSE を返します。
grapheme_substr	部分文字列を返す	int grapheme_substr ( string $string , int $start [, int $length ] )	$string の部分文字列を返します。
GregorianToJD	グレゴリウス日をユリウス積算日に変換する	int gregoriantojd ( int $month , int $day , int $year )	指定したグレゴリウス日をユリウス積算日になおした結果を返します。
gupnp_context_get_host_ip	Get the IP address	string gupnp_context_get_host_ip ( resource $context )	Returns the IP address for the current context and FALSE on error.
gupnp_context_get_port	Get the port	int gupnp_context_get_port ( resource $context )	Returns the port number for the current context and FALSE on error.
gupnp_context_get_subscription_timeout	Get the event subscription timeout	int gupnp_context_get_subscription_timeout ( resource $context )	The event subscription timeout in seconds.
gupnp_context_host_path	Start hosting	bool gupnp_context_host_path ( resource $context , string $local_path , string $server_path )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_context_new	Create a new context	resource gupnp_context_new ([ string $host_ip [, int $port = 0 ]] )	A context identifier.
gupnp_context_set_subscription_timeout	Sets the event subscription timeout	void gupnp_context_set_subscription_timeout ( resource $context , int $timeout )	値を返しません。
gupnp_context_timeout_add	Sets a function to be called at regular intervals	bool gupnp_context_timeout_add ( resource $context , int $timeout , mixed $callback [, mixed $arg ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_context_unhost_path	Stop hosting	bool gupnp_context_unhost_path ( resource $context , string $server_path )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_control_point_browse_start	Start browsing	bool gupnp_control_point_browse_start ( resource $cpoint )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_control_point_browse_stop	Stop browsing	bool gupnp_control_point_browse_stop ( resource $cpoint )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_control_point_callback_set	Set control point callback	bool gupnp_control_point_callback_set ( resource $cpoint , int $signal , mixed $callback [, mixed $arg ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_control_point_new	Create a new control point	resource gupnp_control_point_new ( resource $context , string $target )	A control point identifier.
gupnp_device_action_callback_set	Set device callback function	bool gupnp_device_action_callback_set ( resource $root_device , int $signal , string $action_name , mixed $callback [, mixed $arg ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_device_info_get_service	Get the service with type	resource gupnp_device_info_get_service ( resource $root_device , string $type )	A service identifier.
gupnp_device_info_get	Get info of root device	array gupnp_device_info_get ( resource $root_device )	Return array wich contains the information of the root device (like location, url, udn and etc).
gupnp_root_device_get_available	Check whether root device is available	bool gupnp_root_device_get_available ( resource $root_device )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_root_device_get_relative_location	Get the relative location of root device.	string gupnp_root_device_get_relative_location ( resource $root_device )	The relative location of root device
gupnp_root_device_new	Create a new root device	resource gupnp_root_device_new ( resource $context , string $location , string $description_dir )	A root device identifier.
gupnp_root_device_set_available	Set whether or not root_device is available	bool gupnp_root_device_set_available ( resource $root_device , bool $available )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_root_device_start	Start main loop	bool gupnp_root_device_start ( resource $root_device )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_root_device_stop	Stop main loop	bool gupnp_root_device_stop ( resource $root_device )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_service_action_get	Retrieves the specified action arguments	mixed gupnp_service_action_get ( resource $action , string $name , int $type )	The value of the variable.
gupnp_service_action_return_error	Return error code	bool gupnp_service_action_return_error ( resource $action , int $error_code [, string $error_description ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_service_action_return	Return successfully	bool gupnp_service_action_return ( resource $action )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_service_action_set	Sets the specified action return values	bool gupnp_service_action_set ( resource $action , string $name , int $type , mixed $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_service_freeze_notify	Freeze new notifications	bool gupnp_service_freeze_notify ( resource $service )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_service_info_get_introspection	Get resource introspection of service	mixed gupnp_service_info_get_introspection ( resource $proxy [, mixed $callback [, mixed $arg ]] )	Return true if callback function was defined. Return introspection identifier if callback function was omited.
gupnp_service_info_get	Get full info of service	array gupnp_service_info_get ( resource $proxy )	Return array wich contains the information of the service (like location, url, udn and etc).
gupnp_service_introspection_get_state_variable	Returns the state variable data	array gupnp_service_introspection_get_state_variable ( resource $introspection , string $variable_name )	Return the state variable data or FALSE.
gupnp_service_notify	Notifies listening clients	bool gupnp_service_notify ( resource $service , string $name , int $type , mixed $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_service_proxy_action_get	Send action to the service and get value	mixed gupnp_service_proxy_action_get ( resource $proxy , string $action , string $name , int $type )	Return value of the action.
gupnp_service_proxy_action_set	Send action to the service and set value	bool gupnp_service_proxy_action_set ( resource $proxy , string $action , string $name , mixed $value , int $type )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_service_proxy_add_notify	Sets up callback for variable change notification	bool gupnp_service_proxy_add_notify ( resource $proxy , string $value , int $type , mixed $callback [, mixed $arg ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_service_proxy_callback_set	Set service proxy callback for signal	bool gupnp_service_proxy_callback_set ( resource $proxy , int $signal , mixed $callback [, mixed $arg ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_service_proxy_get_subscribed	Check whether subscription is valid to the service	bool gupnp_service_proxy_get_subscribed ( resource $proxy )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_service_proxy_remove_notify	Cancels the variable change notification	bool gupnp_service_proxy_remove_notify ( resource $proxy , string $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_service_proxy_set_subscribed	(Un)subscribes to the service.	bool gupnp_service_proxy_set_subscribed ( resource $proxy , bool $subscribed )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gupnp_service_thaw_notify	Sends out any pending notifications and stops queuing of new ones.	bool gupnp_service_thaw_notify ( resource $service )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gzclose	開かれたgzファイルへのポインタを閉じる	bool gzclose ( resource $zp )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gzcompress	文字列を圧縮する	string gzcompress ( string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_DEFLATE ]] )	圧縮された文字列、もしくはエラーの場合 FALSE 。
gzdecode	gzip 圧縮された文字列をデコードする	string gzdecode ( string $data [, int $length ] )	デコードされた文字列、あるいはエラーが発生した場合に FALSE を返します。
gzdeflate	文字列を deflate 圧縮する	string gzdeflate ( string $data [, int $level = -1 [, int $encoding = ZLIB_ENCODING_RAW ]] )	収縮された文字列、もしくはエラーの場合 FALSE 。
gzencode	gzip 圧縮された文字列を作成する	string gzencode ( string $data [, int $level = -1 [, int $encoding_mode = FORCE_GZIP ]] )	エンコードされた文字列、もしくはエラー発生時に FALSE
gzeof	gz ファイルポインタが EOF かどうか調べる	int gzeof ( resource $zp )	gz ファイルポインタが EOF を指す、もしくはエラーが発生した場合 TRUE、 そうでなければ FALSE を返します。
gzfile	gzファイル全体を配列に読み込む	array gzfile ( string $filename [, int $use_include_path = 0 ] )	ファイルを含む配列で、要素毎に 1 行ずつ含んでいます。
gzgetc	gz ファイルへのポインタから文字を得る	string gzgetc ( resource $zp )	非圧縮の文字列、もしくは EOF ( gzeof() とは異なる) の場合に FALSE を返します。
gzgets	ファイルポインタから 1 行を得る	string gzgets ( resource $zp , int $length )	非圧縮の文字列、もしくはエラー時に FALSE
gzgetss	gzファイルへのポインタから1行を得て、HTMLタグを取り除く	string gzgetss ( resource $zp , int $length [, string $allowable_tags ] )	非圧縮かつタグが取り除かれた文字列、もしくはエラー時に FALSE
gzinflate	deflate圧縮された文字列を解凍する	string gzinflate ( string $data [, int $length = 0 ] )	オリジナルの無圧縮なデータ、もしくはエラー時に FALSE
gzopen	gz ファイルを開く	resource gzopen ( string $filename , string $mode [, int $use_include_path = 0 ] )	オープンしたファイルへのファイルポインタを返します。その後、 このファイルディスクプリタから読み込んだ全ては透過的に解凍され、 書き込んだものは圧縮されます。
gzpassthru	gzファイルへのポインタから残りのデータ全部を出力する	int gzpassthru ( resource $zp )	gz から読み込んで解凍され、入力に渡された文字数。 もしくはエラー時に FALSE 。
gzputs	gzwrite() のエイリアス
gzread	バイナリ対応のgzファイル読み込み	string gzread ( resource $zp , int $length )	読み込まれたデータ
gzrewind	gz ファイルポインタの示す位置を元に戻す	bool gzrewind ( resource $zp )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
gzseek	gz ファイルポインタの位置を移動する	int gzseek ( resource $zp , int $offset [, int $whence = SEEK_SET ] )	成功した場合、0を返します。それ以外の場合は、-1を返します。 移動がEOFを超える場合にもエラーは発生しないことに注意してください。
gztell	gz ファイルポインタの読み込み/書き込み位置を返します	int gztell ( resource $zp )	ファイルポインタの位置、もしくはエラーが発生した場合 FALSE
gzuncompress	圧縮された文字列を解凍する	string gzuncompress ( string $data [, int $length = 0 ] )	オリジナルの無圧縮なデータ、もしくはエラー時に FALSE
gzwrite	バイナリセーフな gz ファイル書き込み	int gzwrite ( resource $zp , string $string [, int $length ] )	与えられた gz ファイルストリームに書き込まれた (解凍された) バイト数を返します。
__halt_compiler	コンパイラの実行を中止する	void __halt_compiler ( void )	値を返しません。
hash_algos	登録されているハッシュアルゴリズムの一覧を返す	array hash_algos ( void )	サポートされているハッシュアルゴリズムの一覧を、数値添字の 配列として返します。
hash_copy	ハッシュコンテキストをコピーする	resource hash_copy ( resource $context )	ハッシュコンテキストリソースのコピーを返します。
hash_file	ファイルの内容から、ハッシュ値を生成する	string hash_file ( string $algo , string $filename [, bool $raw_output = false ] )	raw_output が true に設定されていない場合は、 メッセージダイジェストの計算結果を小文字の 16 進数値形式の文字列で 返します。もし true に設定されていた場合は、メッセージダイジェストが そのままのバイナリ形式で返されます。
hash_final	段階的なハッシュ処理を終了し、出来上がったダイジェストを返す	string hash_final ( resource $context [, bool $raw_output = false ] )	raw_output が true に設定されていない場合は、 メッセージダイジェストの計算結果を小文字の 16 進数値形式の文字列で 返します。もし true に設定されていた場合は、メッセージダイジェストが そのままのバイナリ形式で返されます。
hash_hmac_file	HMAC 方式を使用して、指定されたファイルの内容からハッシュ値を生成する	string hash_hmac_file ( string $algo , string $filename , string $key [, bool $raw_output = false ] )	raw_output が true に設定されていない場合は、 メッセージダイジェストの計算結果を小文字の 16 進数値形式の文字列で 返します。もし true に設定されていた場合は、メッセージダイジェストが そのままのバイナリ形式で返されます。
hash_hmac	HMAC 方式を使用してハッシュ値を生成する	string hash_hmac ( string $algo , string $data , string $key [, bool $raw_output = false ] )	raw_output が true に設定されていない場合は、 メッセージダイジェストの計算結果を小文字の 16 進数値形式の文字列で 返します。もし true に設定されていた場合は、メッセージダイジェストが そのままのバイナリ形式で返されます。
hash_init	段階的なハッシュコンテキストを初期化する	resource hash_init ( string $algo [, int $options = 0 [, string $key = NULL ]] )	hash_update() 、 hash_update_stream() 、 hash_update_file() および hash_final() で使用するハッシュコンテキストリソースを 返します。
hash_pbkdf2	PBKDF2 を使ってパスワードからキーを生成する	string hash_pbkdf2 ( string $algo , string $password , string $salt , int $iterations [, int $length = 0 [, bool $raw_output = false ]] )	小文字の16進数を含む文字列が返されます。raw_output が true の場合、派生キーの生のバイナリ表現が返されます。
hash_update_file	アクティブなハッシュコンテキストに、ファイルから データを投入する	bool hash_update_file ( resource $context , string $filename [, resource $context = NULL ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
hash_update_stream	アクティブなハッシュコンテキストに、オープンしているストリームから データを投入する	int hash_update_stream ( resource $context , resource $handle [, int $length = -1 ] )	handle からハッシュコンテキストに追加された 実際のバイト数を返します。
hash_update	アクティブなハッシュコンテキストにデータを投入する	bool hash_update ( resource $context , string $data )	TRUE を返します。
hash	ハッシュ値 (メッセージダイジェスト) を生成する	string hash ( string $algo , string $data [, bool $raw_output = false ] )	raw_output が true に設定されていない場合は、 メッセージダイジェストの計算結果を小文字の 16 進数値形式の文字列で 返します。もし true に設定されていた場合は、メッセージダイジェストが そのままのバイナリ形式で返されます。
header_register_callback	ヘッダ用の関数を登録する	bool header_register_callback ( callable $callback )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
header_remove	以前に設定したHTTPヘッダを削除する	void header_remove ([ string $name ] )	値を返しません。
header	生の HTTP ヘッダを送信する	void header ( string $string [, bool $replace = true [, int $http_response_code ]] )	値を返しません。
headers_list	送信した (もしくは送信される予定の) レスポンスヘッダの一覧を返す	array headers_list ( void )	ヘッダを、数値添字の配列で返します。
headers_sent	ヘッダが既に送信されているかどうかを調べる	bool headers_sent ([ string &$file [, int &$line ]] )	headers_sent() は、HTTP ヘッダがまだ送信されていない場合に FALSE、 そうでないでない場合に TRUE を返します。
hebrev	論理表記のヘブライ語を物理表記に変換する	string hebrev ( string $hebrew_text [, int $max_chars_per_line = 0 ] )	物理表記の文字列を返します。
hebrevc	論理表記のヘブライ語を、改行の変換も含めて物理表記に変換する	string hebrevc ( string $hebrew_text [, int $max_chars_per_line = 0 ] )	物理表記の文字列を返します。
hex2bin	16進エンコードされたバイナリ文字列をデコードする	string hex2bin ( string $data )	指定したデータを2進表現に変換したものを返します。 失敗した場合に FALSE を返します。
hexdec	16 進数を 10 進数に変換する	number hexdec ( string $hex_string )	hex_string を 10 進で表した値を返します。
highlight_file	ファイルの構文ハイライト表示	mixed highlight_file ( string $filename [, bool $return = false ] )	return が TRUE の場合は、 ハイライトされたコードを文字列として返し、表示しません。 それ以外の場合は、成功した場合に TRUE、 失敗した場合に FALSE を返します。
highlight_string	文字列の構文ハイライト表示	mixed highlight_string ( string $str [, bool $return = false ] )	return が TRUE の場合は、 ハイライトされたコードを文字列として返し、表示しません。 それ以外の場合は、成功した場合に TRUE、 失敗した場合に FALSE を返します。
html_entity_decode	HTML エンティティを適切な文字に変換する	string html_entity_decode ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' ]] )	デコードされた文字列を返します。
htmlentities	適用可能な文字を全て HTML エンティティに変換する	string htmlentities ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' [, bool $double_encode = true ]]] )	エンコードした文字列を返します。
htmlspecialchars_decode	特殊な HTML エンティティを文字に戻す	string htmlspecialchars_decode ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 ] )	デコードされた文字列を返します。
htmlspecialchars	特殊文字を HTML エンティティに変換する	string htmlspecialchars ( string $string [, int $flags = ENT_COMPAT | ENT_HTML401 [, string $encoding = 'UTF-8' [, bool $double_encode = true ]]] )	変換後の文字列を返します。
http_build_cookie	クッキー文字列を作成する	string http_build_cookie ( array $cookie )	クッキーを文字列で返します。
http_build_query	URL エンコードされたクエリ文字列を生成する	string http_build_query ( mixed $query_data [, string $numeric_prefix [, string $arg_separator [, int $enc_type = PHP_QUERY_RFC1738 ]]] )	URL エンコードされた文字列を返します。
http_build_str	クエリ文字列を組み立てる	string http_build_str ( array $query [, string $prefix [, string $arg_separator = ini_get("arg_separator.output") ]] )	成功した場合に組み立てたクエリ文字列、 失敗した場合に FALSE を返します。
http_build_url	URL を組み立てる	string http_build_url ([ mixed $url [, mixed $parts [, int $flags = HTTP_URL_REPLACE [, array &$new_url ]]]] )	成功した場合に新しい URL を表す文字列、 失敗した場合に FALSE を返します。
http_cache_etag	ETag でキャッシュする	bool http_cache_etag ([ string $etag ] )	失敗した場合は FALSE を返します。成功した場合は 終了 します。 エンティティがキャッシュされた場合は、304 Not Modified となります。 "終了" の意味については、INI 設定 http.force_exit を参照ください。
http_cache_last_modified	最終更新日時でキャッシュする	bool http_cache_last_modified ([ int $timestamp_or_expires ] )	失敗した場合は FALSE を返します。成功した場合は 終了 します。 エンティティがキャッシュされた場合は、304 Not Modified となります。 "終了" の意味については、INI 設定 http.force_exit を参照ください。
http_chunked_decode	chunked-encoded データをデコードする	string http_chunked_decode ( string $encoded )	成功した場合はデコードした文字列、 失敗した場合に FALSE を返します。
http_date	HTTP の RFC に準拠した日付を作成する	string http_date ([ int $timestamp ] )	HTTP の日付を文字列で返します。
http_deflate	データを圧縮する	string http_deflate ( string $data [, int $flags = 0 ] )	成功した場合はエンコードした文字列、失敗した場合は NULL を返します。
http_get_request_body_stream	リクエストの本文をストリームとして取得する	resource http_get_request_body_stream ( void )	成功した場合は生のリクエスト本文をストリームで返します。 失敗した場合は NULL を返します。
http_get_request_body	リクエストの本文を文字列として取得する	string http_get_request_body ( void )	成功した場合は生のリクエスト本文を文字列で返します。 失敗した場合は NULL を返します。
http_get_request_headers	リクエストヘッダを配列として取得する	array http_get_request_headers ( void )	受け取ったリクエストヘッダを連想配列で返します。
http_get	GET リクエストを実行する	string http_get ( string $url [, array $options [, array &$info ]] )	成功した場合は HTTP レスポンスを文字列で、失敗した場合は FALSE を返します。
http_head	HEAD リクエストを実行する	string http_head ( string $url [, array $options [, array &$info ]] )	成功した場合は HTTP レスポンスを文字列で、失敗した場合は FALSE を返します。
http_inflate	データを展開する	string http_inflate ( string $data )	成功した場合はデコードした文字列、失敗した場合は NULL を返します。
http_match_etag	ETag を比較する	bool http_match_etag ( string $etag [, bool $for_range = false ] )	ETag が一致する場合やヘッダにアスタリスク ("*") が含まれる場合に TRUE、それ以外の場合に FALSE を返します。
http_match_modified	最終更新日時を比較する	bool http_match_modified ([ int $timestamp = -1 [, bool $for_range = false ]] )	timestamp がヘッダより前の時刻を表す場合に TRUE、 それ以外の場合に FALSE を返します。
http_match_request_header	任意のヘッダを比較する	bool http_match_request_header ( string $header , string $value [, bool $match_case = false ] )	ヘッダの値が一致する場合に TRUE、それ以外の場合に FALSE を返します。
http_negotiate_charset	クライアントが希望している文字セットを選択する	string http_negotiate_charset ( array $supported [, array &$result ] )	選択された文字セット、あるいは一致するものがなかった場合はデフォルトの文字セット (配列の最初のエントリ) を返します。
http_negotiate_content_type	クライアントが希望している content type を選択する	string http_negotiate_content_type ( array $supported [, array &$result ] )	選択された content type、あるいは一致するものがなかった場合はデフォルトの content type (配列の最初のエントリ) を返します。
http_negotiate_language	クライアントが希望している言語を選択する	string http_negotiate_language ( array $supported [, array &$result ] )	選択された言語、あるいは一致するものがなかった場合はデフォルトの言語 (配列の最初のエントリ) を返します。
http_parse_cookie	HTTP クッキーをパースする	object http_parse_cookie ( string $cookie [, int $flags [, array $allowed_extras ]] )	成功した場合は stdClass オブジェクト、 失敗した場合に FALSE を返します。
http_parse_headers	HTTP ヘッダをパースする	array http_parse_headers ( string $header )	成功した場合に配列、 失敗した場合に FALSE を返します。
http_parse_message	HTTP メッセージをパースする	object http_parse_message ( string $message )	パースされたメッセージを、階層化されたオブジェクトとして返します。
http_parse_params	パラメータリストをパースする	object http_parse_params ( string $param [, int $flags = HTTP_PARAMS_DEFAULT ] )	パラメータリストを stdClass オブジェクトで返します。
http_persistent_handles_clean	持続ハンドルを消去する	string http_persistent_handles_clean ([ string $ident ] )	値を返しません。
http_persistent_handles_count	持続ハンドルの状況	object http_persistent_handles_count ( void )	成功した場合には持続ハンドルの状況を表す stdClass オブジェクト、 失敗した場合に FALSE を返します。
http_persistent_handles_ident	持続ハンドルの ident を取得/設定する	string http_persistent_handles_ident ([ string $ident ] )	成功した場合に以前の ident、 失敗した場合に FALSE を返します。
http_post_data	エンコードされたデータを使用して POST リクエストを実行する	string http_post_data ( string $url , string $data [, array $options [, array &$info ]] )	成功した場合は HTTP レスポンスを文字列で、失敗した場合は FALSE を返します。
http_post_fields	エンコードされる前のデータを使用して POST リクエストを実行する	string http_post_fields ( string $url , array $data [, array $files [, array $options [, array &$info ]]] )	成功した場合は HTTP レスポンスを文字列で、失敗した場合は FALSE を返します。
http_put_data	データを使用して PUT リクエストを実行する	string http_put_data ( string $url , string $data [, array $options [, array &$info ]] )	成功した場合は HTTP レスポンスを文字列で、失敗した場合は FALSE を返します。
http_put_file	ファイルを使用して PUT リクエストを実行する	string http_put_file ( string $url , string $file [, array $options [, array &$info ]] )	成功した場合は HTTP レスポンスを文字列で、失敗した場合は FALSE を返します。
http_put_stream	ストリームを使用して PUT リクエストを実行する	string http_put_stream ( string $url , resource $stream [, array $options [, array &$info ]] )	成功した場合は HTTP レスポンスを文字列で、失敗した場合は FALSE を返します。
http_redirect	HTTP リダイレクトを発行する	bool http_redirect ([ string $url [, array $params [, bool $session = false [, int $status = 0 ]]]] )	失敗した場合は FALSE を返します。成功した場合は 終了 します。 指定したステータスコードとなります。 "終了" の意味については、INI 設定 http.force_exit を参照ください。
http_request_body_encode	リクエスト本文をエンコードする	string http_request_body_encode ( array $fields , array $files )	成功した場合にエンコードされた文字列、 失敗した場合に FALSE を返します。
http_request_method_exists	リクエストメソッドが存在するかどうかを調べる	int http_request_method_exists ( mixed $method )	リクエストメソッドが使用可能な場合に TRUE、 それ以外の場合に FALSE を返します。
http_request_method_name	リクエストメソッド名を取得する	string http_request_method_name ( int $method )	成功した場合にリクエストメソッド名を表す文字列、 失敗した場合に FALSE を返します。
http_request_method_register	リクエストメソッドを登録する	int http_request_method_register ( string $method )	成功した場合にリクエストメソッドの ID、 失敗した場合に FALSE を返します。
http_request_method_unregister	リクエストメソッドの登録を解除する	bool http_request_method_unregister ( mixed $method )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
http_request	独自のリクエストを実行する	string http_request ( int $method , string $url [, string $body [, array $options [, array &$info ]]] )	成功した場合は HTTP レスポンスを文字列で、失敗した場合は FALSE を返します。
http_response_code	HTTP レスポンスコードを取得または設定	int http_response_code ([ int $response_code ] )	現在のレスポンスコード。デフォルトでは、返り値は int(200) です。
http_send_content_disposition	Content-Disposition を送信する	bool http_send_content_disposition ( string $filename [, bool $inline = false ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
http_send_content_type	Content-Type を送信する	bool http_send_content_type ([ string $content_type = "application/x-octetstream" ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
http_send_data	任意のデータを送信する	bool http_send_data ( string $data )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
http_send_file	ファイルを送信する	bool http_send_file ( string $file )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
http_send_last_modified	Last-Modified を送信する	bool http_send_last_modified ([ int $timestamp = time() ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
http_send_status	HTTP レスポンスステータスを送信する	bool http_send_status ( int $status )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
http_send_stream	ストリームを送信する	bool http_send_stream ( resource $stream )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
http_support	組み込みの HTTP サポートを調べる	int http_support ([ int $feature = 0 ] )	指定された機能がサポートされているかどうかを表す integer 値、 あるいは feature を省略した場合はサポートされる全機能のビットマスクを返します。
http_throttle	HTTP 抑止処理	void http_throttle ( float $sec [, int $bytes = 40960 ] )
hw_Array2Objrec	オブジェクト配列からオブジェクトレコードに属性を変換する	string hw_array2objrec ( array $object_array )	オブジェクトレコードを返します。
hw_changeobject	オブジェクトの属性を変更する(古い関数)	bool hw_changeobject ( int $link , int $objid , array $attributes )
hw_Children	子のオブジェクト ID	array hw_children ( int $connection , int $objectID )	オブジェクト ID の配列を返します。各 ID は、ID objectID を有するコレクションの子に 属しています。 配列は、ドキュメントおよびコレクションの全ての子を有しています。
hw_ChildrenObj	子のオブジェクトレコード	array hw_childrenobj ( int $connection , int $objectID )	オブジェクトレコードの配列を返します。各オブジェクトレコードは、ID objectID を有するコレクションの子に属して います。配列は、ドキュメントおよびコレクションの全ての子を有しています。
hw_Close	Hyperwave 接続を閉じる	bool hw_close ( int $connection )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
hw_Connect	接続をオープンする	int hw_connect ( string $host , int $port [, string $username ], string $password )	成功した場合に接続インデックス、 接続できなかった場合に FALSE を返します。
hw_connection_info	Hyperwave サーバーへの接続に関する情報を出力する	void hw_connection_info ( int $link )
hw_cp	オブジェクトをコピーする	int hw_cp ( int $connection , array $object_id_array , int $destination_id )	コピーされたオブジェクトの数を返します。
hw_Deleteobject	オブジェクトを削除する	bool hw_deleteobject ( int $connection , int $object_to_delete )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
hw_DocByAnchor	アンカーに属するオブジェクトのオブジェクト ID	int hw_docbyanchor ( int $connection , int $anchorID )	ドキュメントのオブジェクト ID を返します。
hw_DocByAnchorObj	アンカーが指すオブジェクトレコード	string hw_docbyanchorobj ( int $connection , int $anchorID )	オブジェクトレコードを返します。
hw_Document_Attributes	hw_document のオブジェクトレコード	string hw_document_attributes ( int $hw_document )	ドキュメントのオブジェクトレコードを返します。
hw_Document_BodyTag	hw_document の BODY タグ	string hw_document_bodytag ( int $hw_document [, string $prefix ] )	BODY タグを文字列で返します。
hw_Document_Content	hw_document の内容を返す	string hw_document_content ( int $hw_document )	ドキュメントの内容を返します。ドキュメントが HTML ドキュメントの場合、 内容は、全て BODY タグの後になります。HEAD および BODY タグからの情報は、 オブジェクトレコードに保存されます。
hw_Document_SetContent	hw_document の内容を設定/置換する	bool hw_document_setcontent ( int $hw_document , string $content )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
hw_Document_Size	hw_document のサイズ	int hw_document_size ( int $hw_document )	ドキュメントのサイズをバイト数で返します。
hw_dummy	Hyperwave ダミー関数	string hw_dummy ( int $link , int $id , int $msgid )
hw_EditText	テキストドキュメントを取得する	bool hw_edittext ( int $connection , int $hw_document )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
hw_Error	エラー番号	int hw_error ( int $connection )	直近のエラー番号を返します。 返り値が 0 の場合、エラーは発生していません。
hw_ErrorMsg	エラーメッセージを返す	string hw_errormsg ( int $connection )	直近のエラーメッセージまたは 'No Error' を含む文字列を返します。 FALSE が返された場合、この関数は失敗しています。
hw_Free_Document	hw_document を解放する	bool hw_free_document ( int $hw_document )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
hw_GetAnchors	ドキュメントのアンカーのオブジェクト ID	array hw_getanchors ( int $connection , int $objectID )	オブジェクト ID の配列を返します。
hw_GetAnchorsObj	ドキュメントのアンカーのオブジェクトレコード	array hw_getanchorsobj ( int $connection , int $objectID )	オブジェクトレコードの配列を返します。
hw_GetAndLock	オブジェクトレコードを返しおよびオブジェクトをロックする	string hw_getandlock ( int $connection , int $objectID )	ID objectID を有するオブジェクトの オブジェクトレコードを返します。
hw_GetChildColl	子のコレクションのオブジェクト ID	array hw_getchildcoll ( int $connection , int $objectID )	オブジェクト ID の配列を返します。
hw_GetChildCollObj	子のコレクションのオブジェクトレコード	array hw_getchildcollobj ( int $connection , int $objectID )	オブジェクトレコードの配列を返します。
hw_GetChildDocColl	コレクションの子ドキュメントのオブジェクト ID	array hw_getchilddoccoll ( int $connection , int $objectID )	オブジェクト ID の配列を返します。
hw_GetChildDocCollObj	コレクションの子ドキュメントのオブジェクトレコード	array hw_getchilddoccollobj ( int $connection , int $objectID )	オブジェクトレコードの配列を返します。
hw_GetObject	オブジェクトレコード	mixed hw_getobject ( int $connection , mixed $objectID [, string $query ] )	二番目のパラメータが整数の場合、指定したオブジェクト ID を有するオブジェクトのオブジェクトレコードを返します。
hw_GetObjectByQuery	オブジェクトを検索する	array hw_getobjectbyquery ( int $connection , string $query , int $max_hits )	オブジェクト ID の配列を返します。
hw_GetObjectByQueryColl	コレクションのオブジェクトを検索する	array hw_getobjectbyquerycoll ( int $connection , int $objectID , string $query , int $max_hits )	オブジェクト ID の配列を返します。
hw_GetObjectByQueryCollObj	コレクションのオブジェクトを検索する	array hw_getobjectbyquerycollobj ( int $connection , int $objectID , string $query , int $max_hits )	オブジェクトレコードの配列を返します。
hw_GetObjectByQueryObj	オブジェクトを検索する	array hw_getobjectbyqueryobj ( int $connection , string $query , int $max_hits )	オブジェクトレコードの配列を返します。
hw_GetParents	親のオブジェクト ID	array hw_getparents ( int $connection , int $objectID )	オブジェクト ID の添字配列を返します。各オブジェクト ID は、 ID objectID を有するオブジェクトの 親に属しています。
hw_GetParentsObj	親のオブジェクトレコード	array hw_getparentsobj ( int $connection , int $objectID )	オブジェクトレコードの添字配列に加えてオブジェクトでコードに関する 統計情報を含む連想配列を返します。連想配列は、 配列の最後のエントリとなります。
hw_getrellink	rootid に相対的な source から dest へのリンクを得る	string hw_getrellink ( int $link , int $rootid , int $sourceid , int $destid )
hw_GetRemote	リモートドキュメントを得る	int hw_getremote ( int $connection , int $objectID )	リモートドキュメントを返します。
hw_getremotechildren	リモートドキュメントの子を得る	mixed hw_getremotechildren ( int $connection , string $object_record )	子の数が1の場合、関数は Hyperwave Gateway Interface (HGI) にフォーマットされたドキュメント 自体を返します。子の数が 1 より大きい場合、 hw_GetRemoteChildren() への他のコールに関する 入力値を有するオブジェクトレコードの配列を返します。 これらのオブジェクトレコードは仮想的なもので、Hyperwave サーバーには 存在しません。 このため、有効なオブジェクト ID を有していません。 オブジェクトレコードにどれだけ似ているかは HGI 次第です。
hw_GetSrcByDestObj	オブジェクトを指すアンカーを返す	array hw_getsrcbydestobj ( int $connection , int $objectID )	オブジェクトレコードの配列を返します。
hw_GetText	テキストドキュメントを取得する	int hw_gettext ( int $connection , int $objectID [, mixed $rootID/prefix ] )	テキストドキュメントを返します。
hw_getusername	現在ログインしているユーザーの名前	string hw_getusername ( int $connection )	ユーザー名を表す文字列を返します。
hw_Identify	ユーザーとして認証する	string hw_identify ( int $link , string $username , string $password )
hw_InCollections	コレクションにオブジェクト ID があるかどうかを確認する	array hw_incollections ( int $connection , array $object_id_array , array $collection_id_array , int $return_collections )	オブジェクト ID の配列を返します。
hw_Info	接続に関する情報	string hw_info ( int $connection )	返される配列は次のようなフォーマットとなります。 <Serverstring>, <Host>, <Port>, <Username>, <Port of Client>, <Byte swapping>
hw_InsColl	コレクションを挿入する	int hw_inscoll ( int $connection , int $objectID , array $object_array )
hw_InsDoc	ドキュメントを挿入する	int hw_insdoc ( resource $connection , int $parentID , string $object_record [, string $text ] )
hw_insertanchors	テキストにアンカーのみを挿入する	bool hw_insertanchors ( int $hwdoc , array $anchorecs , array $dest [, array $urlprefixes ] )
hw_InsertDocument	ドキュメントをアップロードする	int hw_insertdocument ( int $connection , int $parent_id , int $hw_document )	この関数は、新規ドキュメントのオブジェクト ID または FALSE を返します。
hw_InsertObject	オブジェクトレコードを挿入する	int hw_insertobject ( int $connection , string $object_rec , string $parameter )
hw_mapid	グローバル ID を仮想的なローカル ID に割りつける	int hw_mapid ( int $connection , int $server_id , int $object_id )	仮想オブジェクト ID を返します。
hw_Modifyobject	オブジェクトレコードを修正する	bool hw_modifyobject ( int $connection , int $object_to_change , array $remove , array $add [, int $mode ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
hw_mv	オブジェクトを移動する	int hw_mv ( int $connection , array $object_id_array , int $source_id , int $destination_id )	移動されたオブジェクトの数を返します。
hw_New_Document	新しいドキュメントを作成する	int hw_new_document ( string $object_record , string $document_data , int $document_size )	新しい Hyperwave ドキュメントを返します。
hw_objrec2array	属性をオブジェクトレコードからオブジェクト配列に変換する	array hw_objrec2array ( string $object_record [, array $format ] )	配列を返します。 結果の配列のキーは属性の名前です。'Title' のように 異なった言語で多重定義を行う属性は、それ自体で配列となります。 この配列のキーは、属性の値のコロンの左の部分にあります。 この左側の部分は、2 文字分の長さとする必要があります。
hw_Output_Document	hw_document を出力する	bool hw_output_document ( int $hw_document )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
hw_pConnect	持続的データベース接続を作成する	int hw_pconnect ( string $host , int $port [, string $username ], string $password )	成功時に接続インデックスを、接続できなかった場合に FALSE を返します。
hw_PipeDocument	ドキュメントを取得する	int hw_pipedocument ( int $connection , int $objectID [, array $url_prefixes ] )	Hyperwave ドキュメントを返します。
hw_Root	ルートオブジェクト ID	int hw_root ( void )	0 を返します。
hw_setlinkroot	計算されたリンクの ID を設定する	int hw_setlinkroot ( int $link , int $rootid )
hw_stat	ステータス文字列を返す	string hw_stat ( int $link )
hw_Unlock	オブジェクトをアンロックする	bool hw_unlock ( int $connection , int $objectID )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
hw_Who	現在ログイン中のユーザーのリスト	array hw_who ( int $connection )	Hyperwave サーバーに現在ログイン中のユーザーの配列を返します。 この配列の各エントリは、要素 ID、名前、システム、onSinceDate, onSinceTime, TotalTime , self を有する配列です。 このエントリがリクエストを初期化したユーザーに属している場合、 'self' は 1 となります。
hwapi_attribute_new	hw_api_attribute クラスのインスタンスを作成する	HW_API_Attribute hwapi_attribute_new ([ string $name [, string $value ]] )	hw_api_attribute のインスタンスを返します。
hwapi_content_new	hw_api_content クラスの新しいインスタンスを作成する	HW_API_Content hwapi_content_new ( string $content , string $mimetype )
hwapi_hgcsp	hw_api クラスのオブジェクトを返す	HW_API hwapi_hgcsp ( string $hostname [, int $port ] )	HW_API のインスタンスを返します。
hwapi_object_new	hwapi_object_new クラスの新しいインスタンスを作成する	hw_api_object hwapi_object_new ( array $parameter )
hypot	直角三角形の斜辺の長さを計算する	float hypot ( float $x , float $y )	斜辺の長さを返します。
ibase_add_user	セキュリティデータベースにユーザーを追加する	bool ibase_add_user ( resource $service_handle , string $user_name , string $password [, string $first_name [, string $middle_name [, string $last_name ]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ibase_affected_rows	直近のクエリで変更された行の数を返す	int ibase_affected_rows ([ resource $link_identifier ] )	変更された行数を整数値で返します。
ibase_backup	サービスマネージャのバックアップタスクを起動し、すぐに結果を返す	mixed ibase_backup ( resource $service_handle , string $source_db , string $dest_file [, int $options = 0 [, bool $verbose = false ]] )
ibase_blob_add	生成された blob にデータを追加する	void ibase_blob_add ( resource $blob_handle , string $data )	値を返しません。
ibase_blob_cancel	blob の生成を取り消す	bool ibase_blob_cancel ( resource $blob_handle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ibase_blob_close	blob を閉じる	mixed ibase_blob_close ( resource $blob_handle )	BLOB が読み込み用であった場合、 この関数は成功時に TRUE を返します。一方 BLOB が書き込み用であった場合、 データベースによって割り当てられた BLOB ID を文字列で返します。 失敗した場合は、この関数は FALSE を返します。
ibase_blob_create	データを追加するために blob を生成する	resource ibase_blob_create ([ resource $link_identifier = NULL ] )	ibase_blob_add() で使用するための BLOB ハンドルを返します。失敗した場合に FALSE を返します。
ibase_blob_echo	ブラウザに blob の内容を出力する	bool ibase_blob_echo ( string $blob_id )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ibase_blob_get	オープンした blob から len バイト分のデータを取得する	string ibase_blob_get ( resource $blob_handle , int $len )	BLOB から最大 len バイトを返します。 失敗した場合は FALSE を返します。
ibase_blob_import	blob を生成し、ファイルをコピーし、閉じる	string ibase_blob_import ( resource $link_identifier , resource $file_handle )	成功した場合に BLOB の ID、エラー時に FALSE を返します。
ibase_blob_info	blob の長さと他の便利な情報を返す	array ibase_blob_info ( resource $link_identifier , string $blob_id )	BLOB についての情報を含む配列を返します。返される情報には BLOB の長さ・含んでいるセグメントの数・最大のセグメントのサイズ・ ストリーム BLOB とセグメント BLOB のどちらであるかなどがあります。
ibase_blob_open	データの一部を取得するために blob をオープンする	resource ibase_blob_open ( resource $link_identifier , string $blob_id )	後で ibase_blob_get() とともに使用する BLOB ハンドルを返します。失敗した場合に FALSE を返します。
ibase_close	InterBase データベースへの接続を閉じる	bool ibase_close ([ resource $connection_id = NULL ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ibase_commit_ret	トランザクションを閉じずにコミットする	bool ibase_commit_ret ([ resource $link_or_trans_identifier = NULL ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ibase_commit	トランザクションをコミットする	bool ibase_commit ([ resource $link_or_trans_identifier = NULL ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ibase_connect	データベースへの接続をオープンする	resource ibase_connect ([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]] )	成功した場合に Firebird/InterBase リンク ID、エラー時に FALSE を返します。
ibase_db_info	データベースについての統計情報を要求する	string ibase_db_info ( resource $service_handle , string $db , int $action [, int $argument = 0 ] )
ibase_delete_user	セキュリティデータベースからユーザーを削除する	bool ibase_delete_user ( resource $service_handle , string $user_name )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ibase_drop_db	データベースを削除する	bool ibase_drop_db ([ resource $connection = NULL ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ibase_errcode	エラーコードを返す	int ibase_errcode ( void )	エラーコードを表す整数、あるいはエラーが発生しなかった場合は FALSE を返します。
ibase_errmsg	エラーメッセージを返す	string ibase_errmsg ( void )	エラーメッセージを表す文字列、あるいはエラーが発生しなかった場合は FALSE を返します。
ibase_execute	準備されたクエリを実行する	resource ibase_execute ( resource $query [, mixed $bind_arg [, mixed $... ]] )	クエリがエラーを発生させた場合は FALSE を返します。 クエリが成功し、結果セット(空のセットとなる可能性もありえます)を 返した場合(SELECT クエリなど)は結果 ID を返します。クエリが成功し、 結果セットが返されなかった場合は TRUE を返します。
ibase_fetch_assoc	クエリの結果から、行を連想配列として取得する	array ibase_fetch_assoc ( resource $result [, int $fetch_flag = 0 ] )	ibase_fetch_assoc() は、取得した行に対応する連想配列を返します。 続けてコールすると、結果セットの次の行を返し、 行がもうない場合には FALSE を返します。
ibase_fetch_object	InterBase データベースからオブジェクトを得る	object ibase_fetch_object ( resource $result_id [, int $fetch_flag = 0 ] )	次の行の情報を含むオブジェクト、 あるいは行がもうない場合には FALSE を返します。
ibase_fetch_row	InterBase データベースから 1 行分の結果を取得する	array ibase_fetch_row ( resource $result_identifier [, int $fetch_flag = 0 ] )	取得した行に対応する配列を返します。行がもうない場合には FALSE を返します。 結果の各行は配列のオフセットに格納され、 このオフセットは 0 から始まります。
ibase_field_info	フィールドに関する情報を得る	array ibase_field_info ( resource $result , int $field_number )	配列を返します。配列に含まれるキーは name、 alias、relation、 length そして type です。
ibase_free_event_handler	登録済みのイベントハンドラをキャンセルする	bool ibase_free_event_handler ( resource $event )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ibase_free_query	プリペアドクエリにより確保されたメモリを解放する	bool ibase_free_query ( resource $query )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ibase_free_result	結果セットを解放する	bool ibase_free_result ( resource $result_identifier )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ibase_gen_id	指定した名前のジェネレータをひとつ加算し、その新しい値を返す	mixed ibase_gen_id ( string $generator [, int $increment = 1 [, resource $link_identifier = NULL ]] )	新しいジェネレータの値を整数で返します。値が大きくなりすぎた場合は文字列で返します。
ibase_maintain_db	データベースサーバーでメンテナンスコマンドを実行する	bool ibase_maintain_db ( resource $service_handle , string $db , int $action [, int $argument = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ibase_modify_user	セキュリティデータベースのユーザーを変更する	bool ibase_modify_user ( resource $service_handle , string $user_name , string $password [, string $first_name [, string $middle_name [, string $last_name ]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ibase_name_result	結果セットに名前を割り当てる	bool ibase_name_result ( resource $result , string $name )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ibase_num_fields	結果セットにおけるフィールド数を得る	int ibase_num_fields ( resource $result_id )	フィールドの数を整数値で返します。
ibase_num_params	プリペアドクエリのパラメータ数を返す	int ibase_num_params ( resource $query )	パラメータの数を整数値で返します。
ibase_param_info	プリペアドクエリのパラメータに関する情報を返す	array ibase_param_info ( resource $query , int $param_number )	配列を返します。配列に含まれるキーは name、 alias、relation、 length および type となります。
ibase_pconnect	InterBase データベースへの持続的接続をオープンする	resource ibase_pconnect ([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]] )	成功した場合に InterBase リンク ID、エラー時に FALSE を返します。
ibase_prepare	後でパラメータのバインド及び実行を行うためにクエリを準備する	resource ibase_prepare ( string $query )	プリペアドクエリのハンドル、あるいはエラー時に FALSE を返します。
ibase_query	InterBase データベースでクエリを実行する	resource ibase_query ([ resource $link_identifier ], string $query [, int $bind_args ] )	クエリが失敗した場合、FALSE を返します。成功した場合、 (SELECT クエリのような) 結果の行がある場合、結果 ID を返します。 クエリが成功し、結果がない場合は TRUE を返します。
ibase_restore	サービスマネージャのリストアタスクを起動し、すぐに結果を返す	mixed ibase_restore ( resource $service_handle , string $source_file , string $dest_db [, int $options = 0 [, bool $verbose = false ]] )
ibase_rollback_ret	トランザクションを閉じずにロールバックする	bool ibase_rollback_ret ([ resource $link_or_trans_identifier = NULL ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ibase_rollback	トランザクションをロールバックする	bool ibase_rollback ([ resource $link_or_trans_identifier = NULL ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ibase_server_info	データベースサーバーについての情報を要求する	string ibase_server_info ( resource $service_handle , int $action )
ibase_service_attach	サービスマネージャに接続する	resource ibase_service_attach ( string $host , string $dba_username , string $dba_password )
ibase_service_detach	サービスマネージャとの接続を切断する	bool ibase_service_detach ( resource $service_handle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ibase_set_event_handler	イベントが発生した際にコールされるコールバック関数を登録する	resource ibase_set_event_handler ( callable $event_handler , string $event_name1 [, string $event_name2 [, string $... ]] )	返される値はイベントのリソースです。このリソースは、 ibase_free_event_handler() でイベントハンドラを開放する際に使用可能です。
ibase_trans	トランザクションを開始する	resource ibase_trans ([ int $trans_args [, resource $link_identifier ]] )	トランザクションハンドル、あるいはエラー時に FALSE を返します。
ibase_wait_event	データベースでイベントが発生するのを待つ	string ibase_wait_event ( string $event_name1 [, string $event_name2 [, string $... ]] )	発生したイベントの名前を返します。
iconv_get_encoding	iconv 拡張モジュールの内部設定変数を取得する	mixed iconv_get_encoding ([ string $type = "all" ] )	成功時に内部設定変数の現在の設定、失敗した場合に FALSE を返します。
iconv_mime_decode_headers	複数の MIME ヘッダフィールドを一度にデコードする	array iconv_mime_decode_headers ( string $encoded_headers [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding") ]] )	成功した場合は連想配列を返します。その中身には encoded_headers で指定した MIME ヘッダフィールドがすべて含まれています。 デコード中にエラーが発生した場合は FALSE を返します。
iconv_mime_decode	MIME ヘッダフィールドをデコードする	string iconv_mime_decode ( string $encoded_header [, int $mode = 0 [, string $charset = ini_get("iconv.internal_encoding") ]] )	成功した場合はデコードされた MIME フィールドを、 デコード中にエラーが発生した場合は FALSE を返します。
iconv_mime_encode	MIME ヘッダフィールドを作成する	string iconv_mime_encode ( string $field_name , string $field_value [, array $preferences = NULL ] )	成功した場合はエンコードした MIME フィールド、 エンコード時にエラーが発生した場合は FALSE を返します。
iconv_set_encoding	文字エンコーディング変換用の設定を行なう	bool iconv_set_encoding ( string $type , string $charset )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
iconv_strlen	文字列の文字数を返す	int iconv_strlen ( string $str [, string $charset = ini_get("iconv.internal_encoding") ] )	str の文字数を返します。
iconv_strpos	文字列が最初に現れる場所を見つける	int iconv_strpos ( string $haystack , string $needle [, int $offset = 0 [, string $charset = ini_get("iconv.internal_encoding") ]] )	needle が haystack の中で最初に現れる位置を探します。
iconv_strrpos	文字列が最後に現れる場所を見つける	int iconv_strrpos ( string $haystack , string $needle [, string $charset = ini_get("iconv.internal_encoding") ] )	文字列 haystack の中で、 needle が最後に現れた位置を数字で返します。
iconv_substr	文字列の一部を切り出す	string iconv_substr ( string $str , int $offset [, int $length = iconv_strlen($str, $charset) [, string $charset = ini_get("iconv.internal_encoding") ]] )	文字列 str の、 offset と length で指定された一部を返します。
iconv	文字列を指定した文字エンコーディングに変換する	string iconv ( string $in_charset , string $out_charset , string $str )	変換された文字列、失敗した場合に FALSE を返します。
id3_get_frame_long_name	ID3v2 フレームの長い名前を取得する	string id3_get_frame_long_name ( string $frameId )	フレームの長い名前、あるいはエラー時に FALSE を返します。
id3_get_frame_short_name	ID3v2 フレームの短い名前を取得する	string id3_get_frame_short_name ( string $frameId )	フレームの短い名前、あるいはエラー時に FALSE を返します。
id3_get_genre_id	ジャンルの ID を取得する	int id3_get_genre_id ( string $genre )	ジャンルの ID あるいはエラー時に FALSE を返します。
id3_get_genre_list	使用可能なジャンルの一覧を取得する	array id3_get_genre_list ( void )	ID3 タグに格納されているすべてのジャンルを含む配列を返します。
id3_get_genre_name	ジャンル ID に対応する名前を取得する	string id3_get_genre_name ( int $genre_id )	名前を文字列で返します。
id3_get_tag	ID3 タグに含まれるすべての情報を取得する	array id3_get_tag ( string $filename [, int $version = ID3_BEST ] )	title や artist といったキーを含む連想配列を返します。
id3_get_version	ID3 タグのバージョンを取得する	int id3_get_version ( string $filename )	MP3 ファイル内の ID3 タグのバージョンを返します。 ID3 v1.x のタグおよび v2.x のタグを同時に保持することも可能なので、 この関数の返す値を利用する際には 定義済みの定数 ID3_V1_0、 ID3_V1_1 および ID3_V2 とのビット比較を行わなければなりません。
id3_remove_tag	既存の ID3 タグを削除する	bool id3_remove_tag ( string $filename [, int $version = ID3_V1_0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
id3_set_tag	ID3 タグに格納されている情報を更新する	bool id3_set_tag ( string $filename , array $tag [, int $version = ID3_V1_0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
idate	ローカルな時刻/日付を整数として整形する	int idate ( string $format [, int $timestamp = time() ] )	整数値を返します。
idn_to_ascii	ドメイン名をIDNAのASCII形式に変換する	string idn_to_ascii ( string $domain [, int $options = 0 [, int $variant = INTL_IDNA_VARIANT_2003 [, array &$idna_info ]]] )	IDNA のASCII形式でエンコードされたドメイン名。失敗した場合に FALSE を返します
idn_to_unicode	idn_to_utf8() のエイリアス
idn_to_utf8	IDNAのASCII方式でエンコードされたドメイン名をUnicodeに変換する	string idn_to_utf8 ( string $domain [, int $options = 0 [, int $variant = INTL_IDNA_VARIANT_2003 [, array &$idna_info ]]] )	Unicodeのドメイン名。UTF-8 にエンコードされています。失敗した場合に FALSE を返します
ifx_affected_rows	クエリで変更された行の数を得る	int ifx_affected_rows ( resource $result_id )	行の数を整数値で返します。
ifx_blobinfile_mode	全ての select クエリに関するデフォルトの BLOB モードを設定する	bool ifx_blobinfile_mode ( int $mode )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ifx_byteasvarchar	デフォルトのバイトモードを設定する	bool ifx_byteasvarchar ( int $mode )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ifx_close	Informix 接続を閉じる	bool ifx_close ([ resource $link_identifier ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ifx_connect	Informix サーバーへの接続をオープンする	resource ifx_connect ([ string $database [, string $userid [, string $password ]]] )	成功時に接続 ID を、エラー時に FALSE を返します。
ifx_copy_blob	指定した BLOB オブジェクトを二重化する	int ifx_copy_blob ( int $bid )	新規の BLOB オブジェクト ID を返します。 エラーの場合に FALSE を返します。
ifx_create_blob	BLOB オブジェクトを作成する	int ifx_create_blob ( int $type , int $mode , string $param )	新規の BLOB オブジェクト ID を返します。 エラーの場合に FALSE を返します。
ifx_create_char	文字オブジェクトを作成する	int ifx_create_char ( string $param )	新しい文字オブジェクトの ID、あるいはエラー時に FALSE を返します。
ifx_do	事前に準備された SQL 文を実行する	bool ifx_do ( resource $result_id )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ifx_error	直近の Informix コールのエラーコードを返す	string ifx_error ([ resource $link_identifier ] )	Informix エラーコード (SQLSTATE & SQLCODE) は、 x [SQLSTATE = aa bbb SQLCODE=cccc] のような形式になります。
ifx_errormsg	直近の Informix コールのエラーメッセージを返す	string ifx_errormsg ([ int $errorcode ] )	エラーメッセージを文字列で返します。
ifx_fetch_row	行を連想配列として取得する	array ifx_fetch_row ( resource $result_id [, mixed $position ] )	取得された行に対応する連想配列を返します。行がもうない場合には FALSE を返します。
ifx_fieldproperties	SQL フィールドプロパティのリスト	array ifx_fieldproperties ( resource $result_id )	result_id のクエリについて、フィールド名を キーとし、SQL フィールドプロパティをデータとした連想配列を返します。 エラーの場合に FALSE を返します。
ifx_fieldtypes	Informix SQL フィールドのリスト	array ifx_fieldtypes ( resource $result_id )	result_id のクエリについて、フィールド名をキーとし、 SQL フィールド型をデータとした連想配列を返します。 エラーの場合に FALSE を返します。
ifx_free_blob	BLOB オブジェクトを削除する	bool ifx_free_blob ( int $bid )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ifx_free_char	文字オブジェクトを削除する	bool ifx_free_char ( int $bid )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ifx_free_result	クエリに関するリソースを解放する	bool ifx_free_result ( resource $result_id )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ifx_get_blob	BLOB オブジェクトの内容を返す	string ifx_get_blob ( int $bid )	BLOB の内容を表す文字列、あるいはエラー時に FALSE を返します。
ifx_get_char	文字オブジェクトの内容を返す	string ifx_get_char ( int $bid )	文字の内容を表す文字列、あるいはエラー時に FALSE を返します。
ifx_getsqlca	クエリ実行後、sqlca.sqlerrd[0..5] の値を得る	array ifx_getsqlca ( resource $result_id )	連想配列を返します。含まれるエントリは sqlerrd0、sqlerrd1、 sqlerrd2、sqlerrd3、 sqlerrd4 および sqlerrd5 です。
ifx_htmltbl_result	クエリ結果の全行を HTML テーブルにフォーマットする	int ifx_htmltbl_result ( resource $result_id [, string $html_table_options ] )	取得された行の数、あるいはエラーの場合に FALSE を返します。
ifx_nullformat	取得する行のデフォルトの返り値を設定する	bool ifx_nullformat ( int $mode )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ifx_num_fields	クエリのカラム数を返す	int ifx_num_fields ( resource $result_id )	result_id に関するクエリ結果のカラム数、 あるいはエラーの場合にFALSEを返します。
ifx_num_rows	クエリから既に取得された行の数を数える	int ifx_num_rows ( resource $result_id )	取得した行の数、あるいはエラー時に FALSE を返します。
ifx_pconnect	持続的 Informix 接続をオープンする	resource ifx_pconnect ([ string $database [, string $userid [, string $password ]]] )	返り値: 成功時に有効な Informix 持続的リンク ID 、エラー時に FALSE
ifx_prepare	SQL 文を実行用に準備する	resource ifx_prepare ( string $query , resource $link_identifier [, int $cursor_def ], mixed $blobidarray )	後で ifx_do() で使用するための結果 ID、 あるいはエラー時に FALSE を返します。
ifx_query	Informix クエリを送信する	resource ifx_query ( string $query , resource $link_identifier [, int $cursor_type [, mixed $blobidarray ]] )	成功した場合に Informix 結果 ID、エラー時に FALSE を返します。
ifx_textasvarchar	デフォルトのテキストモードを設定する	bool ifx_textasvarchar ( int $mode )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ifx_update_blob	BLOB オブジェクトの内容を更新する	bool ifx_update_blob ( int $bid , string $content )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ifx_update_char	文字オブジェクトの内容を更新する	bool ifx_update_char ( int $bid , string $content )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ifxus_close_slob	SLOB オブジェクトを削除する	bool ifxus_close_slob ( int $bid )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ifxus_create_slob	SLOB オブジェクトを作成し、オープンする	int ifxus_create_slob ( int $mode )	新しい SLOB オブジェクトの ID、あるいはエラー時に FALSE を返します。
ifxus_free_slob	SLOB オブジェクトを削除する	bool ifxus_free_slob ( int $bid )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ifxus_open_slob	SLOB オブジェクトをオープンする	int ifxus_open_slob ( int $bid , int $mode )	新しい SLOB オブジェクトの ID、あるいはエラー時に FALSE を返します。
ifxus_read_slob	SLOB オブジェクトから n バイト読みこむ	string ifxus_read_slob ( int $bid , int $nbytes )	SLOB の内容を表す文字列、あるいはエラー時に FALSE を返します。
ifxus_seek_slob	現在のファイル位置またはシーク位置を返す	int ifxus_seek_slob ( int $bid , int $mode , int $offset )	シーク位置を表す整数値、あるいはエラー時に FALSE を返します。
ifxus_tell_slob	現在のファイルまたはシーク位置を返す	int ifxus_tell_slob ( int $bid )	シーク位置を表す整数値、あるいはエラー時に FALSE を返します。
ifxus_write_slob	SLOB オブジェクトに文字列を書きこむ	int ifxus_write_slob ( int $bid , string $content )	書き込んだバイト数を表す整数値、あるいはエラー時に FALSE を返します。
ignore_user_abort	クライアントの接続が切断された際にスクリプトの実行を終了するかどうかを設定する	int ignore_user_abort ([ string $value ] )	以前の設定を表す integer 値を返します。
iis_add_server	新規に仮想 Web サーバーを作成する	int iis_add_server ( string $path , string $comment , string $server_ip , int $port , string $host_name , int $rights , int $start_server )
iis_get_dir_security	ディレクトリのセキュリティを取得する	int iis_get_dir_security ( int $server_instance , string $virtual_path )
iis_get_script_map	指定した拡張子に関して仮想ディレクトリにおけるスクリプトマッピングを取得する	string iis_get_script_map ( int $server_instance , string $virtual_path , string $script_extension )
iis_get_server_by_comment	指定したコメントのインスタンス番号を返す	int iis_get_server_by_comment ( string $comment )
iis_get_server_by_path	指定したパスのインスタンス番号を返す	int iis_get_server_by_path ( string $path )	サーバーのインスタンス番号を返します。
iis_get_server_rights	サーバーの権限を取得する	int iis_get_server_rights ( int $server_instance , string $virtual_path )
iis_get_service_state	サービス ID で指定したサービスの状態を取得する	int iis_get_service_state ( string $service_id )
iis_remove_server	サーバーインスタンスで指定した仮想 Web サーバーを削除する	int iis_remove_server ( int $server_instance )
iis_set_app_settings	仮想ディレクトリでのアプリケーションスコープを作成する	int iis_set_app_settings ( int $server_instance , string $virtual_path , string $application_scope )
iis_set_dir_security	ディレクトリのセキュリティを設定する	int iis_set_dir_security ( int $server_instance , string $virtual_path , int $directory_flags )
iis_set_script_map	仮想ディレクトリにスクリプトマッピングを設定する	int iis_set_script_map ( int $server_instance , string $virtual_path , string $script_extension , string $engine_path , int $allow_scripting )
iis_set_server_rights	サーバーの権限を設定する	int iis_set_server_rights ( int $server_instance , string $virtual_path , int $directory_flags )
iis_start_server	仮想 Web サーバーを起動する	int iis_start_server ( int $server_instance )
iis_start_service	サービス ID で指定したサービスを起動する	int iis_start_service ( string $service_id )
iis_stop_server	仮想 Web サーバーを停止する	int iis_stop_server ( int $server_instance )
iis_stop_service	サービス ID で指定したサービスを停止する	int iis_stop_service ( string $service_id )
image_type_to_extension	画像形式からファイルの拡張子を取得する	string image_type_to_extension ( int $imagetype [, bool $include_dot = TRUE ] )	指定した型に対応する拡張子を文字列で返します。
image_type_to_mime_type	getimagesize, exif_read_data, exif_thumbnail, exif_imagetypeから返される 画像形式のMIMEタイプを取得する	string image_type_to_mime_type ( int $imagetype )	戻り値は次のとおりです。 戻り値の定数 imagetype 戻り値 IMAGETYPE_GIF image/gif IMAGETYPE_JPEG image/jpeg IMAGETYPE_PNG image/png IMAGETYPE_SWF application/x-shockwave-flash IMAGETYPE_PSD image/psd IMAGETYPE_BMP image/bmp IMAGETYPE_TIFF_II (intel byte order) image/tiff IMAGETYPE_TIFF_MM (motorola byte order) image/tiff IMAGETYPE_JPC application/octet-stream IMAGETYPE_JP2 image/jp2 IMAGETYPE_JPX application/octet-stream IMAGETYPE_JB2 application/octet-stream IMAGETYPE_SWC application/x-shockwave-flash IMAGETYPE_IFF image/iff IMAGETYPE_WBMP image/vnd.wap.wbmp IMAGETYPE_XBM image/xbm IMAGETYPE_ICO image/vnd.microsoft.icon
image2wbmp	画像をブラウザあるいはファイルに出力する	bool image2wbmp ( resource $image [, string $filename [, int $threshold ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imageaffine	元の画像を、オプションのクリッピング領域を使ってアフィン変換した画像を返す	resource imageaffine ( resource $image , array $affine [, array $clip ] )	アフィン変換した画像リソースを返します。失敗した場合に FALSE を返します。
imageaffinematrixconcat	二つの行列を連結する (複数の操作を一度に行う)	array imageaffinematrixconcat ( array $m1 , array $m2 )	0 から 5 までのキーに float 値を持つ配列を返します。失敗した場合に FALSE を返します。
imageaffinematrixget	元の画像を、オプションのクリッピング領域を使ってアフィン変換した画像を返す	array imageaffinematrixget ( int $type [, mixed $options ] )	0 から 5 までのキーに float 値を持つ配列を返します。失敗した場合に FALSE を返します。
imagealphablending	イメージのブレンドモードを設定する	bool imagealphablending ( resource $image , bool $blendmode )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imageantialias	アンチエイリアス機能を使用すべきかどうかを判断する	bool imageantialias ( resource $image , bool $enabled )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagearc	部分楕円を描画する	bool imagearc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagechar	水平に文字を描画する	bool imagechar ( resource $image , int $font , int $x , int $y , string $c , int $color )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagecharup	垂直に文字を描画する	bool imagecharup ( resource $image , int $font , int $x , int $y , string $c , int $color )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagecolorallocate	画像で使用する色を作成する	int imagecolorallocate ( resource $image , int $red , int $green , int $blue )	色の ID、あるいは作成に失敗したい場合に FALSE を返します。
imagecolorallocatealpha	画像で使用する色を透過度を指定して作成する	int imagecolorallocatealpha ( resource $image , int $red , int $green , int $blue , int $alpha )	色 ID、あるいは作成に失敗した場合に FALSE を返します。
imagecolorat	ピクセルの色のインデックスを取得する	int imagecolorat ( resource $image , int $x , int $y )	色のインデックスを返します。
imagecolorclosest	指定した色に最も近い色のインデックスを取得する	int imagecolorclosest ( resource $image , int $red , int $green , int $blue )	画像パレット内で、指定した色にいちばん近い色のインデックスを返します。
imagecolorclosestalpha	指定した色+アルファ値に最も近い色のインデックスを取得する	int imagecolorclosestalpha ( resource $image , int $red , int $green , int $blue , int $alpha )	画像パレット内で、指定した色にいちばん近い色のインデックスを返します。
imagecolorclosesthwb	色合い、白、黒を有する色のインデックスを得る	int imagecolorclosesthwb ( resource $image , int $red , int $green , int $blue )	指定した色に最も近い色合い、白、黒を有する色のインデックスを返します。
imagecolordeallocate	イメージの色リソースを開放する	bool imagecolordeallocate ( resource $image , int $color )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagecolorexact	指定した色のインデックスを取得する	int imagecolorexact ( resource $image , int $red , int $green , int $blue )	指定した色の、パレット内でのインデックスを返します。 画像パレット中に色が存在しない場合は -1 を返します。
imagecolorexactalpha	指定した色+アルファ値のインデックスを取得する	int imagecolorexactalpha ( resource $image , int $red , int $green , int $blue , int $alpha )	イメージのパレットにおける、指定した色+アルファ値のインデックスを返します。 指定した色がイメージのパレットに存在しない場合、-1が返されます。
imagecolormatch	パレットイメージの色を True カラーイメージに近づける	bool imagecolormatch ( resource $image1 , resource $image2 )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagecolorresolve	指定した色または出来るだけ近い色のインデックスを得る	int imagecolorresolve ( resource $image , int $red , int $green , int $blue )	色インデックスを返します。
imagecolorresolvealpha	指定した色+アルファ値または最も近い色のインデックスを取得する	int imagecolorresolvealpha ( resource $image , int $red , int $green , int $blue , int $alpha )	色インデックスを返します。
imagecolorset	指定したパレットインデックスの色を設定する	void imagecolorset ( resource $image , int $index , int $red , int $green , int $blue [, int $alpha = 0 ] )	値を返しません。
imagecolorsforindex	カラーインデックスからカラーを取得する	array imagecolorsforindex ( resource $image , int $index )	指定したカラーインデックス index に対して適当な値からなる red、green、blue をキーとする連想配列を返します。
imagecolorstotal	画像パレットの色数を検出する	int imagecolorstotal ( resource $image )	指定した画像パレットの色数を返します。 truecolor 画像の場合は 0 を返します。
imagecolortransparent	透明色を定義する	int imagecolortransparent ( resource $image [, int $color ] )	新しい透明色の ID (指定しなかった場合は現在設定されている ID) を返します。color を指定せず、 さらに現在の透明色も設定されていない場合は -1 を返します。
imageconvolution	div および offset の係数を使用し、3x3 の畳み込み配列を適用する	bool imageconvolution ( resource $image , array $matrix , float $div , float $offset )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagecopy	画像の一部をコピーする	bool imagecopy ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagecopymerge	イメージの一部をコピー、マージする	bool imagecopymerge ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagecopymergegray	グレースケールでイメージの一部をコピー、マージする	bool imagecopymergegray ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagecopyresampled	再サンプリングを行いイメージの一部をコピー、伸縮する	bool imagecopyresampled ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagecopyresized	画像の一部をコピーしサイズを変更する	bool imagecopyresized ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagecreate	パレットを使用する新規画像を作成する	resource imagecreate ( int $width , int $height )	成功した場合に画像リソース ID、エラー時に FALSE を返します。
imagecreatefromgd	GD ファイルまたは URL から新規イメージを生成する	resource imagecreatefromgd ( string $filename )	成功した場合に画像リソース ID、エラー時に FALSE を返します。
imagecreatefromgd2	GD2 ファイルまたは URL から新規イメージを生成する	resource imagecreatefromgd2 ( string $filename )	成功した場合に画像リソース ID、エラー時に FALSE を返します。
imagecreatefromgd2part	GD2 ファイルまたは URL の指定した部分から新規イメージを生成する	resource imagecreatefromgd2part ( string $filename , int $srcX , int $srcY , int $width , int $height )	成功した場合に画像リソース ID、エラー時に FALSE を返します。
imagecreatefromgif	新しい画像をファイルあるいは URL から作成する	resource imagecreatefromgif ( string $filename )	成功した場合に画像リソース ID、エラー時に FALSE を返します。
imagecreatefromjpeg	新しい画像をファイルあるいは URL から作成する	resource imagecreatefromjpeg ( string $filename )	成功した場合に画像リソース ID、エラー時に FALSE を返します。
imagecreatefrompng	新しい画像をファイルあるいは URL から作成する	resource imagecreatefrompng ( string $filename )	成功した場合に画像リソース ID、エラー時に FALSE を返します。
imagecreatefromstring	文字列の中のイメージストリームから新規イメージを作成する	resource imagecreatefromstring ( string $image )	成功時にはイメージリソースが返されます。 イメージの種類がサポートされていない、データのフォーマットが識別できない、 イメージが壊れておりリロードできないなどの場合は FALSE が返されます。
imagecreatefromwbmp	新しい画像をファイルあるいは URL から作成する	resource imagecreatefromwbmp ( string $filename )	成功した場合に画像リソース ID、エラー時に FALSE を返します。
imagecreatefromwebp	新しい画像をファイルあるいは URL から作成する	resource imagecreatefromwebp ( string $filename )	成功した場合に画像リソース ID、エラー時に FALSE を返します。
imagecreatefromxbm	新しい画像をファイルあるいは URL から作成する	resource imagecreatefromxbm ( string $filename )	成功した場合に画像リソース ID、エラー時に FALSE を返します。
imagecreatefromxpm	新しい画像をファイルあるいは URL から作成する	resource imagecreatefromxpm ( string $filename )	成功した場合に画像リソース ID、エラー時に FALSE を返します。
imagecreatetruecolor	TrueColor イメージを新規に作成する	resource imagecreatetruecolor ( int $width , int $height )	成功した場合に画像リソース ID、エラー時に FALSE を返します。
imagecrop	座標とサイズを指定して、画像をクロップする	resource imagecrop ( resource $image , array $rect )	成功した場合にクロップ後の画像リソースを返します。失敗した場合に FALSE を返します。
imagecropauto	利用可能なモードを指定して、画像を自動的にクロップする	resource imagecropauto ( resource $image [, int $mode = -1 [, float $threshold = .5 [, int $color = -1 ]]] )	成功した場合にクロップ後の画像リソースを返します。失敗した場合に FALSE を返します。
imagedashedline	破線を描画する	bool imagedashedline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )	常に true を返します。
imagedestroy	画像を破棄する	bool imagedestroy ( resource $image )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imageellipse	楕円を描画する	bool imageellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagefill	塗り潰す	bool imagefill ( resource $image , int $x , int $y , int $color )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagefilledarc	楕円弧を描画し、塗りつぶす	bool imagefilledarc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color , int $style )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagefilledellipse	塗りつぶされた楕円を描画する	bool imagefilledellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagefilledpolygon	塗りつぶした多角形を描画する	bool imagefilledpolygon ( resource $image , array $points , int $num_points , int $color )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagefilledrectangle	塗りつぶした矩形を描画する	bool imagefilledrectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagefilltoborder	特定色で塗りつぶす	bool imagefilltoborder ( resource $image , int $x , int $y , int $border , int $color )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagefilter	画像にフィルタを適用する	bool imagefilter ( resource $image , int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4 ]]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imageflip	指定したモードで画像を反転させる	bool imageflip ( resource $image , int $mode )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagefontheight	フォントの高さを取得する	int imagefontheight ( int $font )	フォントの高さをピクセルで返します。
imagefontwidth	フォントの幅を取得する	int imagefontwidth ( int $font )	フォントの幅をピクセルで返します。
imageftbbox	freetype2 によるフォントを用いたテキストを囲む箱を取得する	array imageftbbox ( float $size , float $angle , string $fontfile , string $text [, array $extrainfo ] )	imageftbbox() は 8 つの要素からなる配列を返します。 これが、テキストを囲む箱の 4 つの角の座標を表します。 0 左下角の X 座標 1 左下角の Y 座標 2 右下角の X 座標 3 右下角の Y 座標 4 右上角の X 座標 5 右上角の Y 座標 6 左上角の X 座標 7 左上角の Y 座標
imagefttext	FreeType 2 によるフォントを用いてイメージにテキストを描画する	array imagefttext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text [, array $extrainfo ] )	この関数は、長方形の 4 つの角を表す点の配列を返します。 最初が左下の位置で、そこから反時計回りに回ります。 0 左下の x 座標 1 左下の y 座標 2 右下の x 座標 3 右下の y 座標 4 右上の x 座標 5 右上の y 座標 6 左上の x 座標 7 左上の y 座標
imagegammacorrect	GD イメージにガンマ補正を適用する	bool imagegammacorrect ( resource $image , float $inputgamma , float $outputgamma )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagegd	GD イメージをブラウザまたはファイルに出力する	bool imagegd ( resource $image [, string $filename ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagegd2	GD2 イメージをブラウザまたはファイルに出力する	bool imagegd2 ( resource $image [, string $filename [, int $chunk_size [, int $type = IMG_GD2_RAW ]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagegif	画像をブラウザあるいはファイルに出力する	bool imagegif ( resource $image [, string $filename ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagegrabscreen	画面全体をキャプチャする	resource imagegrabscreen ( void )	成功した場合に画像リソースの ID、失敗した場合に FALSE を返します。
imagegrabwindow	ウィンドウをキャプチャする	resource imagegrabwindow ( int $window_handle [, int $client_area = 0 ] )	成功した場合に画像リソースの ID、失敗した場合に FALSE を返します。
imageinterlace	インターレースを有効もしくは無効にする	int imageinterlace ( resource $image [, int $interlace = 0 ] )	画像のインターレースビットが設定されている場合に 1、 それ以外の場合に 0 を返します。
imageistruecolor	画像が truecolor かどうか調べる	bool imageistruecolor ( resource $image )	image が truecolor の場合に TRUE、 それ以外の場合に FALSE を返します。
imagejpeg	画像をブラウザあるいはファイルに出力する	bool imagejpeg ( resource $image [, string $filename [, int $quality ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagelayereffect	アルファブレンディングフラグを設定し、 libgd にバンドルされているレイヤ効果を使用する	bool imagelayereffect ( resource $image , int $effect )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imageline	直線を描画する	bool imageline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imageloadfont	新しいフォントを読み込む	int imageloadfont ( string $file )	フォント ID を返します。これは常に 5 より大きくなり、 組み込みのフォントと衝突することはありません。 エラー時には FALSE を返します。
imagepalettecopy	あるイメージから他のイメージにパレットをコピーする	void imagepalettecopy ( resource $destination , resource $source )	値を返しません。
imagepalettetotruecolor	パレット形式の画像を true color に変換する	bool imagepalettetotruecolor ( resource $src )	変換に成功した場合や、元画像が既に true color だった場合に TRUE を返します。 それ以外の場合に FALSE を返します。
imagepng	PNG イメージをブラウザまたはファイルに出力する	bool imagepng ( resource $image [, string $filename [, int $quality [, int $filters ]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagepolygon	多角形を描画する	bool imagepolygon ( resource $image , array $points , int $num_points , int $color )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagepsbbox	PostScript Type1 フォントを用いてテキスト矩形のバウンディングボックスを指定する	array imagepsbbox ( string $text , resource $font , int $size )	以下の要素を持つ配列を返します。 0 左側の x 座標 1 上側の y 座標 2 右側の x 座標 3 下側の y 座標
imagepsencodefont	フォントの文字エンコードベクトルを変更する	bool imagepsencodefont ( resource $font_index , string $encodingfile )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagepsextendfont	フォントを展開または圧縮する	bool imagepsextendfont ( resource $font_index , float $extend )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagepsfreefont	PostScript Type 1 フォント用メモリを解放する	bool imagepsfreefont ( resource $font_index )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagepsloadfont	ファイルから PostScript Type 1 フォントをロードする	resource imagepsloadfont ( string $filename )	全て正常に処理された場合、有効なフォント ID が返され、後で使用することができます。 それ以外の場合、この関数は FALSE を返します。
imagepsslantfont	フォントを傾ける	bool imagepsslantfont ( resource $font_index , float $slant )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagepstext	PostScript Type1 フォントを用いて画像の上に文字列を描く	array imagepstext ( resource $image , string $text , resource $font_index , int $size , int $foreground , int $background , int $x , int $y [, int $space = 0 [, int $tightness = 0 [, float $angle = 0.0 [, int $antialias_steps = 4 ]]]] )	この関数は、以下の要素からなる配列を返します。 0 左下の x 座標 1 左下の y 座標 2 右上の x 座標 3 右上の y 座標
imagerectangle	矩形を描画する	bool imagerectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagerotate	指定された角度で画像を回転する	resource imagerotate ( resource $image , float $angle , int $bgd_color [, int $ignore_transparent = 0 ] )	回転させた画像のリソースを返します。失敗した場合に FALSE を返します。
imagesavealpha	PNG 画像を保存する際に（単一色の透過設定ではない）完全な アルファチャネル情報を保存するフラグを設定する	bool imagesavealpha ( resource $image , bool $saveflag )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagescale	幅と高さを指定して、画像の縮尺を変更する	resource imagescale ( resource $image , int $new_width [, int $new_height = -1 [, int $mode = IMG_BILINEAR_FIXED ]] )	縮尺を変更した画像リソースを返します。失敗した場合に FALSE を返します。
imagesetbrush	線の描画用にブラシイメージを設定する	bool imagesetbrush ( resource $image , resource $brush )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagesetinterpolation	補間方法を設定する	bool imagesetinterpolation ( resource $image [, int $method = IMG_BILINEAR_FIXED ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagesetpixel	点を生成する	bool imagesetpixel ( resource $image , int $x , int $y , int $color )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagesetstyle	線描画用のスタイルを設定する	bool imagesetstyle ( resource $image , array $style )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagesetthickness	線描画用の線幅を設定する	bool imagesetthickness ( resource $image , int $thickness )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagesettile	塗りつぶし用のイメージを設定する	bool imagesettile ( resource $image , resource $tile )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagestring	文字列を水平に描画する	bool imagestring ( resource $image , int $font , int $x , int $y , string $string , int $color )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagestringup	文字列を垂直に描画する	bool imagestringup ( resource $image , int $font , int $x , int $y , string $string , int $color )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagesx	画像の幅を取得する	int imagesx ( resource $image )	image の幅、あるいはエラー時に FALSE を返します。
imagesy	画像の高さを取得する	int imagesy ( resource $image )	image の高さ、あるいはエラー時に FALSE を返します。
imagetruecolortopalette	TrueColor イメージをパレットイメージに変換する	bool imagetruecolortopalette ( resource $image , bool $dither , int $ncolors )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagettfbbox	TypeType フォントを使用したテキストの bounding box を生成する	array imagettfbbox ( float $size , float $angle , string $fontfile , string $text )	imagettfbbox() は、テキストの bounding box を 作成するための 4 点を表現する 8 個の要素からなる配列を返します。 エラー時には FALSE を返します。 キー 内容 0 左下角の X 座標 1 左下角の Y 座標 2 右下角の X 座標 3 右下角の Y 座標 4 右上角の X 座標 5 右上角の Y 座標 6 左上角の X 座標 7 左上角の Y 座標
imagettftext	TrueType フォントを使用してテキストを画像に書き込む	array imagettftext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text )	テキストの境界を 構成する 4 点を表す 8 個の要素を有する配列を返します。 返される点は左下、右下、右上、左上の順番となります。 点の座標は、角度によらず text に関する相対座標として表されます。 つまり、"左上"は、text を水平に見た場合の左上の隅を表します。 エラー時には FALSE を返します。
imagetypes	この PHP がサポートしている画像形式を返す	int imagetypes ( void )	画像形式に対応するビットフィールドで、 PHP に組み込まれている GD がサポートする画像形式を返します。 返されるビットは次のとおりです。 IMG_GIF | IMG_JPG | IMG_PNG | IMG_WBMP | IMG_XPM。
imagewbmp	画像をブラウザあるいはファイルに出力する	bool imagewbmp ( resource $image [, string $filename [, int $foreground ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagewebp	WebP 画像をブラウザあるいはファイルに出力する	bool imagewebp ( resource $image , string $filename )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imagexbm	XBM 画像をブラウザあるいはファイルに出力する	bool imagexbm ( resource $image , string $filename [, int $foreground ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_8bit	8 ビット文字列を quoted-printable 文字列に変換する	string imap_8bit ( string $string )	quoted-printable 文字列を返します。
imap_alerts	発生した IMAP 警告メッセージを返す	array imap_alerts ( void )	全ての IMAP 警告メッセージの配列、あるいは警告メッセージが発生していない場合は FALSE を返します。
imap_append	指定されたメールボックスに文字列メッセージを追加する	bool imap_append ( resource $imap_stream , string $mailbox , string $message [, string $options = NULL [, string $internal_date = NULL ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_base64	BASE64 でエンコードされたテキストをデコードする	string imap_base64 ( string $text )	デコードしたメッセージを文字列で返します。
imap_binary	8 ビット文字列を base64 文字列に変換する	string imap_binary ( string $string )	base64 エンコードされた文字列を返します。
imap_body	メッセージ本文を読む	string imap_body ( resource $imap_stream , int $msg_number [, int $options = 0 ] )	指定したメッセージの本文を文字列で返します。
imap_bodystruct	指定したメッセージの指定した body セクションの構造を読み込む	object imap_bodystruct ( resource $imap_stream , int $msg_number , string $section )	オブジェクトの情報を返します。オブジェクトの構造やプロパティについての詳細は imap_fetchstructure() を参照ください。
imap_check	現在のメールボックスをチェックする	object imap_check ( resource $imap_stream )	以下のプロパティをもつオブジェクトの情報を返します。 Date - 現在のシステム時刻を &raquo;&nbsp;RFC2822 にしたがってフォーマットしたもの。 Driver - メールボックスにアクセスする際に使用するプロトコル: POP3、IMAP、NNTP Mailbox - メールボックスの名前。 Nmsgs - メールボックス内のメッセージの数。 Recent - メールボックス内の新規メッセージの数。
imap_clearflag_full	メッセージのフラグをクリアする	bool imap_clearflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_close	IMAP ストリームをクローズする	bool imap_close ( resource $imap_stream [, int $flag = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_create	imap_createmailbox() のエイリアス
imap_createmailbox	新しいメールボックスを作る	bool imap_createmailbox ( resource $imap_stream , string $mailbox )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_delete	現在のメールボックスから削除するメッセージに印を付ける	bool imap_delete ( resource $imap_stream , int $msg_number [, int $options = 0 ] )	Returns TRUE.
imap_deletemailbox	メールボックスを削除する	bool imap_deletemailbox ( resource $imap_stream , string $mailbox )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_errors	発生したすべての IMAP エラーを返す	array imap_errors ( void )	この関数は、最後に imap_errors() コールを行ってから、またはそのページの処理を開始してから 発生した全ての IMAP エラーメッセージの配列を返します。 エラーメッセージが存在しない場合には FALSE を返します。
imap_expunge	削除用にマークされたすべてのメッセージを削除する	bool imap_expunge ( resource $imap_stream )	TRUE を返します。
imap_fetch_overview	指定したメッセージのヘッダ情報の概要を読む	array imap_fetch_overview ( resource $imap_stream , string $sequence [, int $options = 0 ] )	オブジェクトの配列を返します。各要素が、 それぞれひとつのメッセージのヘッダを表します。 オブジェクトで定義されるのは、存在するプロパティのみです。 以下のプロパティがあります。 subject - メッセージの題名(subject) from - 送信者 to - 受信者 date - 送信日 message_id - Message-ID references - このメッセージ ID への参照です in_reply_to - このメッセージ ID への返信です size - サイズ（バイト数） uid - メールボックスにおけるこのメッセージの UID msgno - メールボックスにおけるこのメッセージのシーケンス番号 recent - このメッセージには recent フラグが立てられています flagged - フラグが立てられています answered - 返信済みフラグが立てられています deleted - 削除フラグが立てられています seen - 既読フラグが立てられています draft - 草稿フラグが立てられています
imap_fetchbody	メッセージ本文中の特定のセクションを取り出す	string imap_fetchbody ( resource $imap_stream , int $msg_number , string $section [, int $options = 0 ] )	指定されたメッセージ本文中の特定のセクションをテキスト文字列で返します。
imap_fetchheader	メッセージのヘッダを返す	string imap_fetchheader ( resource $imap_stream , int $msg_number [, int $options = 0 ] )	指定したメッセージのヘッダをテキスト文字列で返します。
imap_fetchmime	メッセージの特定のセクションに対する MIME ヘッダを取り出します	string imap_fetchmime ( resource $imap_stream , int $msg_number , string $section [, int $options = 0 ] )	指定したメッセージの本文の特定のセクションの MIME ヘッダを文字列として返します。
imap_fetchstructure	特定のメッセージの構造を読み込む	object imap_fetchstructure ( resource $imap_stream , int $msg_number [, int $options = 0 ] )	オブジェクトを返します。このオブジェクトには、 MIME の添付の各要素に類似のオブジェクトとしてエンベロープ、 内部の日付、サイズ、フラグそして本体が含まれます。 返されるオブジェクトの構造は次のようになります。
imap_fetchtext	imap_body() のエイリアス
imap_gc	IMAP キャッシュをクリアする	bool imap_gc ( resource $imap_stream , int $caches )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_get_quota	クオータレベルの設定、メールボックス毎の使用状況を取得する	array imap_get_quota ( resource $imap_stream , string $quota_root )	指定したメールボックスの limit と usage をキーとした整数値を配列として返します。 limit の値は、このメールボックスで最大使用可能な大きさを表します。 usage の値は、このメールボックスの現在の使用状況を示します。 失敗した場合に FALSE を返します。
imap_get_quotaroot	ユーザー単位のクォータ設定を取得する	array imap_get_quotaroot ( resource $imap_stream , string $quota_root )	指定したユーザーのメールボックスに関連する整数値を配列で返します。 すべての値にはリソース名に基づいたキーがつけられており、 usage および limit 値を保持する配列が関連付けられています。
imap_getacl	与えられたメールボックスの ACL を取得する	array imap_getacl ( resource $imap_stream , string $mailbox )	"folder" => "acl" 形式の連想配列を返します。
imap_getmailboxes	メールボックスのリストを読み込み、各ボックスに関する詳細な情報を返す	array imap_getmailboxes ( resource $imap_stream , string $ref , string $pattern )	メールボックス情報を有するオブジェクトの配列を返します。各オブジェクトには、 メールボックスの完全な名前である name、 このメールボックスの階層の区切りを示す属性 delimiter、 そして attributes が存在します。 attributes はビットマスクであり、 次のものについて調べることができます。 LATT_NOINFERIORS - このメールボックスには 「子供」がいるかいないかはわかりません（このボックスの中にメールボックスはありません）。 このメールボックスに対して imap_createmailbox() をコールしても動作しません。 LATT_NOSELECT - 単なるコンテナであり、 メールボックスではありません - これをオープンすることはできません。 LATT_MARKED - このメールボックスにはマークがつけられています。 これは、最後に確認したとき以降に新たなメッセージが到着しているかもしれないということを意味します。 すべての IMAP サーバーがこの機能を提供しているとは限りません。 LATT_UNMARKED - このメールボックスにはマークがつけられておらず、 新たなメッセージを含んでいません。 MARKED あるいは UNMARKED が提供されている場合は、 その IMAP サーバーがこのメールボックスに対してマーク機能を提供しているとみなせます。
imap_getsubscribed	購読中の全メールボックスの一覧を取得する	array imap_getsubscribed ( resource $imap_stream , string $ref , string $pattern )	メールボックス情報を有するオブジェクトの配列を返します。各オブジェクトには、 メールボックスの完全な名前である name、 このメールボックスの階層の区切りを示す属性 delimiter、 そして attributes が存在します。 attributes はビットマスクであり、 次のものについて調べることができます。 LATT_NOINFERIORS - このメールボックスには 「子供」はいません（このボックスの中にメールボックスはありません）。 LATT_NOSELECT - 単なるコンテナであり、 メールボックスではありません - これをオープンすることはできません。 LATT_MARKED - このメールボックスにはマークが つけられています。UW-IMAPD でのみ使用されます。 LATT_UNMARKED - このメールボックスにはマークが つけられていません。UW-IMAPD でのみ使用されます。
imap_header	imap_headerinfo() のエイリアス
imap_headerinfo	メッセージヘッダを読み込む	object imap_headerinfo ( resource $imap_stream , int $msg_number [, int $fromlength = 0 [, int $subjectlength = 0 [, string $defaulthost = NULL ]]] )	以下のプロパティをもつオブジェクトを返します。 toaddress - 完全な to: 行。最大 1024 文字。 to - To: 行から、次のプロパティを含むオブジェクトの配列を返します。 personal、adl、 mailbox および host fromaddress - 完全な from: 行。最大 1024 文字。 from - From: 行から、次のプロパティを含むオブジェクトの配列を返します。 personal、adl、 mailbox および host ccaddress - 完全な cc: 行。最大 1024 文字。 cc - Cc: 行から、次のプロパティを含むオブジェクトの配列を返します。 personal、adl、 mailbox および host bccaddress - 完全な bcc: 行。最大 1024 文字。 bcc - Bcc: 行から、次のプロパティを含むオブジェクトの配列を返します。 personal、adl、 mailbox および host reply_toaddress - 完全な Reply-To: 行。最大 1024 文字。 reply_to - Reply-To: 行から、次のプロパティを含むオブジェクトの配列を返します。 personal、adl、 mailbox および host senderaddress - 完全な sender: 行。最大 1024 文字。 sender - Sender: 行から、次のプロパティを含むオブジェクトの配列を返します。 personal、adl、 mailbox および host return_pathaddress - 完全な Return-Path: 行。最大 1024 文字。 return_path - Return-Path: 行から、次のプロパティを含むオブジェクトの配列を返します。 personal、 adl、mailbox および host remail - date - ヘッダにあるメッセージの日付。 Date - date と同じ。 subject - メッセージの件名。 Subject - subject と同じ。 in_reply_to - message_id - newsgroups - followup_to - references - Recent - 最近の既読メッセージは R、 最新の未読メッセージは N、 最新でないメッセージは ' '。 Unseen - 最新でない未読メッセージは U、 既読、あるいは最新の未読メッセージは ' '。 Flagged - フラグがたっている場合は F、 そうでない場合は ' '。 Answered - 返信した場合は A、 していない場合は ' '。 Deleted - 削除された場合は D、 されていない場合は ' '。 Draft - 草稿である場合は X、 そうでない場合は ' '。 Msgno - メッセージ番号。 MailDate - Size - メッセージのサイズ。 udate - メールメッセージの日付を Unix time で表したもの。 fetchfrom - from 行を fromlength 文字に適合させたもの。 fetchsubject - subject 行を subjectlength 文字に適合させたもの。
imap_headers	メールボックス内のすべてのメッセージのヘッダを返す	array imap_headers ( resource $imap_stream )	ヘッダ情報でフォーマットされた文字列の配列を返します。1 つの メールメッセージ毎に 1 つの要素が格納されます。
imap_last_error	ページリクエスト時に生じた直近の IMAP エラーを返す	string imap_last_error ( void )	現在のページに生じた直近の IMAP エラーメッセージの全文を返します。 エラーメッセージが存在しない場合は FALSE を返します。
imap_list	メールボックスのリストを読み込む	array imap_list ( resource $imap_stream , string $ref , string $pattern )	メールボックスの名前を含む配列を返します。
imap_listmailbox	imap_list() のエイリアス
imap_listscan	指定したテキストにマッチするメールボックスの一覧を返す	array imap_listscan ( resource $imap_stream , string $ref , string $pattern , string $content )	content をテキストに持つメールボックスの名前を 配列で返します。
imap_listsubscribed	imap_lsub() のエイリアス
imap_lsub	購読しているすべてのメールボックスの一覧を得る	array imap_lsub ( resource $imap_stream , string $ref , string $pattern )	購読しているすべてのメールボックスの配列を返します。
imap_mail_compose	指定したエンベロープおよびボディセクションに基づいて MIME メッセージを作成する	string imap_mail_compose ( array $envelope , array $body )	MIME メッセージを返します。
imap_mail_copy	指定されたメッセージをメールボックスにコピーする	bool imap_mail_copy ( resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_mail_move	指定されたメッセージをメールボックスに移動する	bool imap_mail_move ( resource $imap_stream , string $msglist , string $mailbox [, int $options = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_mail	e-mail メッセージを送信する	bool imap_mail ( string $to , string $subject , string $message [, string $additional_headers = NULL [, string $cc = NULL [, string $bcc = NULL [, string $rpath = NULL ]]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_mailboxmsginfo	現在のメールボックスに関する情報を得る	object imap_mailboxmsginfo ( resource $imap_stream )	以下のプロパティを有するオブジェクトを返します。 Mailbox のプロパティ Date 最終変更日 (現在の日付時刻) Driver ドライバ Mailbox メールボックスの名前 Nmsgs メッセージ数 Recent 最近のメッセージの数 Unread 未読のメッセージの数 Deleted 削除されたメッセージの数 Size メールボックスのサイズ
imap_mime_header_decode	MIME ヘッダ要素をデコードする	array imap_mime_header_decode ( string $text )	デコードされた要素は、オブジェクトの配列で返されます。 各オブジェクトは、二つのプロパティ charset と text を有しています。
imap_msgno	指定した UID のメッセージ番号を返す	int imap_msgno ( resource $imap_stream , int $uid )	指定した uid のメッセージ番号を返します。
imap_num_msg	現在のメールボックスのメッセージ数を取得する	int imap_num_msg ( resource $imap_stream )	現在のメールボックスのメッセージ数を返します。
imap_num_recent	現在のメールボックスにある新規メッセージ数を取得する	int imap_num_recent ( resource $imap_stream )	現在のメールボックスにある新しいメッセージの数を返します。
imap_open	メールボックスへの IMAP ストリームをオープンする	resource imap_open ( string $mailbox , string $username , string $password [, int $options = 0 [, int $n_retries = 0 [, array $params = NULL ]]] )	成功した場合は IMAP ストリームを、失敗した場合は FALSE を返します。
imap_ping	IMAP ストリームがアクティブかどうかを調べる	bool imap_ping ( resource $imap_stream )	ストリームがまだ有効であれば TRUE を、そうでなければ FALSE を返します。
imap_qprint	quoted-printable 文字列を 8 ビット文字列に変換する	string imap_qprint ( string $string )	8 ビット文字列を返します。
imap_rename	imap_renamemailbox() のエイリアス
imap_renamemailbox	メールボックスの名前を変更する	bool imap_renamemailbox ( resource $imap_stream , string $old_mbox , string $new_mbox )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_reopen	新規メールボックスへの IMAP ストリームを再度オープンする	bool imap_reopen ( resource $imap_stream , string $mailbox [, int $options = 0 [, int $n_retries = 0 ]] )	ストリームを再度オープンした場合に TRUE、 それ以外の場合に FALSE を返します。
imap_rfc822_parse_adrlist	アドレス文字列を解釈します	array imap_rfc822_parse_adrlist ( string $address , string $default_host )	オブジェクトの配列を返します。オブジェクトのプロパティは以下のとおりです。
imap_rfc822_parse_headers	文字列からメールヘッダを解釈する	object imap_rfc822_parse_headers ( string $headers [, string $defaulthost = "UNKNOWN" ] )	imap_header() が返すオブジェクトと似たものを返します。 フラグおよび他の要素は IMAP サーバーから取得するいう点が異なります。
imap_rfc822_write_address	指定したメールボックス、ホスト、個人情報を、 電子メールアドレスとして適当な形式にして返す	string imap_rfc822_write_address ( string $mailbox , string $host , string $personal )	&raquo;&nbsp;RFC822 の定義に基づき 適切にフォーマットされた電子メールアドレスを返します。
imap_savebody	指定した本文部をファイルに保存する	bool imap_savebody ( resource $imap_stream , mixed $file , int $msg_number [, string $part_number = "" [, int $options = 0 ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_scan	imap_listscan() のエイリアス
imap_scanmailbox	imap_listscan() のエイリアス
imap_search	指定した検索条件にマッチするメッセージを配列として返す	array imap_search ( resource $imap_stream , string $criteria [, int $options = SE_FREE [, string $charset = NIL ]] )	メッセージ番号あるいは UID の配列を返します。
imap_set_quota	指定したメールボックスにクォータを設定する	bool imap_set_quota ( resource $imap_stream , string $quota_root , int $quota_limit )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_setacl	指定したメールボックスの ACL を設定する	bool imap_setacl ( resource $imap_stream , string $mailbox , string $id , string $rights )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_setflag_full	メッセージにフラグをセットする	bool imap_setflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options = NIL ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_sort	メッセージヘッダの配列をソートする	array imap_sort ( resource $imap_stream , int $criteria , int $reverse [, int $options = 0 [, string $search_criteria = NULL [, string $charset = NIL ]]] )	指定したパラメータでソートしたメッセージ番号の配列を返します。
imap_status	現在のメールボックス以外のメールボックスのステータス情報を返す	object imap_status ( resource $imap_stream , string $mailbox , int $options )	この関数は、ステータス情報を含むオブジェクトを返します。このオブジェクトには messages、 recent、unseen、 uidnext および uidvalidity というプロパティが含まれます。
imap_subscribe	メールボックスを購読する	bool imap_subscribe ( resource $imap_stream , string $mailbox )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_thread	スレッド化したメッセージのツリーを返す	array imap_thread ( resource $imap_stream [, int $options = SE_FREE ] )	imap_thread() は、REFERENCES でスレッド化したメッセージのツリーを含む連想配列を返します。 エラー時には FALSE を返します。
imap_timeout	imap タイムアウトを設定あるいは取得する	mixed imap_timeout ( int $timeout_type [, int $timeout = -1 ] )	timeout が設定されている場合は、 この関数は成功した場合に TRUE、失敗した場合に FALSE を返します。
imap_uid	指定したメッセージシーケンス番号の UID を返す	int imap_uid ( resource $imap_stream , int $msg_number )	指定したメッセージの UID を返します。
imap_undelete	削除マークがついているメッセージのマークをはずす	bool imap_undelete ( resource $imap_stream , int $msg_number [, int $flags = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_unsubscribe	メールボックスの購読をやめる	bool imap_unsubscribe ( resource $imap_stream , string $mailbox )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
imap_utf7_decode	修正版 UTF-7 エンコードされた文字列をデコードする	string imap_utf7_decode ( string $text )	text と同じ内容の文字を ISO-8859-1 でエンコード した文字列を返します。text に修正版 UTF-7 として 不正な文字が含まれていた場合、あるいは text に ISO-8859-1 文字セットの範囲外の文字が含まれていた場合には FALSE を返します。
imap_utf7_encode	ISO-8859-1 文字列を修正版 UTF-7 テキストに変換する	string imap_utf7_encode ( string $data )	data を修正版 UTF-7 でエンコードした文字列を返します。 このエンコーディングについては &raquo;&nbsp;RFC 2060, section 5.1.3 で定義されています (元の UTF-7 は &raquo;&nbsp;RFC1642 で定義されています)。
imap_utf8	MIME エンコードされたテキストを UTF-8 に変換する	string imap_utf8 ( string $mime_encoded_text )	UTF-8 エンコードされた文字列を返します。
implode	配列要素を文字列により連結する	string implode ( string $glue , array $pieces )	すべての配列要素の順序を変えずに、各要素間に glue 文字列をはさんで 1 つの文字列にして返します。
import_request_variables	GET/POST/Cookie 変数をグローバルスコープにインポートする	bool import_request_variables ( string $types [, string $prefix ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
in_array	配列に値があるかチェックする	bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )	配列で needle が見つかった場合に TRUE、それ以外の場合は、FALSE を返します。
inclued_get_data	inclued データを取得する	array inclued_get_data ( void )	inclued データを返します。
inet_ntop	パックされたインターネットアドレスを、人間が読める形式に変換する	string inet_ntop ( string $in_addr )	アドレスを文字列で表したものを返します。失敗した場合に FALSE を返します。
inet_pton	人間が読める形式の IP アドレスを、パックされた in_addr 形式に変換する	string inet_pton ( string $address )	指定した address を in_addr 形式で表したものを返します。 構文的に無効な address (ドットのない IPv4 アドレスやコロンのない IPv6 アドレスなど) を指定した場合は FALSE を返します。
ingres_autocommit_state	接続が autocommit を使っているかどうかを調べる	bool ingres_autocommit_state ( resource $link )	autocommit が有効な場合に TRUE、無効な場合に FALSE を返します。
ingres_autocommit	autocommit をオンまたはオフに切替える	bool ingres_autocommit ( resource $link )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ingres_charset	文字セットを返す	string ingres_charset ( resource $link )	II_CHARSETxx の文字列を返します。値を取得できなかった場合は NULL を返します。
ingres_close	Ingres データベース接続を閉じる	bool ingres_close ( resource $link )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ingres_commit	トランザクションをコミットする	bool ingres_commit ( resource $link )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ingres_connect	Ingres データベースへの接続をオープンする	resource ingres_connect ([ string $database [, string $username [, string $password [, array $options ]]]] )	成功時に Ingres リンクリソース、失敗した場合に FALSE を返します。
ingres_cursor	指定した結果リソースのカーソル名を取得する	string ingres_cursor ( resource $result )	アクティブなカーソルの名前を含む文字列を返します。 アクティブなカーソルがない場合は NULL が返されます。
ingres_errno	直近に発生した ingres エラー番号を取得する	int ingres_errno ([ resource $link ] )	直近のエラー番号を整数値で返します。エラーが発生していない場合は 0 を返します。
ingres_error	直近に発生したエラーのエラーメッセージを取得する	string ingres_error ([ resource $link ] )	直近のエラーの内容を文字列で返します。エラーが発生していない場合は NULL を返します。
ingres_errsqlstate	直近に発生した SQLSTATE エラーコードを取得する	string ingres_errsqlstate ([ resource $link ] )	直近の SQLSTATE を文字列で返します。エラーが発生していない場合は NULL を返します。
ingres_escape_string	クエリで使うために特殊文字をエスケープする	string ingres_escape_string ( resource $link , string $source_string )	エスケープしたデータを含む文字列を返します。
ingres_execute	プリペアドクエリを実行する	bool ingres_execute ( resource $result [, array $params [, string $types ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ingres_fetch_array	1 行分の結果を配列に取得する	array ingres_fetch_array ( resource $result [, int $result_type ] )	取得したレコード(行)に対応する配列を返します。 レコードがもうない場合は FALSE を返します。
ingres_fetch_assoc	1 行分の結果を連想配列に取得する	array ingres_fetch_assoc ( resource $result )	取得した行に対応する連想配列を返します。 行がもうない場合は FALSE を返します。
ingres_fetch_object	1 行分の結果をオブジェクトとして取得する	object ingres_fetch_object ( resource $result [, int $result_type ] )	取得したレコード(行)をオブジェクトとして返します。 レコードがもうない場合は FALSE を返します。
ingres_fetch_proc_return	プロシージャコールからの返り値を取得する	int ingres_fetch_proc_return ( resource $result )	返り値がある場合は integer 、それ以外の場合は NULL を返します。
ingres_fetch_row	1 行分の結果を数値添字配列として取得する	array ingres_fetch_row ( resource $result )	取得したレコード(行)を有する配列を返します。 レコードがもうない場合は FALSE を返します。
ingres_field_length	フィールド長を得る	int ingres_field_length ( resource $result , int $index )	フィールドの長さを返します。
ingres_field_name	クエリ結果においてフィールド名を得る	string ingres_field_name ( resource $result , int $index )	クエリ結果のフィールド名を返します。 失敗した場合に FALSE を返します。
ingres_field_nullable	フィールドに NULL 値を設定可能かどうか調べる	bool ingres_field_nullable ( resource $result , int $index )	ingres_field_nullable() は、フィールドに NULL が設定可能な場合に TRUE、設定できない場合に FALSE を返します。
ingres_field_precision	フィールドの精度を得る	int ingres_field_precision ( resource $result , int $index )	フィールドの精度を返します。
ingres_field_scale	フィールドのスケールを得る	int ingres_field_scale ( resource $result , int $index )	フィールドのスケールを返します。
ingres_field_type	クエリ結果においてフィールドの型を得る	string ingres_field_type ( resource $result , int $index )	ingres_field_type() はクエリ結果のフィールド型、 失敗した場合に FALSE を返します。返される型は、例えば、 IIAPI_BYTE_TYPE, IIAPI_CHA_TYPE, IIAPI_DTE_TYPE, IIAPI_FLT_TYPE, IIAPI_INT_TYPE, IIAPI_VCH_TYPE になります。 これらの型のいくつかは、フィールド長に応じて複数の SQL 型を マップすることが可能です( ingres_field_length() を参照ください)。例えば IIAPI_FLT_TYPE は、float4 または float8 とすることが可能です。詳細な情報については、Ingres OpenAPI User Guide の Appendix "Data Types" を参照ください。
ingres_free_result	結果 ID に関連づけられたリソースを解放する	bool ingres_free_result ( resource $result )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ingres_next_error	次の Ingres エラーを取得する	bool ingres_next_error ([ resource $link ] )	ingres_next_error() は、 取得できるエラーがまだ残っている場合に TRUE を返します。 もうエラーがない場合は FALSE を返します。
ingres_num_fields	直近のクエリにより返されたフィールドの数を得る	int ingres_num_fields ( resource $result )	フィールドの数を返します。
ingres_num_rows	クエリが変更したり返したりしたレコードの数を取得する	int ingres_num_rows ( resource $result )	delete, insert, update クエリの場合、 ingres_num_rows() は、そのクエリにより作用された行 (レコード)の数を返します。その他のクエリの場合、 ingres_num_rows() はクエリ結果のレコード数を返します。
ingres_pconnect	Ingres データベースへの持続的接続をオープンする	resource ingres_pconnect ([ string $database [, string $username [, string $password [, array $options ]]]] )	成功した際に Ingres リンクリソース、失敗した場合に FALSE を返します。
ingres_prepare	後で実行するためのクエリを準備する	mixed ingres_prepare ( resource $link , string $query )	ingres_prepare() はクエリの結果 ID を返します。 ingres_execute() でクエリを実行するときに、これを使います。 エラーが発生したかどうかを知るには、 ingres_errno() 、 ingres_error() あるいは ingres_errsqlstate() を使います。
ingres_query	Ingres に SQL クエリを送信する	mixed ingres_query ( resource $link , string $query [, array $params [, string $types ]] )	ingres_query() は、 成功した場合にクエリ結果 ID、それ以外の場合に FALSE を返します。 エラーが発生したかどうかを知るには ingres_errno() 、 ingres_error() あるいは ingres_errsqlstate() を使用します。
ingres_result_seek	データを取得する前に行の位置を設定する	bool ingres_result_seek ( resource $result , int $position )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ingres_rollback	トランザクションをロールバックする	bool ingres_rollback ( resource $link )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ingres_set_environment	環境を設定して出力オプションを制御する	bool ingres_set_environment ( resource $link , array $options )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ingres_unbuffered_query	未バッファ SQL クエリを Ingres に送信する	mixed ingres_unbuffered_query ( resource $link , string $query [, array $params [, string $types ]] )	ingres_unbuffered_query() は、行を取得した場合にクエリ結果 ID を返します。行がない場合、たとえば INSERT や UPDATE あるいは DELETE 文を実行した場合は FALSE を返します。 エラーが発生したかどうかを知るには ingres_errno() 、 ingres_error() あるいは ingres_errsqlstate() を使用します。
ini_alter	ini_set() のエイリアス
ini_get_all	すべての設定オプションを得る	array ini_get_all ([ string $extension [, bool $details = true ]] )	ディレクティブ名をキーとする連想配列を返します。
ini_get	設定オプションの値を得る	string ini_get ( string $varname )	成功した場合に設定オプションの値、 null 値の場合は空の文字列を返します。 その設定オプションが存在しない場合は FALSE を返します。
ini_restore	設定オプションの値を元に戻す	void ini_restore ( string $varname )	値を返しません。
ini_set	設定オプションの値を設定する	string ini_set ( string $varname , string $newvalue )	成功した場合に元の値、失敗した場合に FALSE を返します。
inotify_add_watch	初期化済みの inotify インスタンスに監視対象を追加する	int inotify_add_watch ( resource $inotify_instance , string $pathname , int $mask )	返り値は、(inotify インスタンス内で) 一意な監視記述子です。
inotify_init	inotify インスタンスを初期化する	resource inotify_init ( void )	ストリームリソース、あるいはエラー時に FALSE を返します。
inotify_queue_len	待機中のイベントがある場合に正の数を返す	int inotify_queue_len ( resource $inotify_instance )	待機中のイベントがある場合に正の数を返します。
inotify_read	inotify インスタンスからイベントを読み込む	array inotify_read ( resource $inotify_instance )	inotify イベントの配列、を返します。待機中のイベントがなく、かつ inotify_instance が非ブロックモードである場合は FALSE を返します。各イベントは次のキーを持つ配列となります。 wd は、 inotify_add_watch() が返す監視記述子です mask は、events のビットマスクです cookie は、接続関連のイベント (たとえば IN_MOVE_FROM や IN_MOVE_TO) の一意な ID です name は、ファイル名 (たとえば 監視対象のディレクトリ内でファイルが変更された場合) です
inotify_rm_watch	既存の監視を inotify インスタンスから削除する	bool inotify_rm_watch ( resource $inotify_instance , int $watch_descriptor )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
interface_exists	インターフェイスが宣言されているかどうかを確認する	bool interface_exists ( string $interface_name [, bool $autoload = true ] )	interface_name で与えられたインターフェイスが宣言されていれば TRUE を返します。 そうでなければ FALSE を返します。
intl_error_name	指定したエラーコードに対応する名前を取得する	string intl_error_name ( int $error_code )	エラーコード定数と同じ名前の文字列を返します。
intl_get_error_code	直近のエラーコードを取得する	int intl_get_error_code ( void )	直近の API 関数のコールが返すエラーコードを返します。
intl_get_error_message	直近のエラーの説明を取得する	string intl_get_error_message ( void )	直近の API 関数のコールで発生したエラーの説明を返します。
intl_is_failure	指定したエラーコードが失敗を表すかどうかを調べる	bool intl_is_failure ( int $error_code )	そのコードが何らかの失敗を意味する場合に TRUE、 成功あるいは警告を意味する場合に FALSE を返します。
intval	変数の整数としての値を取得する	int intval ( mixed $var [, int $base = 10 ] )	成功時は var の整数値、失敗時は 0。 空の配列の場合は 0、空でない配列の場合は 1 を返します。
ip2long	ドット表記の (IPv4) IP アドレスを、適切なアドレスに変換する	int ip2long ( string $ip_address )	IPv4 アドレス、あるいは ip_address が不正な形式の場合に FALSE を返します。
iptcembed	バイナリ IPTC データを JPEG イメージに埋めこむ	mixed iptcembed ( string $iptcdata , string $jpeg_file_name [, int $spool ] )	成功し、かつ spool フラグが 2 より小さい場合は、JPEG は文字列では返されません。 エラー時には FALSE を返します。
iptcparse	バイナリの IPTC ブロックのタグをパースする	array iptcparse ( string $iptcblock )	タグマーカーをインデックスとし、その値を保持する配列を返します。 エラー時や IPTC データが見つからなかったときは FALSE を返します。
is_a	オブジェクトがこのクラスのものであるか、このクラスをその親クラスのひとつとしているかどうかを調べる	bool is_a ( object $object , string $class_name [, bool $allow_string = FALSE ] )	オブジェクトがこのクラスのものであるか、 あるいはこのクラスをその親クラスのひとつとしている場合に TRUE、それ以外の場合に FALSE を返します。
is_array	変数が配列かどうかを検査する	bool is_array ( mixed $var )	var が 配列型 の場合 TRUE、 そうでない場合 FALSE を返します。
is_bool	変数が boolean であるかを調べる	bool is_bool ( mixed $var )	var が boolean である場合に TRUE 、それ以外の場合に FALSE を返します。
is_callable	引数が、関数としてコール可能な構造であるかどうかを調べる	bool is_callable ( callable $name [, bool $syntax_only = false [, string &$callable_name ]] )	name がコール可能な場合に TRUE、 それ以外の場合に FALSE を返します。
is_dir	ファイルがディレクトリかどうかを調べる	bool is_dir ( string $filename )	ファイルが存在して、かつそれがディレクトリであれば TRUE、それ以外の場合は FALSE を返します。
is_double	is_float() のエイリアス
is_executable	ファイルが実行可能かどうかを調べる	bool is_executable ( string $filename )	ファイルが存在し、かつそれが実行可能な場合に TRUE、 エラー時に FALSE を返します。
is_file	通常ファイルかどうかを調べる	bool is_file ( string $filename )	ファイルが存在し、かつそれが通常のファイルである場合に TRUE、 それ以外の場合に FALSE を返します。
is_finite	値が有限の数値であるかどうかを判定する	bool is_finite ( float $val )	val が このプラットフォーム上の PHP の float 型で有効な範囲内の数である場合に TRUE、 それ以外の場合に FALSE を返します。
is_float	変数の型が float かどうか調べる	bool is_float ( mixed $var )	もし var が float 型 の場合 TRUE、 そうでない場合は FALSE を返します。
is_infinite	値が無限大であるかどうかを判定する	bool is_infinite ( float $val )	val が無限大である場合に TRUE、 そうでない場合に FALSE を返します。
is_int	変数が整数型かどうかを検査する	bool is_int ( mixed $var )	もし var が 整数型 の場合 TRUE、 そうでない場合は FALSE を返します。
is_integer	is_int() のエイリアス
is_link	ファイルがシンボリックリンクかどうかを調べる	bool is_link ( string $filename )	filename が存在し、かつシンボリックリンクであれば TRUE、 それ以外の場合に FALSE を返します。
is_long	is_int() のエイリアス
is_nan	値が数値でないかどうかを判定する	bool is_nan ( float $val )	val が '非数値 (not a number)' の場合に TRUE、そうでない場合に FALSE を返します。
is_null	変数が NULL かどうか調べる	bool is_null ( mixed $var )	var が null の場合に TRUE、 それ以外の場合に FALSE を返します。
is_numeric	変数が数字または数値形式の文字列であるかを調べる	bool is_numeric ( mixed $var )	var が数値または数値形式の文字列である場合に TRUE、それ以外の場合に FALSE を返します。
is_object	変数がオブジェクトかどうかを検査する	bool is_object ( mixed $var )	もし var が object 型 の場合 TRUE、 そうでない場合は FALSE を返します。
is_readable	ファイルが存在し、読み込み可能であるかどうかを知る	bool is_readable ( string $filename )	filename で指定したファイルあるいはディレクトリが存在し、 それが読み込み可能であれば TRUE、それ以外の場合に FALSE を返します。
is_real	is_float() のエイリアス
is_resource	変数がリソースかどうかを調べる	bool is_resource ( mixed $var )	var が resource の場合に TRUE、 それ以外の場合に FALSE を返します。
is_scalar	変数がスカラかどうかを調べる	bool is_scalar ( mixed $var )	var がスカラの場合に TRUE、 それ以外の場合に FALSE を返します。
is_soap_fault	SOAP コールが失敗したかどうかを調べる	bool is_soap_fault ( mixed $object )	エラー時に TRUE、それ以外の場合に FALSE を返します。
is_string	変数の型が文字列かどうかを調べる	bool is_string ( mixed $var )	var の型が string である場合に TRUE、それ以外の場合に FALSE を返します。
is_subclass_of	あるオブジェクトが指定したクラスのサブクラスに属するかどうかを調べる	bool is_subclass_of ( mixed $object , string $class_name [, bool $allow_string = TRUE ] )	この関数は、オブジェクト object が superclass のサブクラスであるクラスに属する場合に TRUE、その他の場合に FALSE を返します。
is_tainted	文字列が汚染されているかどうかを調べる	bool is_tainted ( string $string )	文字列が汚染されている場合に TRUE、それ以外の場合に FALSE を返します。
is_uploaded_file	HTTP POST でアップロードされたファイルかどうかを調べる	bool is_uploaded_file ( string $filename )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
is_writable	ファイルが書き込み可能かどうかを調べる	bool is_writable ( string $filename )	filename が存在して書き込み可能な場合に TRUE を返します。
is_writeable	is_writable() のエイリアス
isset	変数がセットされていること、そして NULL でないことを検査する	bool isset ( mixed $var [, mixed $... ] )	var が存在して NULL 以外の値をとれば TRUE、 そうでなければ FALSE を返します。
iterator_apply	ユーザー関数をイテレータのすべての要素でコールする	int iterator_apply ( Traversable $iterator , callable $function [, array $args ] )	イテレータの要素数を返します。
iterator_count	イテレータにある要素をカウントする	int iterator_count ( Traversable $iterator )	iterator の要素数を返します。
iterator_to_array	イテレータを配列にコピーする	array iterator_to_array ( Traversable $iterator [, bool $use_keys = true ] )	iterator の要素を含む配列を返します。
java_last_exception_clear	直近の例外をクリアする	void java_last_exception_clear ( void )	値を返しません。
java_last_exception_get	直近の Java 例外を取得する	object java_last_exception_get ( void )	例外オブジェクトを返します。
JDDayOfWeek	曜日を返す	mixed jddayofweek ( int $julianday [, int $mode = CAL_DOW_DAYNO ] )	グレゴリウス暦の曜日を表す数値あるいは文字列を返します。
JDMonthName	月の名前を返す	string jdmonthname ( int $julianday , int $mode )	指定したユリウス積算日と calendar にもとづく月名を返します。
JDToFrench	ユリウス積算日をフランス革命暦(共和暦)に変換する	string jdtofrench ( int $juliandaycount )	フランス革命暦の日付を "月/日/年" 形式の文字列で返します。
JDToGregorian	ユリウス積算日をグレゴリウス日に変換する	string jdtogregorian ( int $julianday )	グレゴリウス暦の日付を "月/日/年" 形式の文字列で返します。
jdtojewish	ユリウス積算日をユダヤ暦に変換する	string jdtojewish ( int $juliandaycount [, bool $hebrew = false [, int $fl = 0 ]] )	ユダヤ暦の日付を "月/日/年" 形式の文字列で返します。
JDToJulian	ユリウス積算日をユリウス暦に変換する	string jdtojulian ( int $julianday )	ユリウス暦の日付を "月/日/年" 形式の文字列で返します。
jdtounix	ユリウス歴を Unix タイムスタンプに変換する	int jdtounix ( int $jday )	指定したユリウス積算日の開始時の Unix タイムスタンプを返します。
JewishToJD	ユダヤ暦の日付けをユリウス積算日に変換する	int jewishtojd ( int $month , int $day , int $year )	指定したユダヤ暦の日付に対応するユリウス積算日を返します。
join	implode() のエイリアス
jpeg2wbmp	JPEG イメージファイルから WBMP イメージファイルに変換する	bool jpeg2wbmp ( string $jpegname , string $wbmpname , int $dest_height , int $dest_width , int $threshold )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
json_decode	JSON 文字列をデコードする	mixed json_decode ( string $json [, bool $assoc = false [, int $depth = 512 [, int $options = 0 ]]] )	json でエンコードされたデータを、適切な PHP の型として返します。 true、false および null (大文字小文字を区別しません) はそれぞれ TRUE、FALSE そして NULL として返されます。 json のデコードに失敗したり エンコードされたデータが再帰制限を超えているなどの場合、NULL を返します。
json_encode	値を JSON 形式にして返す	string json_encode ( mixed $value [, int $options = 0 [, int $depth = 512 ]] )	成功した場合に、JSON エンコードされた文字列を返します。 失敗した場合に FALSE を返します。
json_last_error_msg	直近の json_encode() や json_decode() の呼び出しのエラー文字列を返すl	string json_last_error_msg ( void )	成功した場合にエラーメッセージを返します。パラメータが間違っている場合は NULL を返します。
json_last_error	直近に発生したエラーを返す	int json_last_error ( void )	整数値を返します。これは、次の定数のいずれかとなります。
judy_type	Return the type of a Judy array	int judy_type ( Judy $array )	Return an integer corresponding to a Judy type.
judy_version	Return or print the current PHP Judy version	string judy_version ( void )	Return a string of the PHP Judy version.
JulianToJD	ユリウス暦をユリウス積算日に変換する	int juliantojd ( int $month , int $day , int $year )	指定したユリウス暦の日付に対応するユリウス積算日を返します。
kadm5_chpass_principal	プリンシパルのパスワードを変更する	bool kadm5_chpass_principal ( resource $handle , string $principal , string $password )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
kadm5_create_principal	指定したパラメータで、kerberos のプリンシパルを作成する	bool kadm5_create_principal ( resource $handle , string $principal [, string $password [, array $options ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
kadm5_delete_principal	kerberos プリンシパルを削除する	bool kadm5_delete_principal ( resource $handle , string $principal )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
kadm5_destroy	管理サーバーへの接続を閉じ、関連するすべてのリソースを開放する	bool kadm5_destroy ( resource $handle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
kadm5_flush	Kerberos データベースに対するすべての変更を取り消す	bool kadm5_flush ( resource $handle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
kadm5_get_policies	Kerberos データベースから、すべてのポリシーを取得する	array kadm5_get_policies ( resource $handle )	成功した場合はポリシーの配列、失敗した場合に FALSE を返します。
kadm5_get_principal	Kerberos データベースから、プリンシパルのエントリを取得する	array kadm5_get_principal ( resource $handle , string $principal )	成功した場合は、以下のキーを含む連想配列を返します。 KADM5_PRINCIPAL、KADM5_PRINC_EXPIRE_TIME、 KADM5_PW_EXPIRATION、KADM5_ATTRIBUTES、KADM5_MAX_LIFE、KADM5_MOD_NAME、 KADM5_MOD_TIME、KADM5_KVNO、KADM5_POLICY、KADM5_MAX_RLIFE、 KADM5_LAST_SUCCESS、KADM5_LAST_FAILED、KADM5_FAIL_AUTH_COUNT 失敗した場合に FALSE を返します。
kadm5_get_principals	Kerberos データベースから、すべてのプリンシパルを取得する	array kadm5_get_principals ( resource $handle )	成功した場合はプリンシパルの配列、失敗した場合に FALSE を返します。
kadm5_init_with_password	KADM5 ライブラリへの接続をオープンし、必要なステータス情報を初期化する	resource kadm5_init_with_password ( string $admin_server , string $realm , string $principal , string $password )	成功した場合は KADM5 ハンドル、失敗した場合に FALSE を返します。
kadm5_modify_principal	kerberos プリンシパルを、指定したパラメータで変更する	bool kadm5_modify_principal ( resource $handle , string $principal , array $options )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
key_exists	array_key_exists() のエイリアス
key	配列からキーを取り出す	mixed key ( array &$array )	key() 関数は、内部ポインタが現在指している配列要素のキーを返します。 ポインタを移動することはありません。内部ポインタが要素リストの末尾にいる場合や配列が空の場合は key() は NULL を返します。
krsort	配列をキーで逆順にソートする	bool krsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ksort	配列をキーでソートする	bool ksort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
lcfirst	文字列の最初の文字を小文字にする	string lcfirst ( string $str )	変換後の文字列を返します。
lcg_value	複合線形合同法	float lcg_value ( void )	(0, 1) の範囲の疑似乱数を、浮動小数点数で返します。
lchgrp	シンボリックリンクのグループ所有権を変更する	bool lchgrp ( string $filename , mixed $group )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
lchown	シンボリックリンクの所有者を変更する	bool lchown ( string $filename , mixed $user )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ldap_8859_to_t61	8859 文字を t61 文字に変換する	string ldap_8859_to_t61 ( string $value )	value を t61 に変換したものを返します。
ldap_add	LDAP ディレクトリにエントリを付加する	bool ldap_add ( resource $link_identifier , string $dn , array $entry )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ldap_bind	LDAP ディレクトリにバインドする	bool ldap_bind ( resource $link_identifier [, string $bind_rdn = NULL [, string $bind_password = NULL ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ldap_close	ldap_unbind() のエイリアス
ldap_compare	指定した DN のエントリで見付かった属性の値を比較する	mixed ldap_compare ( resource $link_identifier , string $dn , string $attribute , string $value )	value がマッチする場合に TRUE、その他の場合に FALSE、エラーの場合に -1 を返します。
ldap_connect	LDAP サーバーへ接続する	resource ldap_connect ([ string $hostname = NULL [, int $port = 389 ]] )	成功した場合に正の LDAP リンク ID 、エラーの場合に FALSE を返します。OpenLDAP 2.x.x を使用している場合は、 ldap_connect() は常に resource を返しますが、実際には接続せずにパラメータの初期化だけを行います。 実際に接続するのは次に ldap_* 関数がコールされた際で、これは 通常は ldap_bind() です。
ldap_control_paged_result_response	LDAP ページネーションクッキーを取得する	bool ldap_control_paged_result_response ( resource $link , resource $result [, string &$cookie [, int &$estimated ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ldap_control_paged_result	LDAP ページネーション制御情報を送信する	bool ldap_control_paged_result ( resource $link , int $pagesize [, bool $iscritical = false [, string $cookie = "" ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ldap_count_entries	検索結果のエントリ数を数える	int ldap_count_entries ( resource $link_identifier , resource $result_identifier )	結果のエントリ数を返します。エラーの場合は FALSE を返します。
ldap_delete	ディレクトリからエントリを削除する	bool ldap_delete ( resource $link_identifier , string $dn )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ldap_dn2ufn	DN をユーザーに分かりやすい名前のフォーマットに変換する	string ldap_dn2ufn ( string $dn )	ユーザーにわかりやすい形式の名前を返します。
ldap_err2str	LDAP のエラー番号をエラーメッセージ文字列に変換する	string ldap_err2str ( int $errno )	エラーメッセージを表す文字列を返します。
ldap_errno	直近の LDAP コマンドの LDAP エラー番号を返す	int ldap_errno ( resource $link_identifier )	このリンクに関する直近の LDAP コマンドの LDAP エラー番号を返します。
ldap_error	直近の LDAP コマンドの LDAP エラーメッセージを返す	string ldap_error ( resource $link_identifier )	エラーメッセージ文字列を返します。
ldap_explode_dn	DN を構成要素ごとに分割する	array ldap_explode_dn ( string $dn , int $with_attrib )	すべての DN 要素を配列で返します。 この配列の最初の要素のキーは count で、 これは返される値の数を表します。次の要素は、DN の数値添字配列となります。
ldap_first_attribute	最初の属性を返す	string ldap_first_attribute ( resource $link_identifier , resource $result_entry_identifier )	成功した場合にエントリの最初の属性、エラーの場合に FALSE を返します。
ldap_first_entry	最初の結果 ID を返す	resource ldap_first_entry ( resource $link_identifier , resource $result_identifier )	成功時に最初のエントリに関する結果エントリ ID、エラーの場合に FALSE を返します。
ldap_first_reference	最初のリファレンスを返す	resource ldap_first_reference ( resource $link , resource $result )
ldap_free_result	結果メモリを開放する	bool ldap_free_result ( resource $result_identifier )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ldap_get_attributes	検索結果エントリから属性を得る	array ldap_get_attributes ( resource $link_identifier , resource $result_entry_identifier )	成功時に完全なエントリ情報を多次元配列で返します。エラーの場合、 FALSE を返します。
ldap_get_dn	結果エントリから DN を得る	string ldap_get_dn ( resource $link_identifier , resource $result_entry_identifier )	結果エントリの DN を返します。エラーの場合、FALSEを返します。
ldap_get_entries	全ての結果エントリを得る	array ldap_get_entries ( resource $link_identifier , resource $result_identifier )	成功時に完全な結果情報を多次元配列で返します。エラーの場合に FALSE を返します。
ldap_get_option	指定したオプションの現在の値を得る	bool ldap_get_option ( resource $link_identifier , int $option , mixed &$retval )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ldap_get_values_len	結果エントリから全てのバイナリ値を得る	array ldap_get_values_len ( resource $link_identifier , resource $result_entry_identifier , string $attribute )	成功時に属性の値を配列で返し、エラー時に FALSE を返します。 個々の値は、配列インデックスによりアクセスします。最初のインデックスは、0 です。 値の数は、結果の配列の "count" という要素で知ることができます。
ldap_get_values	結果エントリから全ての値を得る	array ldap_get_values ( resource $link_identifier , resource $result_entry_identifier , string $attribute )	成功した場合、指定した属性に関する値を配列を返します。エラーの場合は FALSE を返します。値の数を調べるには、結果の配列の "count" という要素を確認します。個々の値にアクセスするには、 整数値のインデックスを指定して配列にアクセスします。 最初のインデックスは 0 となります。
ldap_list	単一階層の検索を行う	resource ldap_list ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )	検索結果 ID を返します。エラーの場合は、FALSE を返します。
ldap_mod_add	現在の属性に属性を追加する	bool ldap_mod_add ( resource $link_identifier , string $dn , array $entry )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ldap_mod_del	現在の属性から属性を削除する	bool ldap_mod_del ( resource $link_identifier , string $dn , array $entry )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ldap_mod_replace	属性を新規の値に置換する	bool ldap_mod_replace ( resource $link_identifier , string $dn , array $entry )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ldap_modify	LDAP エントリを修正する	bool ldap_modify ( resource $link_identifier , string $dn , array $entry )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ldap_next_attribute	結果における次の属性を得る	string ldap_next_attribute ( resource $link_identifier , resource $result_entry_identifier )	成功した場合、エントリにおける次の属性を返します。エラー時に FALSE を返します。
ldap_next_entry	次の結果エントリを得る	resource ldap_next_entry ( resource $link_identifier , resource $result_entry_identifier )	ldap_first_entry() によりエントリが読み始められた 結果において次のエントリに関するエントリID を返します。 これ以上結果のエントリがない場合は、FALSEを返します。
ldap_next_reference	次のリファレンスを得る	resource ldap_next_reference ( resource $link , resource $entry )
ldap_parse_reference	参照エントリから情報を展開する	bool ldap_parse_reference ( resource $link , resource $entry , array &$referrals )
ldap_parse_result	結果から情報を展開する	bool ldap_parse_result ( resource $link , resource $result , int &$errcode [, string &$matcheddn [, string &$errmsg [, array &$referrals ]]] )
ldap_read	エントリを読み込む	resource ldap_read ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )	検索結果 ID を返します。エラーの場合は、FALSE を返します。
ldap_rename	エントリ名を修正する	bool ldap_rename ( resource $link_identifier , string $dn , string $newrdn , string $newparent , bool $deleteoldrdn )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ldap_sasl_bind	SASL を使用して LDAP ディレクトリにバインドする	bool ldap_sasl_bind ( resource $link [, string $binddn = NULL [, string $password = NULL [, string $sasl_mech = NULL [, string $sasl_realm = NULL [, string $sasl_authc_id = NULL [, string $sasl_authz_id = NULL [, string $props = NULL ]]]]]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ldap_search	LDAP ツリーを探索する	resource ldap_search ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )	検索結果 ID を返します。エラーの場合は、FALSE を返します。
ldap_set_option	指定したオプションの値を設定する	bool ldap_set_option ( resource $link_identifier , int $option , mixed $newval )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ldap_set_rebind_proc	参照先を再バインドするためのコールバック関数を設定する	bool ldap_set_rebind_proc ( resource $link , callable $callback )
ldap_sort	LDAP 結果エントリをソートする	bool ldap_sort ( resource $link , resource $result , string $sortfilter )
ldap_start_tls	TLS を開始する	bool ldap_start_tls ( resource $link )
ldap_t61_to_8859	t61 文字を 8859 文字に変換する	string ldap_t61_to_8859 ( string $value )
ldap_unbind	LDAP ディレクトリへのバインドを解除する	bool ldap_unbind ( resource $link_identifier )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
levenshtein	二つの文字列のレーベンシュタイン距離を計算する	int levenshtein ( string $str1 , string $str2 )	この関数は、引数で指定した二つの文字列のレーベンシュタイン距離を返します。 引数文字列の一つが 255 文字の制限より長い場合に -1 を返します。
libxml_clear_errors	libxmlエラーハンドラをクリアする	void libxml_clear_errors ( void )	値を返しません。
libxml_disable_entity_loader	外部エンティティの読み込み機能を無効にする	bool libxml_disable_entity_loader ([ bool $disable = true ] )	変更前の値を返します。
libxml_get_errors	エラー配列を取得する	array libxml_get_errors ( void )	エラーがバッファにある場合に LibXMLError オブジェクトの配列、 それ以外の場合に空の配列を返します。
libxml_get_last_error	libxmlから直近のエラーを取得する	LibXMLError libxml_get_last_error ( void )	エラーがバッファにある場合にLibXMLError オブジェクト、 それ以外の場合に FALSE を返します。
libxml_set_external_entity_loader	デフォルトの外部エンティティローダーを変更する	void libxml_set_external_entity_loader ( callable $resolver_function )	値を返しません。
libxml_set_streams_context	次のlibxmlドキュメントの読込／書きこみのためにストリームコンテキストを設定する	void libxml_set_streams_context ( resource $streams_context )	値を返しません。
libxml_use_internal_errors	libxmlエラーを無効にし、ユーザーが必要に応じてエラー情報を取得できるようにする	bool libxml_use_internal_errors ([ bool $use_errors = false ] )	この関数は、 use_errorsの前の値を返します。
link	ハードリンクを作成する	bool link ( string $target , string $link )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
linkinfo	リンクに関する情報を取得する	int linkinfo ( string $path )	linkinfo() は、lstat システムコールで返された Unix C 言語の stat 構造体の st_dev フィールドを返します。 0 を返し、エラーの場合に FALSE を返します。
list	配列と同様の形式で、複数の変数への代入を行う	array list ( mixed $varname [, mixed $... ] )	代入した配列を返します。
localeconv	数値に関するフォーマット情報を得る	array localeconv ( void )	localeconv() は、 setlocale() で設定された現在のロケールに基づきデータを返します。 返される連想配列は、次のフィールドを有します。 配列要素 説明 decimal_point 小数点文字 thousands_sep 千毎の区切り文字 grouping 数値集合を有する配列 int_curr_symbol 国際通貨記号 (すなわち、USD) currency_symbol ローカルな通貨記号 (すなわち、$) mon_decimal_point 通貨用の小数点文字 mon_thousands_sep 通貨用の千毎の区切り文字 mon_grouping 通貨集合を有する配列 positive_sign 正の値を表す記号 negative_sign 負の値を表す記号 int_frac_digits 国際分割桁 frac_digits ローカルな分割桁 p_cs_precedes currency_symbol が正の値を前に置く場合にTRUE、後に置く場合に FALSE p_sep_by_space 正の値から currency_symbol を1文字の空白で区切る場合にTRUE、 そうでない場合にFALSE n_cs_precedes currency_symbol が負の値を前に置く場合にTRUE、後に置く場合に FALSE n_sep_by_space 負の値から currency_symbol を1文字の空白で区切る場合にTRUE、 そうでない場合にFALSE p_sign_posn 0 - 量および通貨記号を括る括弧 1 - 量および通貨記号の前に置く符号文字列 2 - 量および通貨記号の後に置く符号文字列 3 - 通貨記号の直前に置く符号文字列 4 - 通貨記号の直後に置く符号文字列 n_sign_posn 0 - 量および通貨記号を括る括弧 1 - 量および通貨記号の前に置く符号文字列 2 - 量および通貨記号の後に置く符号文字列 3 - 通貨記号の直前に置く符号文字列 4 - 通貨記号の直後に置く符号文字列
localtime	ローカルタイムを得る	array localtime ([ int $timestamp = time() [, bool $is_associative = false ]] )
log	自然対数	float log ( float $arg [, float $base = M_E ] )	base を指定した場合はそれを底とする arg の対数、指定しない場合は自然対数を返します。
log10	底が 10 の対数	float log10 ( float $arg )	底を 10 とする arg の対数を返します。
log1p	値がゼロに近い時にでも精度を保つ方法で計算した log(1 + number) を返す	float log1p ( float $number )	log(1 + number) を返します。
long2ip	(IPv4) インターネットアドレスをインターネット標準ドット表記に変換する	string long2ip ( string $proper_address )	インターネットの IP アドレスを表す文字列を返します。
lstat	ファイルあるいはシンボリックリンクの情報を取得する	array lstat ( string $filename )	lstat() が返す配列の内容については stat() のマニュアルをご覧ください。 この関数の動作は stat() 関数と同じですが、 パラメータ filename がシンボリックリンクであった場合に、 シンボリック先のファイルのステータスではなく、 シンボリックリンクのステータスが返されるところが異なります。
ltrim	文字列の最初から空白 (もしくはその他の文字) を取り除く	string ltrim ( string $str [, string $charlist ] )	この関数は文字列の最初から空白文字を取り除き、 取り除かれた文字列を返します。2番目のパラメータを指定しない場合、 ltrim() は以下の文字を削除します。 " " (ASCII 32 (0x20)), 通常の空白。 "\t" (ASCII 9 (0x09)), タブ。 "\n" (ASCII 10 (0x0A)), 改行。 "\r" (ASCII 13 (0x0D)), 復帰。 "\0" (ASCII 0 (0x00)), NUL バイト。 "\x0B" (ASCII 11 (0x0B)), 垂直タブ。
lzf_compress	LZF 圧縮を行う	string lzf_compress ( string $data )	圧縮されたデータを返します。エラー時には FALSE を返します。
lzf_decompress	LZF 圧縮を伸長する	string lzf_decompress ( string $data )	伸長したデータを返します。エラー時には FALSE を返します。
lzf_optimized_for	LZF 拡張モジュールの最適化指定を取得する	int lzf_optimized_for ( void )	LZF が速度に最適化されている場合に 1、圧縮率に最適化されている場合に 0 を返します。
m_checkstatus	トランザクションが完了したかどうかを確かめる	int m_checkstatus ( resource $conn , int $identifier )
m_completeauthorizations	キューの中の認証済み件数を数え、その ID の配列を返す	int m_completeauthorizations ( resource $conn , int &$array )	What the function returns, first on success, then on failure. See also the &return.success; entity
m_connect	MCVE との接続を確立する	int m_connect ( resource $conn )
m_connectionerror	接続が失敗した理由をテキストで取得する	string m_connectionerror ( resource $conn )
m_deletetrans	MCVE_CONN 構造体から、指定したトランザクションを削除する	bool m_deletetrans ( resource $conn , int $identifier )
m_destroyconn	接続および MCVE_CONN 構造体を破壊する	bool m_destroyconn ( resource $conn )	TRUE を返します。
m_destroyengine	IP/SSL 接続に関連付けられたメモリを開放する	void m_destroyengine ( void )	値を返しません。
m_getcell	カンマ区切りの応答から、カラム名を指定してセルを取得する	string m_getcell ( resource $conn , int $identifier , string $column , int $row )
m_getcellbynum	カンマ区切りの応答から、カラム番号を指定してセルを取得する	string m_getcellbynum ( resource $conn , int $identifier , int $column , int $row )
m_getcommadelimited	MCVE が返すデータを、もとのカンマ区切り形式のままで取得する	string m_getcommadelimited ( resource $conn , int $identifier )
m_getheader	カンマ区切りの応答から、カラム名を取得する	string m_getheader ( resource $conn , int $identifier , int $column_num )
m_initconn	MCVE_CONN 構造体を作成し、初期化する	resource m_initconn ( void )	MCVE_CONN リソースを返します。
m_initengine	IP/SSL 通信のためのクライアントの準備をする	int m_initengine ( string $location )
m_iscommadelimited	応答がカンマ区切りかどうかを調べる	int m_iscommadelimited ( resource $conn , int $identifier )
m_maxconntimeout	API が MCVE への接続を試みる時間の最大値	bool m_maxconntimeout ( resource $conn , int $secs )
m_monitor	MCVE との通信 (データの送受信) を非ブロックモードで行う	int m_monitor ( resource $conn )
m_numcolumns	カンマ区切りの応答の中のカラム数を返す	int m_numcolumns ( resource $conn , int $identifier )
m_numrows	カンマ区切りの応答の中の行数を返す	int m_numrows ( resource $conn , int $identifier )
m_parsecommadelimited	カンマ区切りの応答をパースし、m_getcell などが動作するようにする	int m_parsecommadelimited ( resource $conn , int $identifier )
m_responsekeys	このトランザクションの応答パラメータとして使用することが可能な キーを表す文字列の配列を返す	array m_responsekeys ( resource $conn , int $identifier )
m_responseparam	カスタム応答パラメータを取得する	string m_responseparam ( resource $conn , int $identifier , string $key )
m_returnstatus	トランザクションが成功したかどうかを確かめる	int m_returnstatus ( resource $conn , int $identifier )
m_setblocking	接続モードを、ブロックモードあるいは非ブロックモードに設定する	int m_setblocking ( resource $conn , int $tf )
m_setdropfile	Drop-File への接続方法を設定する	int m_setdropfile ( resource $conn , string $directory )
m_setip	IP での接続方法を設定する	int m_setip ( resource $conn , string $host , int $port )
m_setssl_cafile	サーバー証明書を検証するための SSL CA (Certificate Authority) ファイルを設定する	int m_setssl_cafile ( resource $conn , string $cafile )
m_setssl_files	サーバーがクライアント証明書による検証を要求している場合に、証明書のキーファイルを設定する	int m_setssl_files ( resource $conn , string $sslkeyfile , string $sslcertfile )
m_setssl	SSL での接続方法を設定する	int m_setssl ( resource $conn , string $host , int $port )
m_settimeout	(トランザクション単位の) 最大の時間を設定する	int m_settimeout ( resource $conn , int $seconds )
m_sslcert_gen_hash	SSL クライアント証明書の検証のためのハッシュを作成する	string m_sslcert_gen_hash ( string $filename )
m_transactionssent	送信バッファが空かどうかを確かめる	int m_transactionssent ( resource $conn )
m_transinqueue	クライアントキューの中のトランザクション数を返す	int m_transinqueue ( resource $conn )
m_transkeyval	トランザクションにキー/値のペアを追加する。transparam() の代替関数	int m_transkeyval ( resource $conn , int $identifier , string $key , string $value )
m_transnew	新しいトランザクションを開始する	int m_transnew ( resource $conn )
m_transsend	トランザクションを終了し、送信する	int m_transsend ( resource $conn , int $identifier )
m_uwait	x マイクロ秒だけ待つ	int m_uwait ( int $microsecs )
m_validateidentifier	指定したトランザクションについて、ID の検証を行うかどうか	int m_validateidentifier ( resource $conn , int $tf )
m_verifyconnection	接続の検証を行うために PING を行うかどうかを設定する	bool m_verifyconnection ( resource $conn , int $tf )
m_verifysslcert	サーバーの ssl 証明書を検証するかどうかを設定する	bool m_verifysslcert ( resource $conn , int $tf )
magic_quotes_runtime	set_magic_quotes_runtime() のエイリアス
mail	メールを送信する	bool mail ( string $to , string $subject , string $message [, string $additional_headers [, string $additional_parameters ]] )	メール送信が受け入れられた場合に TRUE 、それ以外の場合に FALSE を返します。
mailparse_determine_best_xfer_encoding	最も適したエンコーディングを取得する	string mailparse_determine_best_xfer_encoding ( resource $fp )	mbstring モジュールがサポートする文字エンコーディングのいずれかを返します。
mailparse_msg_create	mime メールリソースを作成する	resource mailparse_msg_create ( void )	メッセージのパースに使用するハンドルを返します。
mailparse_msg_extract_part_file	メッセージセクションを展開/デコードする	string mailparse_msg_extract_part_file ( resource $mimemail , mixed $filename [, callable $callbackfunc ] )	callbackfunc が NULL でない場合は、 成功時に TRUE を返します。
mailparse_msg_extract_part	メッセージセクションを展開/デコードする	void mailparse_msg_extract_part ( resource $mimemail , string $msgbody [, callable $callbackfunc ] )	値を返しません。
mailparse_msg_extract_whole_part_file	ヘッダを含むメッセージセクションを、transfer encoding をデコードせずに展開する	string mailparse_msg_extract_whole_part_file ( resource $mimemail , string $filename [, callable $callbackfunc ] )
mailparse_msg_free	MIME リソースを解放する	bool mailparse_msg_free ( resource $mimemail )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mailparse_msg_get_part_data	メッセージに関する情報の連想配列を返す	array mailparse_msg_get_part_data ( resource $mimemail )
mailparse_msg_get_part	MIME メッセージの指定したセクションに関するハンドルを返す	resource mailparse_msg_get_part ( resource $mimemail , string $mimesection )
mailparse_msg_get_structure	指定したメッセージ内の MIME セクション名の配列を返す	array mailparse_msg_get_structure ( resource $mimemail )
mailparse_msg_parse_file	ファイルをパースする	resource mailparse_msg_parse_file ( string $filename )	構造を表す MIME リソース、あるいはエラー時に FALSE を返します。
mailparse_msg_parse	データをパースし、バッファに追加する	bool mailparse_msg_parse ( resource $mimemail , string $data )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mailparse_rfc822_parse_addresses	RFC 822 準拠のアドレスをパースする	array mailparse_rfc822_parse_addresses ( string $addresses )	各受信者について以下のキーをもつ連想配列の配列を返します。 display 表示用の受信者名。この部分が設定されていない場合は、 address と同じ値となります。 address メールアドレス。 is_group 受信者がニュースグループである場合に TRUE、そうでない場合に FALSE。
mailparse_stream_encode	ソースファイルポインタからストリームデータを取得し、 エンコーディングを適用し、出力ファイルポインタに書き込む	bool mailparse_stream_encode ( resource $sourcefp , resource $destfp , string $encoding )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mailparse_uudecode_all	ファイルポインタからデータをスキャンし、uuencode されたファイルを展開する	array mailparse_uudecode_all ( resource $fp )	ファイル名の情報を含む連想配列の配列を返します。 filename 作成された一時ファイルへのパス。 origfilename もとのファイル名。uuencode されたパートにのみ存在します。 最初の filename エントリがメッセージ本文、次のエントリがデコードされた uuencode ファイルとなります。
main	main() のダミー
max	最大値を返す	mixed max ( array $values )	max() は、パラメータとして渡した値の中で 数値として最も大きいものを返します。 同じ大きさの値が複数あった場合は、最初にあらわれたものを返します。
maxdb_affected_rows	直前の MaxDB の操作で変更された行数を取得する	int maxdb_affected_rows ( resource $link )	ゼロより大きい整数の場合は、変更された行数あるいは取得された行数を表します。 ゼロの場合は、UPDATE ステートメントで行が更新されなかった、 WHERE 句に一致する行がなかった、あるいはクエリが実行されなかったなどを表します。 -1 の場合は、変更された行数が取得できなかったことを表します。
maxdb_autocommit	データベースの変更内容の自動コミット機能を有効あるいは無効にする	bool maxdb_autocommit ( resource $link , bool $mode )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_bind_param	maxdb_stmt_bind_param() のエイリアス
maxdb_bind_result	maxdb_stmt_bind_result() のエイリアス
maxdb_change_user	指定したデータベース接続のユーザーを変更する	bool maxdb_change_user ( resource $link , string $user , string $password , string $database )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_character_set_name	データベース接続のデフォルトの文字セットを返す	string maxdb_character_set_name ( resource $link )	現在の接続のデフォルトの文字セットを、ascii あるいは unicode で返します。
maxdb_client_encoding	maxdb_character_set_name() のエイリアス
maxdb_close_long_data	maxdb_stmt_close_long_data() のエイリアス
maxdb_close	事前にオープンされたデータベース接続を閉じる	bool maxdb_close ( resource $link )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_commit	現在のトランザクションをコミットする	bool maxdb_commit ( resource $link )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_connect_errno	直近の接続コールのエラーコードを返す	int maxdb_connect_errno ( void )	直近の maxdb_connect() のコールのエラーコードを返します。 ゼロの場合は、エラーが発生しなかったことを意味します。
maxdb_connect_error	直近の接続エラーについての説明を文字列で返す	string maxdb_connect_error ( void )	エラーについての文字列を返します。 エラーが発生しなかった場合は空の文字列を返します。
maxdb_connect	MaxDB サーバーへの新しい接続をオープンする	resource maxdb_connect ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]] )	MaxDB サーバーへの接続を表す文字列、あるいは接続に失敗した場合に FALSE を返します。
maxdb_data_seek	結果ポインタを、結果の任意の行に移動する	bool maxdb_data_seek ( resource $result , int $offset )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_debug	デバッグ操作を行う	void maxdb_debug ( string $debug )	maxdb_debug() は、何も値を返しません。
maxdb_disable_reads_from_master	マスタからの読み込みを無効にする	bool maxdb_disable_reads_from_master ( resource $link )
maxdb_disable_rpl_parse	RPL のパースを無効にする	bool maxdb_disable_rpl_parse ( resource $link )
maxdb_dump_debug_info	デバッグ情報をログに出力する	bool maxdb_dump_debug_info ( resource $link )
maxdb_embedded_connect	組み込み MaxDB サーバーへの接続をオープンする	resource maxdb_embedded_connect ([ string $dbname ] )
maxdb_enable_reads_from_master	マスタからの読み込みを有効にする	bool maxdb_enable_reads_from_master ( resource $link )
maxdb_enable_rpl_parse	RPL のパースを有効にする	bool maxdb_enable_rpl_parse ( resource $link )
maxdb_errno	直近の関数コールのエラーコードを返す	int maxdb_errno ( resource $link )	直近のコールのエラーコードの値を返します。 ゼロの場合は、エラーが発生しなかったことを意味します。
maxdb_error	直近のエラーについて説明する文字列を返す	string maxdb_error ( resource $link )	エラーを表す文字列を返します。 エラーが発生しなかった場合は空の文字列を返します。
maxdb_escape_string	maxdb_real_escape_string() のエイリアス
maxdb_execute	maxdb_stmt_execute() のエイリアス
maxdb_fetch_array	結果の行を連想配列、数値添字配列あるいはその両方で取得する	mixed maxdb_fetch_array ( resource $result [, int $resulttype ] )	取得した行に対応する配列、あるいは結果セットに行がもうない場合に NULL を返します。
maxdb_fetch_assoc	結果の行を連想配列として取得する	array maxdb_fetch_assoc ( resource $result )	取得した行に対応する配列、あるいは結果セットに行がもうない場合に NULL を返します。
maxdb_fetch_field_direct	単一のフィールドのメタデータを取得する	mixed maxdb_fetch_field_direct ( resource $result , int $fieldnr )	フィールド定義情報を含むリソースを返します。 指定した fieldnr に対応するフィールド情報が存在しない場合は FALSE を返します。
maxdb_fetch_field	結果セットの次のフィールドを返す	mixed maxdb_fetch_field ( resource $result )	フィールド定義の情報を含むリソースを返します。 フィールド情報が取得できない場合には FALSE を返します。
maxdb_fetch_fields	結果セット内のフィールドを表すリソースの配列を返す	mixed maxdb_fetch_fields ( resource $result )	フィールド定義の情報を含む、リソースの配列を返します。 フィールド情報が存在しない場合には FALSE を返します。
maxdb_fetch_lengths	結果セットの現在の行のカラムの長さを返す	array maxdb_fetch_lengths ( resource $result )	各カラムの長さ (終端の null 文字を含まない) を表す整数値の配列、 あるいはエラー時には FALSE を返します。
maxdb_fetch_object	結果セットの現在の行をオブジェクトとして返す	object maxdb_fetch_object ( object $result )	取得した行に対応するオブジェクトを返します。行がもう存在しない場合には NULL を返します。
maxdb_fetch_row	結果の行を数値添字の配列として取得する	mixed maxdb_fetch_row ( resource $result )	maxdb_fetch_row() は、取得した行に対応する配列を返します。 結果セットに行がもうない場合には NULL を返します。
maxdb_fetch	maxdb_stmt_fetch() のエイリアス
maxdb_field_count	直近のクエリのカラム数を返す	int maxdb_field_count ( resource $link )	結果セットのフィールド数を表す整数値を返します。
maxdb_field_seek	結果ポインタを、指定したフィールドオフセットに移動する	bool maxdb_field_seek ( resource $result , int $fieldnr )	maxdb_field_seek() は、 フィールドカーソルの変更前の値を返します。
maxdb_field_tell	結果ポインタの現在のフィールドオフセットを取得する	int maxdb_field_tell ( resource $result )	フィールドカーソルの現在のオフセットを返します。
maxdb_free_result	結果に関連付けられたメモリを開放する	void maxdb_free_result ( resource $result )	この関数は値を返しません。
maxdb_get_client_info	MaxDB クライアントのバージョンを文字列で返す	string maxdb_get_client_info ( void )	MaxDB クライアントライブラリのバージョンを表す文字列を返します。
maxdb_get_client_version	MaxDB クライアントの情報を取得する	int maxdb_get_client_version ( void )	MaxDB クライアントライブラリのバージョンを表す数値を、 以下のフォーマットで返します。 main_version*10000 + minor_version *100 + sub_version 例えば、7.5.0 の場合は 70500 となります。
maxdb_get_host_info	使用している接続の型を表す文字列を返す	string maxdb_get_host_info ( resource $link )	サーバーのホスト名および接続の型を表す文字列を返します。
maxdb_get_metadata	maxdb_stmt_result_metadata() のエイリアス
maxdb_get_proto_info	使用している MaxDB プロトコルのバージョンを返す	int maxdb_get_proto_info ( resource $link )	プロトコルのバージョンを表す整数値 (定数の 10) を返します。
maxdb_get_server_info	MaxDB サーバーのバージョンを返す	string maxdb_get_server_info ( resource $link )	サーバーのバージョンを表す文字列を返します。
maxdb_get_server_version	MaxDB サーバーのバージョンを整数値で返す	int maxdb_get_server_version ( resource $link )	サーバーのバージョンを表す整数値を返します。
maxdb_info	直近に実行したクエリについての情報を取得する	string maxdb_info ( resource $link )	直近に実行されたクエリについての追加情報を表す文字列を返します。
maxdb_init	MaxDB を初期化し、maxdb_real_connect で使用するリソースを返す	resource maxdb_init ( void )	リソースを返します。
maxdb_insert_id	直近のクエリで使用した、自動生成 ID を返す	mixed maxdb_insert_id ( resource $link )	直近のクエリによって更新された DEFAULT SERIAL フィールドの値を返します。直近のクエリがない場合、 あるいは直近のクエリが DEFAULT_SERIAL を更新しなかった場合はゼロを返します。
maxdb_kill	MaxDB サーバーから切断する	bool maxdb_kill ( resource $link , int $processid )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_master_query	マスタ/スレーブ構成において、クエリをマスタ側で実行することを強制する	bool maxdb_master_query ( resource $link , string $query )
maxdb_more_results	複数クエリの結果の中に結果セットがまだあるかどうかを調べる	bool maxdb_more_results ( resource $link )	常に FALSE を返します。
maxdb_multi_query	データベース上でクエリを実行する	bool maxdb_multi_query ( resource $link , string $query )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_next_result	multi_query の、次の結果を準備する	bool maxdb_next_result ( resource $link )	FALSE を返します。
maxdb_num_fields	結果のフィールド数を取得する	int maxdb_num_fields ( resource $result )	結果セットのフィールド数を返します。
maxdb_num_rows	結果の行数を取得する	int maxdb_num_rows ( resource $result )	結果セットの行の数を返します。
maxdb_options	オプションを設定する	bool maxdb_options ( resource $link , int $option , mixed $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_param_count	maxdb_stmt_param_count() のエイリアス
maxdb_ping	サーバーとの接続を確認し、接続が確立されていない場合は再接続を試みる	bool maxdb_ping ( resource $link )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_prepare	後で実行するための SQL 文を準備する	resource maxdb_prepare ( resource $link , string $query )	maxdb_prepare() は、ステートメントリソースを返します。 エラーが発生した場合は FALSE を返します。
maxdb_query	データベース上でクエリを実行する	mixed maxdb_query ( resource $link , string $query [, int $resultmode ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 SELECT, SHOW, DESCRIBE あるいは EXPLAIN の場合は、 maxdb_query() は結果リソースを返します。
maxdb_real_connect	MaxDB サーバーへの接続をオープンする	bool maxdb_real_connect ( resource $link [, string $hostname [, string $username [, string $passwd [, string $dbname [, int $port = 0 [, string $socket ]]]]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_real_escape_string	現在の接続の文字セットを考慮したうえで、 SQL 文で使用される文字列中の特殊文字をエスケープする	string maxdb_real_escape_string ( resource $link , string $escapestr )	エスケープされた文字列を返します。
maxdb_real_query	SQL クエリを実行する	bool maxdb_real_query ( resource $link , string $query )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_report	内部のレポート関数を有効あるいは無効にする	bool maxdb_report ( int $flags )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_rollback	現在のトランザクションをロールバックする	bool maxdb_rollback ( resource $link )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_rpl_parse_enabled	RPL のパースが有効かどうかを調べる	int maxdb_rpl_parse_enabled ( resource $link )
maxdb_rpl_probe	RPL を調べる	bool maxdb_rpl_probe ( resource $link )
maxdb_rpl_query_type	RPL クエリ型を返す	int maxdb_rpl_query_type ( resource $link )
maxdb_select_db	データベースクエリ用のデフォルトデータベースを選択する	bool maxdb_select_db ( resource $link , string $dbname )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_send_long_data	maxdb_stmt_send_long_data() のエイリアス
maxdb_send_query	クエリを送信する	bool maxdb_send_query ( resource $link , string $query )
maxdb_server_end	埋め込みサーバーをシャットダウンする	void maxdb_server_end ( void )
maxdb_server_init	埋め込みサーバーを初期化する	bool maxdb_server_init ([ array $server [, array $groups ]] )
maxdb_set_opt	maxdb_options() のエイリアス
maxdb_sqlstate	直近の MaxDB 操作の SQLSTATE エラーを返します	string maxdb_sqlstate ( resource $link )	直近のエラーについての SQLSTATE エラーコードを含む文字列を返します。 エラーコードは 5 つの文字で構成されています。'00000' は、エラーが発生しなかったことを意味します。
maxdb_ssl_set	SSL を使用したセキュアな接続を確立するために使用する	bool maxdb_ssl_set ( resource $link , string $key , string $cert , string $ca , string $capath , string $cipher )
maxdb_stat	現在のシステム状態を取得する	string maxdb_stat ( resource $link )	サーバーの状態を説明する文字列、あるいはエラーが発生した場合に FALSE を返します。
maxdb_stmt_affected_rows	直近のステートメントによって変更、削除あるいは挿入された行の数を返す	int maxdb_stmt_affected_rows ( resource $stmt )	ゼロより大きい整数の場合は、変更された行数あるいは取得した行数を表します。 ゼロの場合は、UPDATE/DELETE 文で 1 行も更新されなかったか、 クエリの WHERE 句にマッチする行がなかった、 あるいはクエリがまだ実行されていないことを表します。 -1 は、クエリがエラーを返したか行数が取得できなかったことを表します。
maxdb_stmt_bind_param	プリペアドステートメントに、変数をパラメータとしてバインドする	bool maxdb_stmt_bind_param ( resource $stmt , string $types , mixed &$var1 [, mixed &$... ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_stmt_bind_result	結果を保存するために、変数をプリペアドステートメントにバインドする	bool maxdb_stmt_bind_result ( resource $stmt , mixed &$var1 [, mixed &$... ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_stmt_close_long_data	maxdb_stmt_send_long_data() のシーケンスを終了する	bool maxdb_stmt_close_long_data ( resource $stmt , int $param_nr )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_stmt_close	プリペアドステートメントを閉じる	bool maxdb_stmt_close ( resource $stmt )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_stmt_data_seek	ステートメントの結果セットの、任意の行に移動する	bool maxdb_stmt_data_seek ( resource $statement , int $offset )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_stmt_errno	直近のステートメントコール時のエラーコードを返す	int maxdb_stmt_errno ( resource $stmt )	エラーコードの値を返します。エラーが発生しなかった場合はゼロを返します。
maxdb_stmt_error	直近のステートメントコール時のエラー文字列を返す	string maxdb_stmt_error ( resource $stmt )	エラーを説明する文字列を返します。エラーが発生しなかった場合は空の文字列を返します。
maxdb_stmt_execute	プリペアドクエリを実行する	bool maxdb_stmt_execute ( resource $stmt )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_stmt_fetch	プリペアドステートメントの結果を取得し、バインド変数に格納する	bool maxdb_stmt_fetch ( resource $stmt )
maxdb_stmt_free_result	指定したステートメントハンドルの結果を保存しているメモリを開放する	void maxdb_stmt_free_result ( resource $stmt )	この関数は、なにも値を返しません。
maxdb_stmt_init	ステートメントを初期化し、maxdb_stmt_prepare で使用するリソースを返す	resource maxdb_stmt_init ( resource $link )	リソースを返します。
maxdb_stmt_num_rows	ステートメントの結果セットの行数を返す	int maxdb_stmt_num_rows ( resource $stmt )	結果セット内の行の数を表す整数値を返します。
maxdb_stmt_param_count	指定したステートメントのパラメータ数を返す	int maxdb_stmt_param_count ( resource $stmt )	パラメータ数を表す整数値を返します。
maxdb_stmt_prepare	後で実行するための SQL 文を準備する	bool maxdb_stmt_prepare ( resource $stmt , string $query )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_stmt_reset	プリペアドステートメントをリセットする	bool maxdb_stmt_reset ( resource $stmt )
maxdb_stmt_result_metadata	プリペアドステートメントから、結果セットのメタデータを返す	resource maxdb_stmt_result_metadata ( resource $stmt )	maxdb_stmt_result_metadata() は結果リソースを返します。 エラーが発生した場合には FALSE を返します。
maxdb_stmt_send_long_data	データを複数ブロックで送信する	bool maxdb_stmt_send_long_data ( resource $stmt , int $param_nr , string $data )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_stmt_sqlstate	事前のステートメントの捜査からの SQLSTATE エラーを返す	string maxdb_stmt_sqlstate ( resource $stmt )	直近のエラーについての SQLSTATE エラーコードを含む文字列を返します。 エラーコードは 5 つの文字で構成されています。'00000' は、エラーが発生しなかったことを意味します。
maxdb_stmt_store_result	プリペアドステートメントから結果を転送する	bool maxdb_stmt_store_result ( resource $stmt )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
maxdb_store_result	直近のクエリから結果セットを転送する	resource maxdb_store_result ( resource $link )	結果リソース、あるいはエラーが発生した場合に FALSE を返します。
maxdb_thread_id	現在の接続のスレッド ID を返す	int maxdb_thread_id ( resource $link )	maxdb_thread_id() は、 現在の接続のスレッド ID を返します。
maxdb_thread_safe	スレッドセーフであるかどうかを返す	bool maxdb_thread_safe ( void )	クライアントライブラリがスレッドセーフである場合に TRUE、 それ以外の場合に FALSE を返します。
maxdb_use_result	結果セットの取得を開始する	resource maxdb_use_result ( resource $link )	結果、失敗した場合に FALSE を返します。
maxdb_warning_count	指定したリンクの直近のクエリで発生した警告の数を返す	int maxdb_warning_count ( resource $link )	警告の数、あるいは警告が発生しなかった場合にはゼロを返します。
mb_check_encoding	文字列が、指定したエンコーディングで有効なものかどうかを調べる	bool mb_check_encoding ([ string $var = NULL [, string $encoding = mb_internal_encoding() ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mb_convert_case	文字列に対してケースフォルディングを行う	string mb_convert_case ( string $str , int $mode [, string $encoding = mb_internal_encoding() ] )	mode で指定された方法で string に対してケースフォルディングを行った結果を返します。
mb_convert_encoding	文字エンコーディングを変換する	string mb_convert_encoding ( string $str , string $to_encoding [, mixed $from_encoding = mb_internal_encoding() ] )	変換後の文字列を返します。
mb_convert_kana	カナを("全角かな"、"半角かな"等に)変換する	string mb_convert_kana ( string $str [, string $option = "KV" [, string $encoding = mb_internal_encoding() ]] )	変換後の文字列を返します。
mb_convert_variables	変数の文字コードを変換する	string mb_convert_variables ( string $to_encoding , mixed $from_encoding , mixed &$vars [, mixed &$... ] )	成功時に変換前の文字エンコーディングを返し、失敗した場合に FALSE を返します。
mb_decode_mimeheader	MIME ヘッダフィールドの文字列をデコードする	string mb_decode_mimeheader ( string $str )	内部文字エンコーディングでデコードされた文字列を返します。
mb_decode_numericentity	HTML 数値エンティティを文字にデコードする	string mb_decode_numericentity ( string $str , array $convmap [, string $encoding = mb_internal_encoding() ] )	変換された文字列を返します。
mb_detect_encoding	文字エンコーディングを検出する	string mb_detect_encoding ( string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = false ]] )	検出した文字エンコーディングを返します。 指定した文字列からエンコーディングを検出できなかった場合は FALSE を返します。
mb_detect_order	文字エンコーディング検出順序を設定あるいは取得する	mixed mb_detect_order ([ mixed $encoding_list = mb_detect_order() ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mb_encode_mimeheader	MIMEヘッダの文字列をエンコードする	string mb_encode_mimeheader ( string $str [, string $charset = mb_internal_encoding() [, string $transfer_encoding = "B" [, string $linefeed = "\r\n" [, int $indent = 0 ]]]] )	文字列を ASCII 表現に変換したものを返します。
mb_encode_numericentity	文字を HTML 数値エンティティにエンコードする	string mb_encode_numericentity ( string $str , array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex = FALSE ]] )	変換後の文字列を返します。
mb_encoding_aliases	既知のエンコーディング・タイプのエイリアスを取得	array mb_encoding_aliases ( string $encoding )	成功した場合、数値で索引がつけられたエンコーディング・エイリアスの配列を返し、 失敗した場合に FALSE を返します
mb_ereg_match	マルチバイト文字列が正規表現に一致するか調べる	bool mb_ereg_match ( string $pattern , string $string [, string $option = "msr" ] )
mb_ereg_replace_callback	マルチバイト文字列にコールバック関数を用いた正規表現による置換を行う	string mb_ereg_replace_callback ( string $pattern , callable $callback , string $string [, string $option = "msr" ] )	成功した際に string 、 そうでない場合はエラー時に FALSE を 返します。
mb_ereg_replace	マルチバイト文字列に正規表現による置換を行う	string mb_ereg_replace ( string $pattern , string $replacement , string $string [, string $option = "msr" ] )	成功した場合に結果の文字列、エラー時に FALSE を返します。
mb_ereg_search_getpos	次の正規表現検索を開始する位置を取得する	int mb_ereg_search_getpos ( void )
mb_ereg_search_getregs	マルチバイト文字列が正規表現に一致する部分があるか調べる	array mb_ereg_search_getregs ( void )
mb_ereg_search_init	マルチバイト正規表現検索用の文字列と正規表現を設定する	bool mb_ereg_search_init ( string $string [, string $pattern [, string $option = "msr" ]] )
mb_ereg_search_pos	指定したマルチバイト文字列が正規表現に一致する部分の位置と長さを返す	array mb_ereg_search_pos ([ string $pattern [, string $option = "ms" ]] )
mb_ereg_search_regs	指定したマルチバイト文字列が正規表現に一致する部分を取得する	array mb_ereg_search_regs ([ string $pattern [, string $option = "ms" ]] )
mb_ereg_search_setpos	次の正規表現検索を開始する位置を設定する	bool mb_ereg_search_setpos ( int $position )
mb_ereg_search	指定したマルチバイト文字列が正規表現に一致するか調べる	bool mb_ereg_search ([ string $pattern [, string $option = "ms" ]] )
mb_ereg	マルチバイト文字列に正規表現マッチを行う	int mb_ereg ( string $pattern , string $string [, array $regs ] )
mb_eregi_replace	マルチバイト文字列に大文字小文字を区別せずに正規表現による置換を行う	string mb_eregi_replace ( string $pattern , string $replace , string $string [, string $option = "msri" ] )	結果の文字列、あるいはエラー時に FALSE を返します。
mb_eregi	マルチバイト文字列に大文字小文字を区別しない正規表現マッチを行う	int mb_eregi ( string $pattern , string $string [, array $regs ] )
mb_get_info	mbstring の内部設定値を取得する	mixed mb_get_info ([ string $type = "all" ] )	type が指定されていない場合は型情報を含む配列、 それ以外の場合は指定した type の値を返します。
mb_http_input	HTTP 入力文字エンコーディングを検出する	mixed mb_http_input ([ string $type = "" ] )	type の文字エンコーディング名を返します。 mb_http_input() が指定した HTTP 入力の処理を行っていない場合、FALSE を返します。
mb_http_output	HTTP 出力文字エンコーディングを設定あるいは取得する	mixed mb_http_output ([ string $encoding = mb_http_output() ] )	encoding が省略された場合、 mb_http_output() は現在の HTTP 出力文字エンコーディングを返します。それ以外の場合、 成功した場合に TRUE を、失敗した場合に FALSE を返します。
mb_internal_encoding	内部文字エンコーディングを設定あるいは取得する	mixed mb_internal_encoding ([ string $encoding = mb_internal_encoding() ] )	encoding が設定された場合、 成功した場合に TRUE を、失敗した場合に FALSE を返します。 このとき、マルチバイト正規表現用のエンコーディングは変更されません。 encoding が省略された場合、 現在の内部文字エンコーディング名を返します。
mb_language	現在の言語を設定あるいは取得する	mixed mb_language ([ string $language = mb_language() ] )	language が設定され、 language が有効な場合、TRUEが返されます。 そうでない場合、FALSEが返されます。 language が省略された場合、 言語の名前が文字列として返されます。事前に言語が設定されていない場合、 FALSE が返されます。
mb_list_encodings	サポートするすべてのエンコーディングの配列を返す	array mb_list_encodings ( void )	数値添字の配列を返します。
mb_output_handler	出力バッファ内で文字エンコーディングを変換するコールバック関数	string mb_output_handler ( string $contents , int $status )	変換後の文字列を返します。
mb_parse_str	GET/POST/COOKIE データをパースし、グローバル変数を設定する	bool mb_parse_str ( string $encoded_string [, array &$result ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mb_preferred_mime_name	MIME 文字設定を文字列で得る	string mb_preferred_mime_name ( string $encoding )	文字エンコーディング encoding 用の MIME charset 文字列を返します。
mb_regex_encoding	現在のマルチバイト正規表現用のエンコーディングを取得または設定する	mixed mb_regex_encoding ([ string $encoding = mb_regex_encoding() ] )
mb_regex_set_options	マルチバイト正規表現関数のデフォルトオプションを取得または設定する	string mb_regex_set_options ([ string $options = mb_regex_set_options() ] )	以前設定されていたオプション文字列を返します。 options を省略した場合は、 現在設定されているオプションを返します。
mb_send_mail	エンコード変換を行ってメールを送信する	bool mb_send_mail ( string $to , string $subject , string $message [, string $additional_headers = NULL [, string $additional_parameter = NULL ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mb_split	マルチバイト文字列を正規表現により分割する	array mb_split ( string $pattern , string $string [, int $limit = -1 ] )	結果を配列で返します。
mb_strcut	文字列の一部を得る	string mb_strcut ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )	mb_strcut() は、 start および length パラメータで指定した str の一部を返します。
mb_strimwidth	指定した幅で文字列を丸める	string mb_strimwidth ( string $str , int $start , int $width [, string $trimmarker = "" [, string $encoding = mb_internal_encoding() ]] )	丸められた文字列を返します。 trimmarker が設定された場合、 trimmarker が丸められた文字列に追加されます。
mb_stripos	大文字小文字を区別せず、 文字列の中で指定した文字列が最初に現れる位置を探す	int mb_stripos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )	needle が haystack の中で最初に現れる位置を返します。needle が見つからない場合は FALSE を返します。
mb_stristr	大文字小文字を区別せず、 文字列の中で指定した文字列が最初に現れる位置を探す	string mb_stristr ( string $haystack , string $needle [, bool $before_needle = false [, string $encoding = mb_internal_encoding() ]] )	haystack の部分文字列を返します。 needle が見つからない場合は FALSE を返します。
mb_strlen	文字列の長さを得る	int mb_strlen ( string $str [, string $encoding = mb_internal_encoding() ] )	文字エンコーディング encoding の文字列 str の文字数を返します。 マルチバイト文字の一文字は1個として数えられます。
mb_strpos	文字列の中に指定した文字列が最初に現れる位置を見つける	int mb_strpos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )	文字列 haystack の中で needle が最初に現れる位置を数字で返します。 needle が見付からなかった場合、FALSE を返します。
mb_strrchr	別の文字列の中で、ある文字が最後に現れる場所を見つける	string mb_strrchr ( string $haystack , string $needle [, bool $part = false [, string $encoding = mb_internal_encoding() ]] )	haystack の部分文字列を返します。 needle が見つからない場合は FALSE を返します。
mb_strrichr	大文字小文字を区別せず、 別の文字列の中である文字が最後に現れる場所を探す	string mb_strrichr ( string $haystack , string $needle [, bool $part = false [, string $encoding = mb_internal_encoding() ]] )	haystack の部分文字列を返します。 needle が見つからない場合は FALSE を返します。
mb_strripos	大文字小文字を区別せず、 文字列の中で指定した文字列が最後に現れる位置を探す	int mb_strripos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )	needle が haystack の中で最後に現れる位置を返します。needle が見つからない場合は FALSE を返します。
mb_strrpos	文字列の中に指定した文字列が最後に現れる位置を見つける	int mb_strrpos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )	文字列 haystack の中で needle が最後に現れる位置を数字で返します。 needle が見付からなかった場合、FALSE を返します。
mb_strstr	文字列の中で、指定した文字列が最初に現れる位置を見つける	string mb_strstr ( string $haystack , string $needle [, bool $before_needle = false [, string $encoding = mb_internal_encoding() ]] )	haystack の部分文字列を返します。 needle が見つからない場合は FALSE を返します。
mb_strtolower	文字列を小文字にする	string mb_strtolower ( string $str [, string $encoding = mb_internal_encoding() ] )	str のすべてのアルファベットを小文字にしたものを返します。
mb_strtoupper	文字列を大文字にする	string mb_strtoupper ( string $str [, string $encoding = mb_internal_encoding() ] )	str のすべてのアルファベットを大文字にしたものを返します。
mb_strwidth	文字列の幅を返す	int mb_strwidth ( string $str [, string $encoding = mb_internal_encoding() ] )	文字列 str の幅を返します。
mb_substitute_character	置換文字を設定あるいは取得する	mixed mb_substitute_character ([ mixed $substrchar = mb_substitute_character() ] )	substchar が設定された場合、成功時に TRUE、そうでない場合に FALSE を返します。 substchar が設定されない場合は、現在の設定を返します。
mb_substr_count	部分文字列の出現回数を数える	int mb_substr_count ( string $haystack , string $needle [, string $encoding = mb_internal_encoding() ] )	文字列 haystack の中での部分文字列 needle の出現回数を返します。
mb_substr	文字列の一部を得る	string mb_substr ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )	mb_substr() は、start および length パラメータで指定した str の一部を返します。
mcrypt_cbc	CBC モードでデータを暗号化/復号する	string mcrypt_cbc ( int $cipher , string $key , string $data , int $mode [, string $iv ] )
mcrypt_cfb	CFB モードでデータを暗号化/復号する	string mcrypt_cfb ( int $cipher , string $key , string $data , int $mode , string $iv )
mcrypt_create_iv	乱数ソースから初期化ベクトル(IV)を生成する	string mcrypt_create_iv ( int $size [, int $source = MCRYPT_DEV_RANDOM ] )	初期化ベクトル、あるいはエラー時に FALSE を返します。
mcrypt_decrypt	指定したパラメータで暗号化されたテキストを復号する	string mcrypt_decrypt ( string $cipher , string $key , string $data , string $mode [, string $iv ] )	復号されたデータを文字列で返します。
mcrypt_ecb	非推奨: ECB モードでデータを暗号化/復号する	string mcrypt_ecb ( int $cipher , string $key , string $data , int $mode )
mcrypt_enc_get_algorithms_name	オープンされたアルゴリズムの名前を返す	string mcrypt_enc_get_algorithms_name ( resource $td )	オープンしたアルゴリズムの名前を文字列で返します。
mcrypt_enc_get_block_size	オープンされたアルゴリズムのブロックサイズを返す	int mcrypt_enc_get_block_size ( resource $td )	指定したアルゴリズムのブロック長をバイト単位で返します。
mcrypt_enc_get_iv_size	オープンされたアルゴリズムの IV の大きさを返す	int mcrypt_enc_get_iv_size ( resource $td )	この関数は、暗号化記述子で指定したアルゴリズムの iv の大きさを バイト単位で返します。 この関数が '0' を返す場合、IV は そのアルゴリズムでは無視されます。
mcrypt_enc_get_key_size	オープンされたモードでサポートされる最大キー長を返す	int mcrypt_enc_get_key_size ( resource $td )	そのアルゴリズムでサポートされる最大キー長をバイト単位で返します。
mcrypt_enc_get_modes_name	オープンされたモードの名前を返す	string mcrypt_enc_get_modes_name ( resource $td )	名前を表す文字列を返します。
mcrypt_enc_get_supported_key_sizes	オープンされたアルゴリズムでサポートされるキー長を配列にして返す	array mcrypt_enc_get_supported_key_sizes ( resource $td )	暗号化記述子で指定したアルゴリズムでサポートされるキー長を配列と して返します。返された配列が空の場合、1 と mcrypt_enc_get_key_size() の値の間のすべての キー長がアルゴリズムでサポートされます。
mcrypt_enc_is_block_algorithm_mode	オープンされたモードの暗号がブロックモードで動作するかどうかを調べる	bool mcrypt_enc_is_block_algorithm_mode ( resource $td )	モードがブロックアルゴリズムを使用している場合に TRUE、 その他の場合に FALSE を返します。
mcrypt_enc_is_block_algorithm	オープンされたモードの暗号がブロックアルゴリズムであるかどうかを調べる	bool mcrypt_enc_is_block_algorithm ( resource $td )	アルゴリズムがブロックアルゴリズムである場合に TRUE、 ストリームアルゴリズムである場合に FALSE を返します。
mcrypt_enc_is_block_mode	オープンされたモードがブロック出力を行うかどうかを調べる	bool mcrypt_enc_is_block_mode ( resource $td )	バイトブロックを出力するモードの場合に TRUE、 バイト出力を行うモードの場合に FALSE を返します。
mcrypt_enc_self_test	オープンしたモジュールのセルフテストを実行する	int mcrypt_enc_self_test ( resource $td )	セルフテストが成功した場合は FALSE を返します。エラーの場合は TRUE を返します。
mcrypt_encrypt	指定したパラメータでプレーンテキストを暗号化する	string mcrypt_encrypt ( string $cipher , string $key , string $data , string $mode [, string $iv ] )	暗号化されたデータを文字列で返します。
mcrypt_generic_deinit	暗号化モジュールを終了する	bool mcrypt_generic_deinit ( resource $td )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mcrypt_generic_end	暗号処理を終了する	bool mcrypt_generic_end ( resource $td )
mcrypt_generic_init	暗号化に必要な全てのバッファを初期化する	int mcrypt_generic_init ( resource $td , string $key , string $iv )	この関数は、エラー時に負の値を返します。キー長が不正な場合に -3、メモリの確保に問題があった場合に -4、そしてそれ以外の返り値は その他のエラーとなります。エラーが警告を発生させた場合、それが 表示されます。間違ったパラメータが渡された場合には FALSE が返されます。
mcrypt_generic	データを暗号化する	string mcrypt_generic ( resource $td , string $data )	暗号化したデータを返します。
mcrypt_get_block_size	指定した暗号のブロックサイズを得る	int mcrypt_get_block_size ( int $cipher )	ブロックサイズを整数値で返します。
mcrypt_get_cipher_name	指定した暗号の名前を得る	string mcrypt_get_cipher_name ( int $cipher )	暗号の名前、あるいは暗号が存在しない場合に FALSE を返します。
mcrypt_get_iv_size	指定した暗号/モードの組み合わせに属する IV の大きさを返す	int mcrypt_get_iv_size ( string $cipher , string $mode )	初期化ベクトル(IV)の大きさをバイト数で返します。 エラーの際には FALSE を返します。IV が指定した暗号/モードで無視される場合には、ゼロを返します。
mcrypt_get_key_size	指定した暗号のキーの長さを得る	int mcrypt_get_key_size ( int $cipher )	そのアルゴリズムでサポートする最長のキーサイズをバイト数で返します。 失敗した場合に FALSE を返します.
mcrypt_list_algorithms	サポートされる全ての暗号を配列として取得する	array mcrypt_list_algorithms ([ string $lib_dir = ini_get("mcrypt.algorithms_dir") ] )	サポートするすべてのアルゴリズムを配列で返します。
mcrypt_list_modes	サポートされる全てのモードの配列を取得する	array mcrypt_list_modes ([ string $lib_dir = ini_get("mcrypt.modes_dir") ] )	サポートするすべてのモードを配列で返します。
mcrypt_module_close	mcrypt モジュールを閉じる	bool mcrypt_module_close ( resource $td )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mcrypt_module_get_algo_block_size	指定したアルゴリズムのブロック長を返す	int mcrypt_module_get_algo_block_size ( string $algorithm [, string $lib_dir ] )	指定したアルゴリズムでサポートされるブロック長をバイト単位で返します。
mcrypt_module_get_algo_key_size	オープンされたモードでサポートされる最大キー長を返す	int mcrypt_module_get_algo_key_size ( string $algorithm [, string $lib_dir ] )	この関数は、指定したアルゴリズムでサポートされる最大キー長をバイト単位で返します。
mcrypt_module_get_supported_key_sizes	オープンされたアルゴリズムでサポートされるキーのサイズを配列として返す	array mcrypt_module_get_supported_key_sizes ( string $algorithm [, string $lib_dir ] )	指定したアルゴリズムでサポートするキーサイズの配列を返します。 空の配列を返した場合は、そのアルゴリズムでは 1 から mcrypt_module_get_algo_key_size() までのすべてのキーサイズをサポートすることになります。
mcrypt_module_is_block_algorithm_mode	指定したモジュールがブロックアルゴリズムであるかどうかを返す	bool mcrypt_module_is_block_algorithm_mode ( string $mode [, string $lib_dir ] )	この関数は、mode がブロックアルゴリズムを使用する場合に TRUE、 その他の場合に FALSE を返します。(例: stream の場合に FALSE、 cbc、cfb、ofb の場合に TRUE)
mcrypt_module_is_block_algorithm	指定したアルゴリズムがブロックアルゴリズムであるかを調べる	bool mcrypt_module_is_block_algorithm ( string $algorithm [, string $lib_dir ] )	この関数は、指定したアルゴリズムがブロックアルゴリズムの場合に TRUE、ストリームアルゴリズムの場合に FALSE を返します。
mcrypt_module_is_block_mode	指定したモードがブロック出力を行うかどうかを返す	bool mcrypt_module_is_block_mode ( string $mode [, string $lib_dir ] )	この関数は、ブロック出力を行うモードの場合に TRUE、バイトのみを 出力する場合に FALSE を返します(例: cbc と ecb の場合に TRUE、 cfb と streamの場合に FALSE)。
mcrypt_module_open	使用するアルゴリズムおよびモードのモジュールをオープンする	resource mcrypt_module_open ( string $algorithm , string $algorithm_directory , string $mode , string $mode_directory )	通常は暗号化記述子を返します。エラー時は FALSE を返します。
mcrypt_module_self_test	指定したモジュールのセルフテストを実行する	bool mcrypt_module_self_test ( string $algorithm [, string $lib_dir ] )	この関数は、セルフテストが成功した場合 TRUE、失敗した場合に FALSE を返します。
mcrypt_ofb	OFB モードでデータを暗号化/復号する	string mcrypt_ofb ( int $cipher , string $key , string $data , int $mode , string $iv )
md5_file	指定したファイルのMD5ハッシュ値を計算する	string md5_file ( string $filename [, bool $raw_output = false ] )	成功時は文字列、そうでなければ FALSE
md5	文字列のmd5ハッシュ値を計算する	string md5 ( string $str [, bool $raw_output = false ] )	32 文字の 16 進数からなるハッシュを返します。
mdecrypt_generic	データを復号する	string mdecrypt_generic ( resource $td , string $data )
memcache_debug	デバッグ出力のオン/オフを切り替える	bool memcache_debug ( bool $on_off )	PHP が --enable-debug オプションをつけてビルドされている場合に TRUE、それ以外の場合に FALSE を返します。
memory_get_peak_usage	PHP によって割り当てられたメモリの最大値を返す	int memory_get_peak_usage ([ bool $real_usage = false ] )	メモリの最大値をバイト数で返します。
memory_get_usage	PHP に割り当てられたメモリの量を返す	int memory_get_usage ([ bool $real_usage = false ] )	メモリの量をバイト単位で返します。
metaphone	文字列の metaphone キーを計算する	string metaphone ( string $str [, int $phonemes = 0 ] )	metaphone キーを文字列で返します。失敗した場合に FALSE を返します。
method_exists	クラスメソッドが存在するかどうかを確認する	bool method_exists ( mixed $object , string $method_name )	method_name で指定したメソッドが 指定した object において定義されている場合に TRUE、そうでない場合に FALSE を返します。
mhash_count	利用可能なハッシュ ID の最大値を得る	int mhash_count ( void )	利用可能なハッシュ ID の最大値を返します。 ハッシュは、0 からこのハッシュ ID までの数字となります。
mhash_get_block_size	指定したハッシュのブロックサイズを得る	int mhash_get_block_size ( int $hash )	サイズをバイト数で返します。hash が存在しない場合は FALSE を返します。
mhash_get_hash_name	指定したハッシュの名前を得る	string mhash_get_hash_name ( int $hash )	ハッシュの名前を返します。そのハッシュが存在しない場合は、FALSE を返します。
mhash_keygen_s2k	キーを生成する	string mhash_keygen_s2k ( int $hash , string $password , string $salt , int $bytes )	生成されたキーを表す文字列、あるいはエラー時に FALSE を返します。
mhash	ハッシュ値を計算する	string mhash ( int $hash , string $data [, string $key ] )	結果のハッシュ (あるいはダイジェストとも言います) あるいは HMAC を表す文字列を返します。 エラー時は FALSE を返します。
microtime	現在の Unix タイムスタンプをマイクロ秒まで返す	mixed microtime ([ bool $get_as_float = false ] )	デフォルトでは、 microtime() は "msec sec" 形式の文字列を返します。ただし、sec は Unix エポック (1970 年 1 月 1 日 0:00:00 GMT) から計算した秒数、msec は sec から経過したマイクロ秒数です。
mime_content_type	ファイルの MIME Content-type を検出する (非推奨)	string mime_content_type ( string $filename )	Content type を MIME 形式で返します。 たとえば text/plain あるいは application/octet-stream のような形式です。
min	最小値を返す	mixed min ( array $values )	min() は、パラメータとして渡した値の中で 数値として最も小さいものを返します。
ming_keypress	keyPress(char) のアクションフラグを返す	int ming_keypress ( string $char )
ming_setcubicthreshold	三次元の閾値を設定する	void ming_setcubicthreshold ( int $threshold )	値を返しません。
ming_setscale	グローバルなスケール要素を設定する	void ming_setscale ( float $scale )	値を返しません。
ming_setswfcompression	SWF 出力の圧縮を設定する	void ming_setswfcompression ( int $level )	値を返しません。
ming_useconstants	定数プールを使用する	void ming_useconstants ( int $use )	値を返しません。
ming_useswfversion	SWF のバージョンを設定する	void ming_useswfversion ( int $version )	値を返しません。
mkdir	ディレクトリを作る	bool mkdir ( string $pathname [, int $mode = 0777 [, bool $recursive = false [, resource $context ]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mktime	日付を Unix のタイムスタンプとして取得する	int mktime ([ int $hour = date("H") [, int $minute = date("i") [, int $second = date("s") [, int $month = date("n") [, int $day = date("j") [, int $year = date("Y") [, int $is_dst = -1 ]]]]]]] )	mktime() は与えられた引数の Unix タイムスタンプを返します。引数が不正な場合、 この関数は FALSE を返します（PHP 5.1 より前のバージョンでは -1 を返していました）。
money_format	数値を金額文字列にフォーマットする	string money_format ( string $format , float $number )	フォーマットした文字列を返します。 フォーマット文字列の前後の文字は、そのまま返されます。 number が非数値の場合は NULL を返し、 E_WARNING を発行します。
move_uploaded_file	アップロードされたファイルを新しい位置に移動する	bool move_uploaded_file ( string $filename , string $destination )	成功した場合に TRUE を返します。
mqseries_back	MQSeries MQBACK	void mqseries_back ( resource $hconn , resource &$compCode , resource &$reason )	値を返しません。
mqseries_begin	MQseries MQBEGIN	void mqseries_begin ( resource $hconn , array $beginOptions , resource &$compCode , resource &$reason )	値を返しません。
mqseries_close	MQSeries MQCLOSE	void mqseries_close ( resource $hconn , resource $hobj , int $options , resource &$compCode , resource &$reason )	値を返しません。
mqseries_cmit	MQSeries MQCMIT	void mqseries_cmit ( resource $hconn , resource &$compCode , resource &$reason )	値を返しません。
mqseries_conn	MQSeries MQCONN	void mqseries_conn ( string $qManagerName , resource &$hconn , resource &$compCode , resource &$reason )	値を返しません。
mqseries_connx	MQSeries MQCONNX	void mqseries_connx ( string $qManagerName , array &$connOptions , resource &$hconn , resource &$compCode , resource &$reason )	値を返しません。
mqseries_disc	MQSeries MQDISC	void mqseries_disc ( resource $hconn , resource &$compCode , resource &$reason )	値を返しません。
mqseries_get	MQSeries MQGET	void mqseries_get ( resource $hConn , resource $hObj , array &$md , array &$gmo , int &$bufferLength , string &$msg , int &$data_length , resource &$compCode , resource &$reason )	値を返しません。
mqseries_inq	MQSeries MQINQ	void mqseries_inq ( resource $hconn , resource $hobj , int $selectorCount , array $selectors , int $intAttrCount , resource &$intAttr , int $charAttrLength , resource &$charAttr , resource &$compCode , resource &$reason )	値を返しません。
mqseries_open	MQSeries MQOPEN	void mqseries_open ( resource $hconn , array &$objDesc , int $option , resource &$hobj , resource &$compCode , resource &$reason )	値を返しません。
mqseries_put	MQSeries MQPUT	void mqseries_put ( resource $hConn , resource $hObj , array &$md , array &$pmo , string $message , resource &$compCode , resource &$reason )	値を返しません。
mqseries_put1	MQSeries MQPUT1	void mqseries_put1 ( resource $hconn , resource &$objDesc , resource &$msgDesc , resource &$pmo , string $buffer , resource &$compCode , resource &$reason )	値を返しません。
mqseries_set	MQSeries MQSET	void mqseries_set ( resource $hconn , resource $hobj , int $selectorcount , array $selectors , int $intattrcount , array $intattrs , int $charattrlength , array $charattrs , resource &$compCode , resource &$reason )	値を返しません。
mqseries_strerror	結果コード (MQRC) に対応するエラーメッセージを返す	string mqseries_strerror ( int $reason )	原因コードのメッセージを文字列で返します。
msession_connect	msession サーバーに接続する	bool msession_connect ( string $host , string $port )
msession_count	セッション数を得る	int msession_count ( void )
msession_create	セッションを作成する	bool msession_create ( string $session [, string $classname [, string $data ]] )
msession_destroy	セッションを破棄する	bool msession_destroy ( string $name )
msession_disconnect	msession サーバーへの接続を閉じる	void msession_disconnect ( void )
msession_find	名前と値で、すべてのセッションを検索する	array msession_find ( string $name , string $value )
msession_get_array	msession 変数の配列を得る	array msession_get_array ( string $session )
msession_get_data	データセッションの、構造化されていないデータを取得する	string msession_get_data ( string $session )
msession_get	セッションから値を取得する	string msession_get ( string $session , string $name , string $value )
msession_inc	セッションの値を増加させる	string msession_inc ( string $session , string $name )
msession_list	すべてのセッションの一覧を取得する	array msession_list ( void )
msession_listvar	セッションの一覧を変数を使用して取得する	array msession_listvar ( string $name )	name という名前の変数を有する全ての セッションを値とする連想配列を返します。
msession_lock	セッションをロックする	int msession_lock ( string $name )
msession_plugin	msession personality プラグイン内のエスケープ関数をコールする	string msession_plugin ( string $session , string $val [, string $param ] )
msession_randstr	ランダムな文字列を取得する	string msession_randstr ( int $param )
msession_set_array	セッションに配列の値を設定する	void msession_set_array ( string $session , array $tuples )
msession_set_data	データセッションの、構造化されていないデータを設定する	bool msession_set_data ( string $session , string $value )
msession_set	セッションに値を設定する	bool msession_set ( string $session , string $name , string $value )
msession_timeout	セッションの有効期間を設定/取得する	int msession_timeout ( string $session [, int $param ] )
msession_uniq	ユニークな ID を取得する	string msession_uniq ( int $param [, string $classname [, string $data ]] )
msession_unlock	セッションのロックを解除する	int msession_unlock ( string $session , int $key )
msg_get_queue	メッセージキューを作成またはそれにアタッチする	resource msg_get_queue ( int $key [, int $perms = 0666 ] )	リソースハンドルを返します。これを使用して、System V メッセージキューにアクセスします。
msg_queue_exists	メッセージキューが存在するかどうかを調べる	bool msg_queue_exists ( int $key )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
msg_receive	メッセージキューからメッセージを受信する	bool msg_receive ( resource $queue , int $desiredmsgtype , int &$msgtype , int $maxsize , mixed &$message [, bool $unserialize = true [, int $flags = 0 [, int &$errorcode ]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
msg_remove_queue	メッセージキューを破棄する	bool msg_remove_queue ( resource $queue )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
msg_send	メッセージキューにメッセージを送信する	bool msg_send ( resource $queue , int $msgtype , mixed $message [, bool $serialize = true [, bool $blocking = true [, int &$errorcode ]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
msg_set_queue	メッセージキューデータ構造体の情報を設定する	bool msg_set_queue ( resource $queue , array $data )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
msg_stat_queue	メッセージキューデータ構造体の情報を返す	array msg_stat_queue ( resource $queue )	返り値は配列で、そのキーと値は以下のような意味をもちます。 msg_stat_queue の配列構造 msg_perm.uid キューの所有者の uid 。 msg_perm.gid キューの所有者の gid 。 msg_perm.mode キューのファイルアクセスモード。 msg_stime キューに対して最後にメッセージが送信された時刻。 msg_rtime キューから最後にメッセージを受信した時刻。 msg_ctime キューが最後に更新された時刻。 msg_qnum キューにある読み込み待ちのメッセージの数。 msg_qbytes ひとつのメッセージキューに含められる最大のバイト数。 Linux では、この値の取得や設定を /proc/sys/kernel/msgmnb で行えます。 msg_lspid 最後にキューに対してメッセージを送信したプロセスの pid 。 msg_lrpid 最後にキューからメッセージを受信したプロセスの pid 。
msql_affected_rows	変更された行の数を返す	int msql_affected_rows ( resource $result )	成功した場合には変更された行の数、エラー時に FALSE を返します。
msql_close	mSQL 接続を閉じる	bool msql_close ([ resource $link_identifier ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
msql_connect	mSQL 接続を開く	resource msql_connect ([ string $hostname ] )	成功した場合には正の mSQL リンク IDを、エラー時には FALSE を返します。
msql_create_db	mSQL データベースを作成する	bool msql_create_db ( string $database_name [, resource $link_identifier ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
msql_createdb	msql_create_db() のエイリアス
msql_data_seek	行に関する内部ポインタを移動する	bool msql_data_seek ( resource $result , int $row_number )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
msql_db_query	mSQL クエリを送信する	resource msql_db_query ( string $database , string $query [, resource $link_identifier ] )	成功した場合には正の mSQL リンク IDを、エラー時には FALSE を返します。
msql_dbname	msql_result() のエイリアス
msql_drop_db	mSQL データベースを破棄(削除)する	bool msql_drop_db ( string $database_name [, resource $link_identifier ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
msql_error	最後の msql コールに関するエラーメッセージを返す	string msql_error ( void )	直近のエラーメッセージを返します。エラーが発生しなかった場合は 空文字列を返します。
msql_fetch_array	結果の行を配列として取得する	array msql_fetch_array ( resource $result [, int $result_type ] )	取得した行に対応する配列を返します。行が残っていない場合には FALSE を返します。
msql_fetch_field	フィールド情報を得る	object msql_fetch_field ( resource $result [, int $field_offset = 0 ] )	フィールド情報を含むオブジェクトを返します。プロパティは以下のとおりです。 name - カラム名 table - カラムが属するテーブル名 not_null - カラムが NULL になることができない場合に 1 unique - カラムがユニークキーである場合に 1 type - カラムの型
msql_fetch_object	結果の行をオブジェクトとして取得する	object msql_fetch_object ( resource $result )	得た行に対応するプロパティを有するオブジェクトを返します。 もう行がない場合には FALSE を返します。
msql_fetch_row	結果の行を数値配列として取得する	array msql_fetch_row ( resource $result )	結果の行に対応する配列を返します。もう行がない場合には FALSE を返します。
msql_field_flags	フィールドのフラグを取得する	string msql_field_flags ( resource $result , int $field_offset )	指定したキーのフィールドフラグを含む文字列を返します。 とりうる値は: primary key not null、 not null、primary key、 unique not null あるいは unique です。
msql_field_len	フィールドの長さを取得する	int msql_field_len ( resource $result , int $field_offset )	指定したフィールドの長さを返します。エラー時には FALSE を返します。
msql_field_name	結果における指定したフィールドの名前を取得する	string msql_field_name ( resource $result , int $field_offset )	フィールドの名前を返します。失敗した場合に FALSE を返します。
msql_field_seek	フィールドオフセットを設定する	bool msql_field_seek ( resource $result , int $field_offset )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
msql_field_table	フィールドのテーブル名を取得する	int msql_field_table ( resource $result , int $field_offset )	成功した場合はテーブルの名前、失敗した場合に FALSE を返します。
msql_field_type	フィールドの型を取得する	string msql_field_type ( resource $result , int $field_offset )	フィールドの型。int、 char、real、ident、 null あるいは unknown のいずれか。 失敗した場合には FALSE を返します。
msql_fieldflags	msql_field_flags() のエイリアス
msql_fieldlen	msql_field_len() のエイリアス
msql_fieldname	msql_field_name() のエイリアス
msql_fieldtable	msql_field_table() のエイリアス
msql_fieldtype	msql_field_type() のエイリアス
msql_free_result	結果保持用メモリを開放する	bool msql_free_result ( resource $result )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
msql_list_dbs	サーバー上の mSQL データベースのリストを返す	resource msql_list_dbs ([ resource $link_identifier ] )	結果セットを返します。これは msql_fetch_array() のような結果セットを読み込む関数によって処理が可能です。失敗した場合は、 この関数は FALSE を返します。
msql_list_fields	結果フィールドのリストを得る	resource msql_list_fields ( string $database , string $tablename [, resource $link_identifier ] )	結果セットを返します。これは msql_fetch_array() のような結果セットを読み込む関数によって処理が可能です。失敗した場合は、 この関数は FALSE を返します。
msql_list_tables	mSQL データベースにおけるテーブルのリストを得ます	resource msql_list_tables ( string $database [, resource $link_identifier ] )	結果セットを返します。これは msql_fetch_array() のような結果セットを読み込む関数によって処理が可能です。失敗した場合は、 この関数は FALSE を返します。
msql_num_fields	結果におけるフィールドの数を得る	int msql_num_fields ( resource $result )	結果セットにおけるフィールドの数を返します。
msql_num_rows	結果における行の数を得る	int msql_num_rows ( resource $query_identifier )	結果セットにおける行の数を返します。
msql_numfields	msql_num_fields() のエイリアス
msql_numrows	msql_num_rows() のエイリアス
msql_pconnect	持続的な mSQL 接続をオープンする	resource msql_pconnect ([ string $hostname ] )	成功した場合には正の mSQL リンク IDを、エラー時には FALSE を返します。
msql_query	mSQL クエリを送信する	resource msql_query ( string $query [, resource $link_identifier ] )	成功した場合には正の mSQL リンク IDを、エラー時には FALSE を返します。
msql_regcase	sql_regcase() のエイリアス
msql_result	結果のデータを得る	string msql_result ( resource $result , int $row [, mixed $field ] )	指定した mSQL 結果セットから、行とオフセットに対応するセルの内容を返します。
msql_select_db	mSQL データベースを選択する	bool msql_select_db ( string $database_name [, resource $link_identifier ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
msql_tablename	msql_result() のエイリアス
msql	msql_db_query() のエイリアス
mssql_bind	ストアドプロシージャまたはリモートストアドプロシージャへパラメータを追加する	bool mssql_bind ( resource $stmt , string $param_name , mixed &$var , int $type [, bool $is_output = false [, bool $is_null = false [, int $maxlen = -1 ]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mssql_close	MS SQL Server への接続を閉じる	bool mssql_close ([ resource $link_identifier ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mssql_connect	MS SQL サーバー接続をオープンする	resource mssql_connect ([ string $servername [, string $username [, string $password [, bool $new_link = false ]]]] )	成功時に MS SQL リンク ID、エラー発生時に FALSE を返します。
mssql_data_seek	内部行ポインタを移動する	bool mssql_data_seek ( resource $result_identifier , int $row_number )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mssql_execute	MS SQL サーバーデータベースでストアドプロシージャを実行する	mixed mssql_execute ( resource $stmt [, bool $skip_results = false ] )
mssql_fetch_array	連想配列・数値添字配列・あるいはその両方で結果の行を取得する	array mssql_fetch_array ( resource $result [, int $result_type = MSSQL_BOTH ] )	取得された行に対応する配列、行がもうない場合に FALSE を返します。
mssql_fetch_assoc	結果の現在行を連想配列として返す	array mssql_fetch_assoc ( resource $result_id )	取得した行に対応する連想配列を返します。もう行がない場合は FALSE を返します。
mssql_fetch_batch	レコードの次のバッチを返す	int mssql_fetch_batch ( resource $result )	返されたバッチ内の行番号を返します。
mssql_fetch_field	フィールド情報を取得する	object mssql_fetch_field ( resource $result [, int $field_offset = -1 ] )	フィールド情報を含むオブジェクトを返します。
mssql_fetch_object	オブジェクトとして行を取得する	object mssql_fetch_object ( resource $result )	取得された行に対応するプロパティを有するオブジェクト、 またはもう行がない場合に FALSE を返します。
mssql_fetch_row	配列として行を取得する	array mssql_fetch_row ( resource $result )	取得された行に対応する配列、または行がもうない場合に FALSE を返します。
mssql_field_length	フィールド長を得る	int mssql_field_length ( resource $result [, int $offset = -1 ] )	成功した場合は指定したフィールドの長さ、 失敗した場合に FALSE を返します。
mssql_field_name	フィールド名を得る	string mssql_field_name ( resource $result [, int $offset = -1 ] )	成功した場合は指定したフィールドインデックスの名前、 失敗した場合に FALSE を返します。
mssql_field_seek	指定したフィールドオフセットに移動する	bool mssql_field_seek ( resource $result , int $field_offset )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mssql_field_type	フィールド型を得る	string mssql_field_type ( resource $result [, int $offset = -1 ] )	成功した場合は指定したフィールドインデックスの型、 失敗した場合に FALSE を返します。
mssql_free_result	結果保持用メモリを解放する	bool mssql_free_result ( resource $result )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mssql_free_statement	ステートメントのメモリを開放する	bool mssql_free_statement ( resource $stmt )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mssql_get_last_message	サーバーの直近のメッセージを返す	string mssql_get_last_message ( void )	サーバーからの直近のエラーメッセージ、 あるいは MSSQL でエラーが発生していない場合は空の文字列を返します。
mssql_guid_string	16 バイトバイナリ GUID を文字列に変換する	string mssql_guid_string ( string $binary [, bool $short_format = false ] )	成功したばあいに変換後の文字列を返します。
mssql_init	ストアドプロシージャまたはリモートのストアドプロシージャを初期化する	resource mssql_init ( string $sp_name [, resource $link_identifier ] )	"statement" リソースの ID を返します。これを使用して、 mssql_bind() や mssql_execute() をコールします。エラー時には FALSE を返します。
mssql_min_error_severity	最小のエラー深刻度を設定する	void mssql_min_error_severity ( int $severity )	値を返しません。
mssql_min_message_severity	最小のメッセージ深刻度を設定する	void mssql_min_message_severity ( int $severity )	値を返しません。
mssql_next_result	次の結果に内部結果ポインタを移動する	bool mssql_next_result ( resource $result_id )	追加の結果集合が取得可能な場合に TRUE、 その他の場合に FALSE を返します。
mssql_num_fields	結果のフィールド数を得る	int mssql_num_fields ( resource $result )	フィールドの数を整数値で返します。
mssql_num_rows	結果の行数を得る	int mssql_num_rows ( resource $result )	行の数を整数値で返します。
mssql_pconnect	持続的 MS SQL 接続をオープンする	resource mssql_pconnect ([ string $servername [, string $username [, string $password [, bool $new_link = false ]]]] )	成功時に正の MS SQL 持続的リンク ID、エラー時に FALSE を返します。
mssql_query	MS SQL クエリを送る	mixed mssql_query ( string $query [, resource $link_identifier [, int $batch_size = 0 ]] )	成功時に MS SQL 結果 ID、結果が返されなかった場合に TRUE、エラー時に FALSE を返します。
mssql_result	結果データを得る	string mssql_result ( resource $result , int $row , mixed $field )	指定したセルの内容を返します。
mssql_rows_affected	クエリによって変更されたレコード数を返す	int mssql_rows_affected ( resource $link_identifier )	直近の書き込みクエリによって変更されたレコード数を返します。
mssql_select_db	MS SQL データベースを選択する	bool mssql_select_db ( string $database_name [, resource $link_identifier ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mt_getrandmax	乱数値の最大値を表示する	int mt_getrandmax ( void )	mt_rand() が返す乱数の最大値を返します。
mt_rand	よりよい乱数値を生成する	int mt_rand ( void )	min (あるいは 0) から max (あるいは mt_getrandmax() 、それぞれ端点を含む) までの間のランダムな整数値を返します。 max が min より小さい場合は FALSE を返します。
mt_srand	改良型乱数生成器にシードを指定する	void mt_srand ([ int $seed ] )	値を返しません。
mysql_affected_rows	一番最近の操作で変更された行の数を得る	int mysql_affected_rows ([ resource $link_identifier = NULL ] )	成功した場合に変更された行の数を、直近のクエリが失敗した場合に -1 を返します。
mysql_client_encoding	文字セット名を返す	string mysql_client_encoding ([ resource $link_identifier = NULL ] )	カレントの接続から、デフォルトの文字セット名を返します。
mysql_close	MySQL 接続を閉じる	bool mysql_close ([ resource $link_identifier = NULL ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mysql_connect	MySQL サーバーへの接続をオープンする	resource mysql_connect ([ string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, bool $new_link = false [, int $client_flags = 0 ]]]]] )	成功した場合に MySQL リンク ID を、失敗した場合に FALSE を返します。
mysql_create_db	MySQL データベースを作成する	bool mysql_create_db ( string $database_name [, resource $link_identifier = NULL ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mysql_data_seek	内部的な結果ポインタを移動する	bool mysql_data_seek ( resource $result , int $row_number )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mysql_db_name	mysql_list_dbs() のコール結果からデータベース名を取得する	string mysql_db_name ( resource $result , int $row [, mixed $field = NULL ] )	成功した場合にデータベース名を、失敗した場合に FALSE を返します。 FALSE が返された場合、エラーの発生源を特定するには mysql_error() を使用してください。
mysql_db_query	データベースを選択し、そこでクエリーを実行する	resource mysql_db_query ( string $database , string $query [, resource $link_identifier = NULL ] )	クエリーの結果を指す MySQL 結果リソースを正の値で返します。 エラー時には FALSE を返します。また、 INSERT/UPDATE/DELETE クエリーの場合には TRUE または FALSE を返し、これらはそれぞれ クエリーが 成功した / 失敗した ことを示します。
mysql_drop_db	MySQLデータベースを破棄(削除)する	bool mysql_drop_db ( string $database_name [, resource $link_identifier = NULL ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mysql_errno	直近の MySQL 処理からエラーメッセージのエラー番号を返す	int mysql_errno ([ resource $link_identifier = NULL ] )	直近の MySQL 関数からのエラー番号を返します。エラーが発生していない 場合は、0 (ゼロ)を返します。
mysql_error	直近に実行された MySQL 操作のエラーメッセージを返す	string mysql_error ([ resource $link_identifier = NULL ] )	直近の MySQL 関数からのエラー文字列を返します。エラーが発生していない 場合には、'' (空文字列) を返します。
mysql_escape_string	mysql_query で使用するために文字列をエスケープする	string mysql_escape_string ( string $unescaped_string )	エスケープされた文字列を返します。
mysql_fetch_array	連想配列、添字配列、またはその両方として結果の行を取得する	array mysql_fetch_array ( resource $result [, int $result_type = MYSQL_BOTH ] )	取得した行をあらわす文字列の配列を返します。もし行が存在しない場合は FALSE を返します。返される配列の形式は、result_type がどのように指定されているかによります。MYSQL_BOTH（デフォルト） を利用すると、連想添字と数値添字を共に持つ配列を取得します。 MYSQL_ASSOC を利用すると（ mysql_fetch_assoc() の動作と同様に）連想添字のみが取得され、 MYSQL_NUM を利用すると （ mysql_fetch_row() の動作と同様に）数値添字のみが 取得されます。
mysql_fetch_assoc	連想配列として結果の行を取得する	array mysql_fetch_assoc ( resource $result )	取得した行に対応する文字列の連想配列を返します。行がもうない場合には FALSE を返します。
mysql_fetch_field	結果からカラム情報を取得し、オブジェクトとして返す	object mysql_fetch_field ( resource $result [, int $field_offset = 0 ] )	フィールド情報を含むobject を返します。オブジェクトの プロパティは次のとおりです。
mysql_fetch_lengths	結果における各出力の長さを得る	array mysql_fetch_lengths ( resource $result )	成功した場合に長さの配列（array ）を、 失敗した場合に FALSE を返します。
mysql_fetch_object	結果の行をオブジェクトとして取得する	object mysql_fetch_object ( resource $result [, string $class_name [, array $params ]] )	取得された行を表す文字列プロパティを有するオブジェクト(object )を返します。 もう行が残っていない場合は、FALSE を返します。
mysql_fetch_row	結果を添字配列として取得する	array mysql_fetch_row ( resource $result )	取得された行に対応する文字列の配列を返します。もう行がない場合は、 FALSE を返します。
mysql_field_flags	結果において指定したフィールドのフラグを取得する	string mysql_field_flags ( resource $result , int $field_offset )	結果についてのフラグを文字列で返します。失敗した場合に FALSE を返します。
mysql_field_len	指定したフィールドの長さを返す	int mysql_field_len ( resource $result , int $field_offset )	成功した場合には指定したフィールドの長さ、失敗した場合に FALSE を返します。
mysql_field_name	結果において指定したフィールド名を取得する	string mysql_field_name ( resource $result , int $field_offset )	成功した場合に指定したフィールドの名前を、失敗した場合に FALSE を返します。
mysql_field_seek	結果ポインタを指定したフィールドオフセットにセットする	bool mysql_field_seek ( resource $result , int $field_offset )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mysql_field_table	指定したフィールドが含まれるテーブルの名前を取得する	string mysql_field_table ( resource $result , int $field_offset )	成功した場合にテーブルの名前を返します。
mysql_field_type	結果において指定したフィールドの型を取得する	string mysql_field_type ( resource $result , int $field_offset )	返されるフィールド型は "int", "real", "string", "blob", そして その他 &raquo;&nbsp;MySQL ドキュメント で詳細が規定されている型のうちのひとつになります。
mysql_free_result	結果保持用メモリを開放する	bool mysql_free_result ( resource $result )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mysql_get_client_info	MySQL クライアント情報を取得する	string mysql_get_client_info ( void )	MySQL クライアントのバージョンを返します。
mysql_get_host_info	MySQL ホスト情報を取得する	string mysql_get_host_info ([ resource $link_identifier = NULL ] )	使用されている MySQL 接続の型を表す文字列を返します。 失敗した場合に FALSE を返します。
mysql_get_proto_info	MySQL プロトコル情報を取得する	int mysql_get_proto_info ([ resource $link_identifier = NULL ] )	成功した場合に MySQL プロトコル、失敗した場合に FALSE を返します。
mysql_get_server_info	MySQL サーバー情報を取得する	string mysql_get_server_info ([ resource $link_identifier = NULL ] )	成功した場合に MySQL サーバーのバージョン、失敗した場合に FALSE を返します。
mysql_info	直近のクエリについての情報を得る	string mysql_info ([ resource $link_identifier = NULL ] )	成功した場合に文についての情報、失敗した場合に FALSE を返します。 どんな文が情報を返し、またそれがどのように見えるのかについては、以下の 例を参照ください。ここに挙げられていない文では FALSE が返されます。
mysql_insert_id	直近のクエリで生成された ID を得る	int mysql_insert_id ([ resource $link_identifier = NULL ] )	直近のクエリにより AUTO_INCREMENT カラム用に生成された ID を返します。直近のクエリが AUTO_INCREMENT な値を生成しなかった 場合に 0、MySQL 接続が確立されていなかった 場合に FALSE を返します。
mysql_list_dbs	MySQL サーバー上で利用可能なデータベースのリストを得る	resource mysql_list_dbs ([ resource $link_identifier = NULL ] )	成功した場合に結果ポインタ resource を、失敗した場合に FALSE を返します。結果ポインタの中身を調べるために mysql_tablename() 関数を利用し、取得したテーブルを 利用するには mysql_fetch_array() などの関数を 利用してください。
mysql_list_fields	MySQL テーブルのフィールドのリストを得る	resource mysql_list_fields ( string $database_name , string $table_name [, resource $link_identifier = NULL ] )	成功した場合に結果ポインタ resource 、失敗した場合に FALSE を返します。
mysql_list_processes	MySQL プロセスのリストを得る	resource mysql_list_processes ([ resource $link_identifier = NULL ] )	成功した場合に結果ポインタ resource 、 失敗した場合に FALSE を返します。
mysql_list_tables	MySQL データベース上のテーブルのリストを得る	resource mysql_list_tables ( string $database [, resource $link_identifier = NULL ] )	成功した場合に結果ポインタ resource 、 失敗した場合に FALSE を返します。
mysql_num_fields	結果におけるフィールドの数を得る	int mysql_num_fields ( resource $result )	成功した場合に結果セット resource のフィールド数、 失敗した場合に FALSE を返します。
mysql_num_rows	結果における行の数を得る	int mysql_num_rows ( resource $result )	成功した場合に結果セットの行の数、失敗した場合に FALSE を返します。
mysql_pconnect	MySQL サーバーへの持続的な接続をオープンする	resource mysql_pconnect ([ string $server = ini_get("mysql.default_host") [, string $username = ini_get("mysql.default_user") [, string $password = ini_get("mysql.default_password") [, int $client_flags = 0 ]]]] )	成功した場合に MySQL 持続的リンク ID を、失敗した場合に FALSE を返します。
mysql_ping	サーバーとの接続状況を調べ、接続されていない場合は再接続する	bool mysql_ping ([ resource $link_identifier = NULL ] )	MySQL サーバーとの接続が有効な場合に TRUE そうでない場合に FALSE を返します。
mysql_query	MySQL クエリを送信する	resource mysql_query ( string $query [, resource $link_identifier = NULL ] )	SELECT, SHOW, DESCRIBE や EXPLAIN 文、その他結果セットを返す文では、 mysql_query() は成功した場合に resource を返します。エラー時には FALSE を返します。
mysql_real_escape_string	SQL 文中で用いる文字列の特殊文字をエスケープする	string mysql_real_escape_string ( string $unescaped_string [, resource $link_identifier = NULL ] )	成功した場合にエスケープ後の文字列、失敗した場合に FALSE を返します。
mysql_result	結果データを得る	string mysql_result ( resource $result , int $row [, mixed $field = 0 ] )	成功した場合に MySQL 結果セットのひとつのセルの内容、 失敗した場合に FALSE を返します。
mysql_select_db	MySQL データベースを選択する	bool mysql_select_db ( string $database_name [, resource $link_identifier = NULL ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mysql_set_charset	クライアントの文字セットを設定する	bool mysql_set_charset ( string $charset [, resource $link_identifier = NULL ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mysql_stat	現在のシステムの状態を取得する	string mysql_stat ([ resource $link_identifier = NULL ] )	稼働時間、スレッド、クエリ、オープンされているテーブル、フラッシュされた テーブル、そして 1 秒あたりのクエリ数を文字列で返します。その他のデータも 含めた完全な状態を得るには、SHOW STATUS SQL コマンドを 実行する必要があります。link_identifier が不正な 場合には NULL が返されます。
mysql_tablename	フィールドのテーブル名を得る	string mysql_tablename ( resource $result , int $i )	成功した場合にテーブル名、失敗した場合に FALSE を返します。
mysql_thread_id	カレントのスレッド ID を返す	int mysql_thread_id ([ resource $link_identifier = NULL ] )	成功した場合にスレッド ID 、失敗した場合に FALSE を返します。
mysql_unbuffered_query	MySQL に SQL クエリを送信するが、結果に対してのフェッチやバッファリングは行わない	resource mysql_unbuffered_query ( string $query [, resource $link_identifier = NULL ] )	SELECT, SHOW, DESCRIBE あるいは EXPLAIN では、 mysql_unbuffered_query() は 成功した場合に resource 、エラー時に FALSE を返します。
mysqli_bind_param	mysqli_stmt_bind_param() のエイリアス
mysqli_bind_result	mysqli_stmt_bind_result() のエイリアス
mysqli_client_encoding	mysqli_character_set_name() のエイリアス
mysqli_connect	mysqli::__construct() のエイリアス
mysqli::disable_reads_from_master	マスタからの読み込みを無効にする	void mysqli::disable_reads_from_master ( void )
mysqli_disable_rpl_parse	RPL のパースを無効にする	bool mysqli_disable_rpl_parse ( mysqli $link )
mysqli_enable_reads_from_master	マスタからの読み込みを有効にする	bool mysqli_enable_reads_from_master ( mysqli $link )
mysqli_enable_rpl_parse	RPL のパースを有効にする	bool mysqli_enable_rpl_parse ( mysqli $link )
mysqli_escape_string	mysqli_real_escape_string() のエイリアス
mysqli_execute	mysqli_stmt_execute() のエイリアス
mysqli_fetch	mysqli_stmt_fetch() のエイリアス
mysqli_get_cache_stats	クライアントの Zval キャッシュの統計情報を返す	array mysqli_get_cache_stats ( void )	成功した場合にクライアントの Zval キャッシュの統計情報を含む配列、それ以外の場合に FALSE を返します。
mysqli_get_metadata	mysqli_stmt_result_metadata() のエイリアス
mysqli_master_query	マスタ/スレーブ設定で、マスタ側のクエリを実行する	bool mysqli_master_query ( mysqli $link , string $query )
mysqli_param_count	mysqli_stmt_param_count() のエイリアス
mysqli_report	mysqli_driver->report_mode のエイリアス
mysqli_rpl_parse_enabled	RPL のパースが有効かどうかを確認する	int mysqli_rpl_parse_enabled ( mysqli $link )
mysqli_rpl_probe	RPL の調査	bool mysqli_rpl_probe ( mysqli $link )
mysqli_send_long_data	mysqli_stmt_send_long_data() のエイリアス
mysqli::set_opt	mysqli_options() のエイリアス
mysqli_slave_query	マスタ/スレーブ設定で、スレーブ側のクエリを実行する	bool mysqli_slave_query ( mysqli $link , string $query )
mysqlnd_memcache_get_config	プラグインの設定情報を返す	array mysqlnd_memcache_get_config ( mixed $connection )	成功した場合に mysqlnd_memcache の設定情報の配列、それ以外の場合に FALSE を返します。
mysqlnd_memcache_set	MySQL の接続を Memcache の接続と関連づける	bool mysqlnd_memcache_set ( mixed $mysql_connection [, Memcached $memcache_connection [, string $pattern [, callback $callback ]]] )	関連づけ、あるいはその解除が成功した場合に TRUE、 エラーが発生した場合に FALSE を返します。
mysqlnd_ms_get_last_gtid	Returns the latest global transaction ID	string mysqlnd_ms_get_last_gtid ( mixed $connection )	Returns a global transaction ID (GTID) on success. Otherwise, returns FALSE.
mysqlnd_ms_get_last_used_connection	Returns an array which describes the last used connection	array mysqlnd_ms_get_last_used_connection ( mixed $connection )	FALSE on error. Otherwise, an array which describes the connection used to execute the last statement on.
mysqlnd_ms_get_stats	Returns query distribution and connection statistics	array mysqlnd_ms_get_stats ( void )	Returns NULL if the PHP configuration directive mysqlnd_ms.enable has disabled the plugin. Otherwise, returns array of statistics.
mysqlnd_ms_match_wild	Finds whether a table name matches a wildcard pattern or not	bool mysqlnd_ms_match_wild ( string $table_name , string $wildcard )	Returns TRUE table_name is matched by wildcard. Otherwise, returns FALSE
mysqlnd_ms_query_is_select	Find whether to send the query to the master, the slave or the last used MySQL server	int mysqlnd_ms_query_is_select ( string $query )	A return value of MYSQLND_MS_QUERY_USE_MASTER indicates that the query should be send to the MySQL replication master server. The function returns a value of MYSQLND_MS_QUERY_USE_SLAVE if the query can be run on a slave because it is considered read-only. A value of MYSQLND_MS_QUERY_USE_LAST_USED is returned to recommend running the query on the last used server. This can either be a MySQL replication master server or a MySQL replication slave server.
mysqlnd_ms_set_qos	Sets the quality of service needed from the cluster	bool mysqlnd_ms_set_qos ( mixed $connection , int $service_level [, int $service_level_option [, mixed $option_value ]] )	Returns TRUE if the connections service level has been switched to the requested. Otherwise, returns FALSE
mysqlnd_ms_set_user_pick_server	Sets a callback for user-defined read/write splitting	bool mysqlnd_ms_set_user_pick_server ( string $function )	Host to run the query on. The host URI is to be taken from the master and slave connection lists passed to the callback function. If callback returns a value neither found in the master nor in the slave connection lists the plugin will fallback to the second pick method configured via the pick[] setting in the plugin configuration file. If not second pick method is given, the plugin falls back to the build-in default pick method for server selection.
mysqlnd_qc_clear_cache	Flush all cache contents	bool mysqlnd_qc_clear_cache ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mysqlnd_qc_get_available_handlers	Returns a list of available storage handler	array mysqlnd_qc_get_available_handlers ( void )	Returns an array of available built-in storage handler. For each storage handler the version number and version string is given.
mysqlnd_qc_get_cache_info	Returns information on the current handler, the number of cache entries and cache entries, if available	array mysqlnd_qc_get_cache_info ( void )	Returns information on the current handler, the number of cache entries and cache entries, if available. If and what data will be returned for the cache entries is subject to the active storage handler. Storage handler are free to return any data. Storage handler are recommended to return at least the data provided by the default handler, if technically possible.
mysqlnd_qc_get_core_stats	Statistics collected by the core of the query cache	array mysqlnd_qc_get_core_stats ( void )	Array of core statistics
mysqlnd_qc_get_normalized_query_trace_log	Returns a normalized query trace log for each query inspected by the query cache	array mysqlnd_qc_get_normalized_query_trace_log ( void )	An array of query log. Every list entry contains the normalized query stringand further detail information.
mysqlnd_qc_get_query_trace_log	Returns a backtrace for each query inspected by the query cache	array mysqlnd_qc_get_query_trace_log ( void )	An array of query backtrace. Every list entry contains the query string, a backtrace and further detail information.
mysqlnd_qc_set_cache_condition	Set conditions for automatic caching	bool mysqlnd_qc_set_cache_condition ( int $condition_type , mixed $condition , mixed $condition_option )	Returns TRUE on success or FALSE on FAILURE.
mysqlnd_qc_set_is_select	Installs a callback which decides whether a statement is cached	mixed mysqlnd_qc_set_is_select ( string $callback )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mysqlnd_qc_set_storage_handler	Change current storage handler	bool mysqlnd_qc_set_storage_handler ( string $handler )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
mysqlnd_qc_set_user_handlers	Sets the callback functions for a user-defined procedural storage handler	bool mysqlnd_qc_set_user_handlers ( string $get_hash , string $find_query_in_cache , string $return_to_cache , string $add_query_to_cache_if_not_exists , string $query_is_select , string $update_query_run_time_stats , string $get_stats , string $clear_cache )	Returns TRUE on success or FALSE on FAILURE.
mysqlnd_uh_convert_to_mysqlnd	Converts a MySQL connection handle into a mysqlnd connection handle	resource mysqlnd_uh_convert_to_mysqlnd ( mysqli &$mysql_connection )	A mysqlnd connection handle.
mysqlnd_uh_set_connection_proxy	Installs a proxy for mysqlnd connections	bool mysqlnd_uh_set_connection_proxy ( MysqlndUhConnection &$connection_proxy [, mysqli &$mysqli_connection ] )	Returns TRUE on success. Otherwise, returns FALSE
mysqlnd_uh_set_statement_proxy	Installs a proxy for mysqlnd statements	bool mysqlnd_uh_set_statement_proxy ( MysqlndUhStatement &$statement_proxy )	Returns TRUE on success. Otherwise, returns FALSE
natcasesort	大文字小文字を区別しない"自然順"アルゴリズムを用いて配列をソートする	bool natcasesort ( array &$array )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
natsort	"自然順"アルゴリズムで配列をソートする	bool natsort ( array &$array )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ncurses_addch	現在の位置に文字を追加し、カーソルを進める	int ncurses_addch ( int $ch )
ncurses_addchnstr	現在の位置に指定した長さの属性付き文字列を追加する	int ncurses_addchnstr ( string $s , int $n )
ncurses_addchstr	現在の位置に属性付き文字列を追加する	int ncurses_addchstr ( string $s )
ncurses_addnstr	現在の位置に、指定した長さの文字列を追加する	int ncurses_addnstr ( string $s , int $n )
ncurses_addstr	現在の位置にテキストを出力する	int ncurses_addstr ( string $text )
ncurses_assume_default_colors	カラー 0 のデフォルト色を定義する	int ncurses_assume_default_colors ( int $fg , int $bg )
ncurses_attroff	指定した属性を無効とする	int ncurses_attroff ( int $attributes )
ncurses_attron	指定した属性を有効にする	int ncurses_attron ( int $attributes )
ncurses_attrset	指定した属性を設定する	int ncurses_attrset ( int $attributes )
ncurses_baudrate	端末のボーレートを返す	int ncurses_baudrate ( void )
ncurses_beep	端末のビープを鳴らす	int ncurses_beep ( void )
ncurses_bkgd	端末画面の背景属性を設定する	int ncurses_bkgd ( int $attrchar )
ncurses_bkgdset	画面背景を制御する	void ncurses_bkgdset ( int $attrchar )
ncurses_border	属性付きの文字で画面周囲に境界を描画する	int ncurses_border ( int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner )
ncurses_bottom_panel	パネルをスタックの最下部に移動する	int ncurses_bottom_panel ( resource $panel )
ncurses_can_change_color	端末の色を変更可能かどうか確認する	bool ncurses_can_change_color ( void )	プログラマが色定義を変更できる場合に TRUE、それ以外の場合に FALSE を返します。
ncurses_cbreak	入力のバッファリングを変更する	bool ncurses_cbreak ( void )	TRUE を返します。エラーが発生した場合は NCURSES_ERR を返します。
ncurses_clear	スクリーンをクリアする	bool ncurses_clear ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ncurses_clrtobot	現在位置から最下部までスクリーンをクリアする	bool ncurses_clrtobot ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ncurses_clrtoeol	現在位置から行末までスクリーンをクリアする	bool ncurses_clrtoeol ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ncurses_color_content	色の RGB 値を取得する	int ncurses_color_content ( int $color , int &$r , int &$g , int &$b )	関数が成功した場合は -1、 ncurses や端末の色機能の初期化ができていない場合は 0 を返します。
ncurses_color_set	前景/背景色を設定する	int ncurses_color_set ( int $pair )	成功した場合に -1、失敗した場合に 0 を返します。
ncurses_curs_set	カーソル状態を設定する	int ncurses_curs_set ( int $visibility )
ncurses_def_prog_mode	端末(プログラム)モードを保存する	bool ncurses_def_prog_mode ( void )	成功した場合に FALSE、それ以外の場合に TRUE を返します。
ncurses_def_shell_mode	端末(シェル)モードを保存する	bool ncurses_def_shell_mode ( void )	成功した場合に FALSE、それ以外の場合に TRUE を返します。
ncurses_define_key	キーコードを定義する	int ncurses_define_key ( string $definition , int $keycode )
ncurses_del_panel	パネルをスタックから取り除き、削除する (しかし、関連付けられているウィンドウは削除しない)	bool ncurses_del_panel ( resource $panel )
ncurses_delay_output	パディング文字を用いて端末出力を遅延させる	int ncurses_delay_output ( int $milliseconds )
ncurses_delch	現在位置の文字を削除し、残った部分を左に移動する	bool ncurses_delch ( void )	成功した場合に FALSE、 それ以外の場合に TRUE を返します。
ncurses_deleteln	現在位置の行を削除し、残りの部分を上に上げる	bool ncurses_deleteln ( void )	成功した場合に FALSE、それ以外の場合に TRUE を返します。
ncurses_delwin	ncurses ウインドウを削除する	bool ncurses_delwin ( resource $window )
ncurses_doupdate	準備中の全ての出力を書き込み、端末をリフレッシュする	bool ncurses_doupdate ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ncurses_echo	キーボード入力のエコーを有効とする	bool ncurses_echo ( void )	成功した場合に FALSE、何らかのエラーが発生した場合に TRUE を返します。
ncurses_echochar	リフレッシュを行いつつ 1 文字出力する	int ncurses_echochar ( int $character )
ncurses_end	ncurses を終了し、画面を消去する	int ncurses_end ( void )
ncurses_erase	端末画面を消去する	bool ncurses_erase ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ncurses_erasechar	現在の erase 文字を返す	string ncurses_erasechar ( void )	現在の erase 文字を文字列で返します。
ncurses_filter	iniscr() および newterm() の LINES を 1 に設定する	void ncurses_filter ( void )
ncurses_flash	端末画面をフラッシュする(ビジュアルベル)	bool ncurses_flash ( void )	成功した場合に FALSE、そうでない場合に TRUE を返します。
ncurses_flushinp	キーボード入力バッファをフラッシュする	bool ncurses_flushinp ( void )	成功した場合に FALSE、それ以外の場合に TRUE を返します。
ncurses_getch	キーボードから 1 文字読み込む	int ncurses_getch ( void )
ncurses_getmaxyx	ウィンドウの大きさを返す	void ncurses_getmaxyx ( resource $window , int &$y , int &$x )	値を返しません。
ncurses_getmouse	マウスイベントを読みこむ	bool ncurses_getmouse ( array &$mevent )	指定したウィンドウでマウスイベントが実際に見える場合に FALSE、そうでない場合に TRUE を返します。
ncurses_getyx	ウィンドウ内の現在のカーソル位置を返す	void ncurses_getyx ( resource $window , int &$y , int &$x )
ncurses_halfdelay	端末をハーフディレイモードにする	int ncurses_halfdelay ( int $tenth )
ncurses_has_colors	カラー端末かどうか確認する	bool ncurses_has_colors ( void )	端末がカラー表示機能を持っている場合に TRUE、持っていない場合に FALSE を返します。
ncurses_has_ic	挿入/削除機能の有無を確認する	bool ncurses_has_ic ( void )	端末が挿入/削除機能を持つ場合に TRUE、それ以外の場合に FALSE を返します。
ncurses_has_il	行挿入/削除機能の有無を確認する	bool ncurses_has_il ( void )	端末が行挿入/削除機能を持つ場合に TRUE、それ以外の場合に FALSE を返します。
ncurses_has_key	端末キーボードにおいてファンクションキーの有無を調べる	int ncurses_has_key ( int $keycode )
ncurses_hide_panel	パネルをスタックから取り除き、見えなくする	int ncurses_hide_panel ( resource $panel )
ncurses_hline	現在位置に属性付きの文字を用いて最大 n 文字長の線を水平に描画する	int ncurses_hline ( int $charattr , int $n )
ncurses_inch	現在位置の文字と属性を取得する	string ncurses_inch ( void )	文字を返します。
ncurses_init_color	端末の色を定義する	int ncurses_init_color ( int $color , int $r , int $g , int $b )	関数が成功した場合は -1、 ncurses や端末の色機能の初期化ができていない場合、 端末に色の変更機能がない場合は 0 を返します。
ncurses_init_pair	色ペアを定義する	int ncurses_init_pair ( int $pair , int $fg , int $bg )	関数が成功した場合は -1、 ncurses や端末の色機能の初期化ができていない場合は 0 を返します。
ncurses_init	ncurses を初期化する	void ncurses_init ( void )	値を返しません。
ncurses_insch	文字を挿入し、現在位置にある文字を含む残りの行を移動する	int ncurses_insch ( int $character )
ncurses_insdelln	現在の行の後に複数の行を挿入し、スクロールダウンする (負の数を指定すると削除し、スクロールアップする)	int ncurses_insdelln ( int $count )
ncurses_insertln	行を挿入し、残りの部分をスクロールダウンする	int ncurses_insertln ( void )
ncurses_insstr	現在位置に文字列を挿入し、残りの行を右に移動する	int ncurses_insstr ( string $text )
ncurses_instr	端末画面から文字列を読み込む	int ncurses_instr ( string &$buffer )	文字の数を返します。
ncurses_isendwin	Ncurses が endwin モードの場合、通常の画面出力が実行可能	bool ncurses_isendwin ( void )	ncurses_end() がコールされた後に 続けて ncurses_wrefresh() がコールされていない場合に TRUE、それ以外の場合に FALSE を返します。
ncurses_keyok	キーコードを有効または無効にする	int ncurses_keyok ( int $keycode , bool $enable )
ncurses_keypad	キーパッドを on あるいは off にする	int ncurses_keypad ( resource $window , bool $bf )
ncurses_killchar	現在の行削除文字を返す	string ncurses_killchar ( void )	現在の行削除文字を返します。
ncurses_longname	端末の説明を返す	string ncurses_longname ( void )	端末の詳細な説明を返します。 説明は、最大 128 文字までで切り詰められます。 エラー時には NULL を返します。
ncurses_meta	8 ビットのメタキー情報を有効/無効にする	int ncurses_meta ( resource $window , bool $8bit )
ncurses_mouse_trafo	座標を変換する	bool ncurses_mouse_trafo ( int &$y , int &$x , bool $toscreen )
ncurses_mouseinterval	マウスボタンクリックのタイムアウトを設定する	int ncurses_mouseinterval ( int $milliseconds )
ncurses_mousemask	マウスオプションを設定する	int ncurses_mousemask ( int $newmask , int &$oldmask )	newmask が指定するイベントを報告することが できるマスクを返します。失敗した場合は 0 を返します。
ncurses_move_panel	左上が [startx, starty] となるようにパネルを移動する	int ncurses_move_panel ( resource $panel , int $startx , int $starty )
ncurses_move	出力位置を移動する	int ncurses_move ( int $y , int $x )
ncurses_mvaddch	現在位置を移動し、文字を追加する	int ncurses_mvaddch ( int $y , int $x , int $c )
ncurses_mvaddchnstr	位置を移動し、指定長の属性付きの文字列を追加する	int ncurses_mvaddchnstr ( int $y , int $x , string $s , int $n )
ncurses_mvaddchstr	位置を移動し、属性付きの文字列を追加する	int ncurses_mvaddchstr ( int $y , int $x , string $s )
ncurses_mvaddnstr	位置を移動し、指定長の文字列を追加する	int ncurses_mvaddnstr ( int $y , int $x , string $s , int $n )
ncurses_mvaddstr	位置を移動し、文字列を追加する	int ncurses_mvaddstr ( int $y , int $x , string $s )
ncurses_mvcur	直ちにカーソルを移動する	int ncurses_mvcur ( int $old_y , int $old_x , int $new_y , int $new_x )
ncurses_mvdelch	位置を移動し、文字を削除、行の残りを左シフトする	int ncurses_mvdelch ( int $y , int $x )
ncurses_mvgetch	位置を移動し、新しい位置で文字を得る	int ncurses_mvgetch ( int $y , int $x )
ncurses_mvhline	位置を新しく設定し、属性付きの文字を用いて最大n文字の水平線を描画	int ncurses_mvhline ( int $y , int $x , int $attrchar , int $n )
ncurses_mvinch	位置を移動し、新しい位置の属性付きの文字を取得する	int ncurses_mvinch ( int $y , int $x )
ncurses_mvvline	位置を新しく設定し、属性付きの文字を用いて最大 n 文字の垂直線を描画する	int ncurses_mvvline ( int $y , int $x , int $attrchar , int $n )
ncurses_mvwaddstr	ウインドウの新規位置に文字列を追加する	int ncurses_mvwaddstr ( resource $window , int $y , int $x , string $text )
ncurses_napms	スリープ	int ncurses_napms ( int $milliseconds )
ncurses_new_panel	新しいパネルを作成し、それをウィンドウに関連づける	resource ncurses_new_panel ( resource $window )
ncurses_newpad	新しいパッド (window) を作成する	resource ncurses_newpad ( int $rows , int $cols )
ncurses_newwin	新規ウインドウを作成する	resource ncurses_newwin ( int $rows , int $cols , int $y , int $x )	新しいウィンドウのリソース ID を返します。
ncurses_nl	改行と復改/ラインフィードを変換する	bool ncurses_nl ( void )
ncurses_nocbreak	端末を cooked モードに変更する	bool ncurses_nocbreak ( void )	何らかのエラーが発生した場合に TRUE、 それ以外の場合に FALSE を返します。
ncurses_noecho	キーボード入力エコーを無効にする	bool ncurses_noecho ( void )	何らかのエラーが発生した場合に TRUE、 それ以外の場合に FALSE を返します。
ncurses_nonl	改行と復改/ラインフィードを変換しない	bool ncurses_nonl ( void )
ncurses_noqiflush	シグナル文字のフラッシュを無効とする	void ncurses_noqiflush ( void )
ncurses_noraw	端末を raw モード以外に変更する	bool ncurses_noraw ( void )	何らかのエラーが発生した場合に TRUE、 それ以外の場合に FALSE を返します。
ncurses_pair_content	色ペアの前景色と背景色を取得する	int ncurses_pair_content ( int $pair , int &$f , int &$b )	関数が成功した場合は -1、 ncurses や端末の色機能の初期化ができていない場合は 0 を返します。
ncurses_panel_above	パネルの上のパネルを返す	resource ncurses_panel_above ( resource $panel )	パネルが null の場合は、スタックの最下部のパネルを返します。
ncurses_panel_below	パネルの下のパネルを返す	resource ncurses_panel_below ( resource $panel )
ncurses_panel_window	パネルに関連付けられたウィンドウを返す	resource ncurses_panel_window ( resource $panel )
ncurses_pnoutrefresh	パッドから仮想画面にリージョンをコピーする	int ncurses_pnoutrefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol )
ncurses_prefresh	パッドから仮想画面にリージョンをコピーする	int ncurses_prefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol )
ncurses_putp	パディング情報を文字列に適用し、それを出力する	int ncurses_putp ( string $text )
ncurses_qiflush	シグナル文字のフラッシュを有効とする	void ncurses_qiflush ( void )
ncurses_raw	端末を raw モードに変更する	bool ncurses_raw ( void )	何らかのエラーが発生した場合に TRUE、 それ以外の場合に FALSE を返します。
ncurses_refresh	画面をリフレッシュする	int ncurses_refresh ( int $ch )
ncurses_replace_panel	パネルに関連付けられたウィンドウを置き換える	int ncurses_replace_panel ( resource $panel , resource $window )
ncurses_reset_prog_mode	def_prog_mode で保存したプログラムモードをリセットする	int ncurses_reset_prog_mode ( void )
ncurses_reset_shell_mode	def_shell_mode で保存したシェルモードをリセットする	int ncurses_reset_shell_mode ( void )
ncurses_resetty	保存した端末モードに復帰する	bool ncurses_resetty ( void )	常に FALSE を返します。
ncurses_savetty	端末の状態を保存する	bool ncurses_savetty ( void )	常に FALSE を返します。
ncurses_scr_dump	画面の内容をファイルにダンプする	int ncurses_scr_dump ( string $filename )
ncurses_scr_init	ファイルダンプから画面を初期化する	int ncurses_scr_init ( string $filename )
ncurses_scr_restore	ファイルダンプから画面を復帰する	int ncurses_scr_restore ( string $filename )
ncurses_scr_set	ファイルダンプから画面を継承する	int ncurses_scr_set ( string $filename )
ncurses_scrl	現在位置を変更せずに画面の内容をスクロールアップまたはダウンする	int ncurses_scrl ( int $count )
ncurses_show_panel	不可視のパネルをスタックの最上部に置き、見えるようにする	int ncurses_show_panel ( resource $panel )
ncurses_slk_attr	現在のソフトラベルキー属性を返す	int ncurses_slk_attr ( void )	属性を整数値で返します。
ncurses_slk_attroff	ソフトファンクションキーラベルの指定した属性を無効にする	int ncurses_slk_attroff ( int $intarg )
ncurses_slk_attron	ソフトファンクションキーラベルの指定した属性を有効にする	int ncurses_slk_attron ( int $intarg )
ncurses_slk_attrset	ソフトファンクションキーラベルに、指定した属性を設定する	int ncurses_slk_attrset ( int $intarg )
ncurses_slk_clear	画面からソフトラベルをクリアする	bool ncurses_slk_clear ( void )	エラー時に TRUE、 それ以外の場合に FALSE を返します。
ncurses_slk_color	ソフトラベルキーの色を設定する	int ncurses_slk_color ( int $intarg )
ncurses_slk_init	ソフトラベルキー関数を初期化する	bool ncurses_slk_init ( int $format )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ncurses_slk_noutrefresh	仮想画面にソフトラベルキーをコピーする	bool ncurses_slk_noutrefresh ( void )
ncurses_slk_refresh	ソフトラベルキーを画面にコピーする	int ncurses_slk_refresh ( void )
ncurses_slk_restore	ソフトラベルキーを復帰する	int ncurses_slk_restore ( void )
ncurses_slk_set	ファンクションキーラベルを設定する	bool ncurses_slk_set ( int $labelnr , string $label , int $format )
ncurses_slk_touch	ncurses_slk_noutrefresh を実行する際に強制的に出力する	int ncurses_slk_touch ( void )
ncurses_standend	'standout' 属性の使用を停止する	int ncurses_standend ( void )
ncurses_standout	'standout' 属性の使用を開始する	int ncurses_standout ( void )
ncurses_start_color	色機能を初期化する	int ncurses_start_color ( void )	成功した場合に 0、 色テーブルの割り当てに失敗した場合や ncurses が初期化されていない場合に -1 を返します。
ncurses_termattrs	端末でサポートされる全ての属性フラグの論理和を返す	bool ncurses_termattrs ( void )
ncurses_termname	端末の(簡略)名を返す	string ncurses_termname ( void )	端末の簡略名を返します。 簡略名は最大 14 文字で切り詰められます。エラー時には NULL を返します。
ncurses_timeout	特別なキーシーケンスのタイムアウトを設定する	void ncurses_timeout ( int $millisec )
ncurses_top_panel	可視パネルをスタックの最上部に移動する	int ncurses_top_panel ( resource $panel )
ncurses_typeahead	typeahead 確認用に別のファイル記述子を指定する	int ncurses_typeahead ( int $fd )
ncurses_ungetch	入力ストリームに 1 文字戻す	int ncurses_ungetch ( int $keycode )
ncurses_ungetmouse	マウスイベントをキューにプッシュする	bool ncurses_ungetmouse ( array $mevent )	成功した場合に FALSE、それ以外の場合に TRUE を返します。
ncurses_update_panels	仮想画面を再描画し、スタック内のパネルとの関係を反映させる	void ncurses_update_panels ( void )
ncurses_use_default_colors	端末のデフォルト色をカラー ID -1 に割り付ける	bool ncurses_use_default_colors ( void )
ncurses_use_env	端末の大きさに関する環境情報の使用を制御する	void ncurses_use_env ( bool $flag )
ncurses_use_extended_names	terminfo 記述において拡張名の使用を制御する	int ncurses_use_extended_names ( bool $flag )
ncurses_vidattr	video attribute モードで、端末上に文字列を表示する	int ncurses_vidattr ( int $intarg )
ncurses_vline	現在位置に最大 n 文字の属性付きの文字を用いて垂直線を描画する	int ncurses_vline ( int $charattr , int $n )
ncurses_waddch	ウィンドウ内の現在位置に文字を追加し、カーソルを進める	int ncurses_waddch ( resource $window , int $ch )
ncurses_waddstr	ウィンドウ内の現在位置にテキストを出力する	int ncurses_waddstr ( resource $window , string $str [, int $n ] )
ncurses_wattroff	ウィンドウの属性をオフにする	int ncurses_wattroff ( resource $window , int $attrs )
ncurses_wattron	ウィンドウの属性をオンにする	int ncurses_wattron ( resource $window , int $attrs )
ncurses_wattrset	ウィンドウの属性を設定する	int ncurses_wattrset ( resource $window , int $attrs )
ncurses_wborder	属性文字を使用してウィンドウの周囲に線を描画する	int ncurses_wborder ( resource $window , int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner )
ncurses_wclear	ウィンドウをクリアする	int ncurses_wclear ( resource $window )
ncurses_wcolor_set	ウィンドウの色の組み合わせを設定する	int ncurses_wcolor_set ( resource $window , int $color_pair )
ncurses_werase	ウィンドウを消去する	int ncurses_werase ( resource $window )
ncurses_wgetch	キーボート (ウィンドウ) から文字を読み込む	int ncurses_wgetch ( resource $window )
ncurses_whline	指定した属性文字を用いて、最大 n 文字分の長さの水平線を ウィンドウに描画する	int ncurses_whline ( resource $window , int $charattr , int $n )
ncurses_wmouse_trafo	ウィンドウ/標準画面の座標系を変換する	bool ncurses_wmouse_trafo ( resource $window , int &$y , int &$x , bool $toscreen )
ncurses_wmove	ウィンドウの出力位置を移動する	int ncurses_wmove ( resource $window , int $y , int $x )
ncurses_wnoutrefresh	ウィンドウを仮想画面にコピーする	int ncurses_wnoutrefresh ( resource $window )
ncurses_wrefresh	端末画面のウインドウをリフレッシュする	int ncurses_wrefresh ( resource $window )
ncurses_wstandend	ウィンドウの standout モードを終了する	int ncurses_wstandend ( resource $window )
ncurses_wstandout	ウィンドウの standout モードに入る	int ncurses_wstandout ( resource $window )
ncurses_wvline	指定した属性文字を用いて、最大 n 文字分の長さの垂直線を ウィンドウに描画する	int ncurses_wvline ( resource $window , int $charattr , int $n )
newt_bell	ビープ音を端末に送信する	void newt_bell ( void )	値を返しません。
newt_button_bar	作成したボタンを含むグリッドを返す	resource newt_button_bar ( array &$buttons )	作成したボタンを含むグリッドを返します。
newt_button	新しいボタンを作成する	resource newt_button ( int $left , int $top , string $text )	作成したボタンコンポーネントへのリソースリンク、あるいはエラー時に FALSE を返します。
newt_centered_window	画面の中央に指定したサイズのウィンドウをオープンする	int newt_centered_window ( int $width , int $height [, string $title ] )	未定義です。
newt_checkbox_get_value	チェックボックスリソースの値を取得する	string newt_checkbox_get_value ( resource $checkbox )	チェックボックスの値を表す文字を返します。
newt_checkbox_set_flags	チェックボックスリソースを設定する	void newt_checkbox_set_flags ( resource $checkbox , int $flags , int $sense )	値を返しません。
newt_checkbox_set_value	チェックボックスの値を設定する	void newt_checkbox_set_value ( resource $checkbox , string $value )	値を返しません。
newt_checkbox_tree_add_item	新しいアイテムをチェックボックスツリーに追加する	void newt_checkbox_tree_add_item ( resource $checkboxtree , string $text , mixed $data , int $flags , int $index [, int $... ] )	値を返しません。
newt_checkbox_tree_find_item	チェックボックスツリーのアイテムを探す	array newt_checkbox_tree_find_item ( resource $checkboxtree , mixed $data )	チェックボックスツリーアイテムリソースを返します。 見つからなかった場合は NULL を返します。
newt_checkbox_tree_get_current	チェックボックスツリーの選択されているアイテムを返す	mixed newt_checkbox_tree_get_current ( resource $checkboxtree )	現在の (選択されている) チェックボックスツリーアイテムを返します。
newt_checkbox_tree_get_entry_value		string newt_checkbox_tree_get_entry_value ( resource $checkboxtree , mixed $data )
newt_checkbox_tree_get_multi_selection		array newt_checkbox_tree_get_multi_selection ( resource $checkboxtree , string $seqnum )
newt_checkbox_tree_get_selection		array newt_checkbox_tree_get_selection ( resource $checkboxtree )
newt_checkbox_tree_multi		resource newt_checkbox_tree_multi ( int $left , int $top , int $height , string $seq [, int $flags ] )
newt_checkbox_tree_set_current		void newt_checkbox_tree_set_current ( resource $checkboxtree , mixed $data )	値を返しません。
newt_checkbox_tree_set_entry_value		void newt_checkbox_tree_set_entry_value ( resource $checkboxtree , mixed $data , string $value )	値を返しません。
newt_checkbox_tree_set_entry		void newt_checkbox_tree_set_entry ( resource $checkboxtree , mixed $data , string $text )	値を返しません。
newt_checkbox_tree_set_width		void newt_checkbox_tree_set_width ( resource $checkbox_tree , int $width )	値を返しません。
newt_checkbox_tree		resource newt_checkbox_tree ( int $left , int $top , int $height [, int $flags ] )
newt_checkbox		resource newt_checkbox ( int $left , int $top , string $text , string $def_value [, string $seq ] )
newt_clear_key_buffer	追加の入力を待たずに、端末の入力バッファの内容をクリアする	void newt_clear_key_buffer ( void )	値を返しません。
newt_cls		void newt_cls ( void )	値を返しません。
newt_compact_button		resource newt_compact_button ( int $left , int $top , string $text )
newt_component_add_callback		void newt_component_add_callback ( resource $component , mixed $func_name , mixed $data )	値を返しません。
newt_component_takes_focus		void newt_component_takes_focus ( resource $component , bool $takes_focus )	値を返しません。
newt_create_grid		resource newt_create_grid ( int $cols , int $rows )
newt_cursor_off		void newt_cursor_off ( void )	値を返しません。
newt_cursor_on		void newt_cursor_on ( void )	値を返しません。
newt_delay		void newt_delay ( int $microseconds )	値を返しません。
newt_draw_form		void newt_draw_form ( resource $form )	値を返しません。
newt_draw_root_text	指定した位置に文字列を表示する	void newt_draw_root_text ( int $left , int $top , string $text )	値を返しません。
newt_entry_get_value		string newt_entry_get_value ( resource $entry )
newt_entry_set_filter		void newt_entry_set_filter ( resource $entry , callable $filter , mixed $data )	値を返しません。
newt_entry_set_flags		void newt_entry_set_flags ( resource $entry , int $flags , int $sense )	値を返しません。
newt_entry_set		void newt_entry_set ( resource $entry , string $value [, bool $cursor_at_end ] )	値を返しません。
newt_entry		resource newt_entry ( int $left , int $top , int $width [, string $init_value [, int $flags ]] )
newt_finished	newt インターフェイスを終了する	int newt_finished ( void )	成功した場合に 1、失敗した場合に 0 を返します。
newt_form_add_component	フォームにコンポーネントを追加する	void newt_form_add_component ( resource $form , resource $component )	値を返しません。
newt_form_add_components	フォームに複数のコンポーネントを追加する	void newt_form_add_components ( resource $form , array $components )	値を返しません。
newt_form_add_hot_key		void newt_form_add_hot_key ( resource $form , int $key )	値を返しません。
newt_form_destroy	フォームを破壊する	void newt_form_destroy ( resource $form )	値を返しません。
newt_form_get_current		resource newt_form_get_current ( resource $form )
newt_form_run	フォームを実行する	void newt_form_run ( resource $form , array &$exit_struct )	値を返しません。
newt_form_set_background		void newt_form_set_background ( resource $from , int $background )	値を返しません。
newt_form_set_height		void newt_form_set_height ( resource $form , int $height )	値を返しません。
newt_form_set_size		void newt_form_set_size ( resource $form )	値を返しません。
newt_form_set_timer		void newt_form_set_timer ( resource $form , int $milliseconds )	値を返しません。
newt_form_set_width		void newt_form_set_width ( resource $form , int $width )	値を返しません。
newt_form_watch_fd		void newt_form_watch_fd ( resource $form , resource $stream [, int $flags ] )	値を返しません。
newt_form	フォームを作成する	resource newt_form ([ resource $vert_bar [, string $help [, int $flags ]]] )	作成されたフォームコンポーネントのリソースリンク、 あるいはエラー時に FALSE を返します。
newt_get_screen_size	参照で渡された引数に、現在の端末の大きさを格納する	void newt_get_screen_size ( int &$cols , int &$rows )	値を返しません。
newt_grid_add_components_to_form		void newt_grid_add_components_to_form ( resource $grid , resource $form , bool $recurse )	値を返しません。
newt_grid_basic_window		resource newt_grid_basic_window ( resource $text , resource $middle , resource $buttons )
newt_grid_free		void newt_grid_free ( resource $grid , bool $recurse )	値を返しません。
newt_grid_get_size		void newt_grid_get_size ( resouce $grid , int &$width , int &$height )	値を返しません。
newt_grid_h_close_stacked		resource newt_grid_h_close_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )
newt_grid_h_stacked		resource newt_grid_h_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )
newt_grid_place		void newt_grid_place ( resource $grid , int $left , int $top )	値を返しません。
newt_grid_set_field		void newt_grid_set_field ( resource $grid , int $col , int $row , int $type , resource $val , int $pad_left , int $pad_top , int $pad_right , int $pad_bottom , int $anchor [, int $flags ] )	値を返しません。
newt_grid_simple_window		resource newt_grid_simple_window ( resource $text , resource $middle , resource $buttons )
newt_grid_v_close_stacked		resource newt_grid_v_close_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )
newt_grid_v_stacked		resource newt_grid_v_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )
newt_grid_wrapped_window_at		void newt_grid_wrapped_window_at ( resource $grid , string $title , int $left , int $top )	値を返しません。
newt_grid_wrapped_window		void newt_grid_wrapped_window ( resource $grid , string $title )	値を返しません。
newt_init	newt を初期化する	int newt_init ( void )	成功した場合に 1、失敗した場合に 0 を返します。
newt_label_set_text		void newt_label_set_text ( resource $label , string $text )	値を返しません。
newt_label		resource newt_label ( int $left , int $top , string $text )
newt_listbox_append_entry		void newt_listbox_append_entry ( resource $listbox , string $text , mixed $data )	値を返しません。
newt_listbox_clear_selection		void newt_listbox_clear_selection ( resource $listbox )	値を返しません。
newt_listbox_clear		void newt_listbox_clear ( resource $listobx )	値を返しません。
newt_listbox_delete_entry		void newt_listbox_delete_entry ( resource $listbox , mixed $key )	値を返しません。
newt_listbox_get_current		string newt_listbox_get_current ( resource $listbox )
newt_listbox_get_selection		array newt_listbox_get_selection ( resource $listbox )
newt_listbox_insert_entry		void newt_listbox_insert_entry ( resource $listbox , string $text , mixed $data , mixed $key )	値を返しません。
newt_listbox_item_count		int newt_listbox_item_count ( resource $listbox )
newt_listbox_select_item		void newt_listbox_select_item ( resource $listbox , mixed $key , int $sense )	値を返しません。
newt_listbox_set_current_by_key		void newt_listbox_set_current_by_key ( resource $listbox , mixed $key )	値を返しません。
newt_listbox_set_current		void newt_listbox_set_current ( resource $listbox , int $num )	値を返しません。
newt_listbox_set_data		void newt_listbox_set_data ( resource $listbox , int $num , mixed $data )	値を返しません。
newt_listbox_set_entry		void newt_listbox_set_entry ( resource $listbox , int $num , string $text )	値を返しません。
newt_listbox_set_width		void newt_listbox_set_width ( resource $listbox , int $width )	値を返しません。
newt_listbox		resource newt_listbox ( int $left , int $top , int $height [, int $flags ] )
newt_listitem_get_data		mixed newt_listitem_get_data ( resource $item )
newt_listitem_set		void newt_listitem_set ( resource $item , string $text )	値を返しません。
newt_listitem		resource newt_listitem ( int $left , int $top , string $text , bool $is_default , resouce $prev_item , mixed $data [, int $flags ] )
newt_open_window	指定したサイズと位置でウィンドウをオープンする	int newt_open_window ( int $left , int $top , int $width , int $height [, string $title ] )	成功した場合に 1、失敗した場合に 0 を返します。
newt_pop_help_line	現在のヘルプ行をスタックの内容で置き換える	void newt_pop_help_line ( void )	値を返しません。
newt_pop_window	トップウィンドウを画面から消去する	void newt_pop_window ( void )	値を返しません。
newt_push_help_line	現在のヘルプ行をスタックに保存し、新しい行を表示する	void newt_push_help_line ([ string $text ] )	値を返しません。
newt_radio_get_current		resource newt_radio_get_current ( resource $set_member )
newt_radiobutton		resource newt_radiobutton ( int $left , int $top , string $text , bool $is_default [, resource $prev_button ] )
newt_redraw_help_line		void newt_redraw_help_line ( void )	値を返しません。
newt_reflow_text		string newt_reflow_text ( string $text , int $width , int $flex_down , int $flex_up , int &$actual_width , int &$actual_height )
newt_refresh	画面の変更された部分を更新する	void newt_refresh ( void )	値を返しません。
newt_resize_screen		void newt_resize_screen ([ bool $redraw ] )	値を返しません。
newt_resume	newt_suspend() をコールした後に newt インターフェイスの使用を再開する	void newt_resume ( void )	値を返しません。
newt_run_form	フォームを実行する	resource newt_run_form ( resource $form )	フォームの実行を停止させたコンポーネントを返します。
newt_scale_set		void newt_scale_set ( resource $scale , int $amount )	値を返しません。
newt_scale		resource newt_scale ( int $left , int $top , int $width , int $full_value )
newt_scrollbar_set		void newt_scrollbar_set ( resource $scrollbar , int $where , int $total )	値を返しません。
newt_set_help_callback		void newt_set_help_callback ( mixed $function )	値を返しません。
newt_set_suspend_callback	ユーザーがサスペンドキーを押した際に起動するコールバック関数を設定する	void newt_set_suspend_callback ( callable $function , mixed $data )	値を返しません。
newt_suspend	端末を元の状態に戻すよう、newt に通知する	void newt_suspend ( void )	値を返しません。
newt_textbox_get_num_lines		int newt_textbox_get_num_lines ( resource $textbox )
newt_textbox_reflowed		resource newt_textbox_reflowed ( int $left , int $top , char $*text , int $width , int $flex_down , int $flex_up [, int $flags ] )
newt_textbox_set_height		void newt_textbox_set_height ( resource $textbox , int $height )	値を返しません。
newt_textbox_set_text		void newt_textbox_set_text ( resource $textbox , string $text )	値を返しません。
newt_textbox		resource newt_textbox ( int $left , int $top , int $width , int $height [, int $flags ] )
newt_vertical_scrollbar		resource newt_vertical_scrollbar ( int $left , int $top , int $height [, int $normal_colorset [, int $thumb_colorset ]] )
newt_wait_for_key	キーが押されるまで結果を返さない	void newt_wait_for_key ( void )	値を返しません。
newt_win_choice		int newt_win_choice ( string $title , string $button1_text , string $button2_text , string $format [, mixed $args [, mixed $... ]] )
newt_win_entries		int newt_win_entries ( string $title , string $text , int $suggested_width , int $flex_down , int $flex_up , int $data_width , array &$items , string $button1 [, string $... ] )
newt_win_menu		int newt_win_menu ( string $title , string $text , int $suggestedWidth , int $flexDown , int $flexUp , int $maxListHeight , array $items , int &$listItem [, string $button1 [, string $... ]] )	値を返しません。
newt_win_message		void newt_win_message ( string $title , string $button_text , string $format [, mixed $args [, mixed $... ]] )	値を返しません。
newt_win_messagev		void newt_win_messagev ( string $title , string $button_text , string $format , array $args )	値を返しません。
newt_win_ternary		int newt_win_ternary ( string $title , string $button1_text , string $button2_text , string $button3_text , string $format [, mixed $args [, mixed $... ]] )	What the function returns, first on success, then on failure. See also the &return.success; entity
next	内部配列ポインタを進める	mixed next ( array &$array )	内部配列ポインタが指す場所の次の場所の値を返します。 それ以上要素がない場合は FALSE を返します。
ngettext	gettext の複数形版	string ngettext ( string $msgid1 , string $msgid2 , int $n )	msgid1 および msgid2 で表されるメッセージの、数 n に対応する複数形を返します。
nl_langinfo	言語およびロケール情報を検索する	string nl_langinfo ( int $item )	要素を文字列で返します。item が有効でない場合は FALSE を返します。
nl2br	改行文字の前に HTML の改行タグを挿入する	string nl2br ( string $string [, bool $is_xhtml = true ] )	変更後の文字列を返します。
notes_body	指定したサーバーにある指定したメールボックスのメッセージ msg_number をオープンする	array notes_body ( string $server , string $mailbox , int $msg_number )
notes_copy_db	Lotus Notes データベースをコピーする	bool notes_copy_db ( string $from_database_name , string $to_database_name )
notes_create_db	Lotus Notes データベースを作成する	bool notes_create_db ( string $database_name )
notes_create_note	フォーム form_name を用いてノートを作成する	bool notes_create_note ( string $database_name , string $form_name )
notes_drop_db	Lotus Notes データベースを破棄する	bool notes_drop_db ( string $database_name )
notes_find_note	database_name で見つかったノートの ID を返す	int notes_find_note ( string $database_name , string $name [, string $type ] )
notes_header_info	指定したサーバー上の指定したメールボックスにあるメッセージ msg_number をオープンする	object notes_header_info ( string $server , string $mailbox , int $msg_number )
notes_list_msgs	選択した database_name からノートを返す	bool notes_list_msgs ( string $db )
notes_mark_read	ユーザー user_name 用に note_id に既読マークを付ける	bool notes_mark_read ( string $database_name , string $user_name , string $note_id )
notes_mark_unread	ユーザー user_name 用に note_id に未読マークを付ける	bool notes_mark_unread ( string $database_name , string $user_name , string $note_id )
notes_nav_create	database_name にナビゲータ名を作成する	bool notes_nav_create ( string $database_name , string $name )
notes_search	database_name のキーワードにマッチするノートを見つける	array notes_search ( string $database_name , string $keywords )
notes_unread	現在のユーザー user_name に関して未読のノート ID を返す	array notes_unread ( string $database_name , string $user_name )
notes_version	Lotus Notes のバージョンを取得する	float notes_version ( string $database_name )
nsapi_request_headers	HTTP リクエストヘッダを全て取得する	array nsapi_request_headers ( void )	HTTP ヘッダを連想配列で返します。
nsapi_response_headers	すべての HTTP レスポンスヘッダを取得する	array nsapi_response_headers ( void )	すべての NSAPI レスポンスヘッダの連想配列を返します。
nsapi_virtual	NSAPI サブリクエストを発行する	bool nsapi_virtual ( string $uri )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
nthmac	nthmac キーを取得する (2 つの引数が必要)	string nthmac ( string $clent , string $data )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
number_format	数字を千位毎にグループ化してフォーマットする	string number_format ( float $number [, int $decimals = 0 ] )	number をフォーマットした結果を返します。
oauth_get_sbs	SBSを生成する	string oauth_get_sbs ( string $http_method , string $uri [, array $request_parameters ] )	SBSを返します
oauth_urlencode	URI を RFC 3686 形式でエンコードする	string oauth_urlencode ( string $uri )	&raquo;&nbsp;RFC 3686 形式でエンコードした文字列を返します。
ob_clean	出力バッファをクリア(消去)する	void ob_clean ( void )	値を返しません。
ob_deflatehandler	圧縮出力ハンドラ	string ob_deflatehandler ( string $data , int $mode )
ob_end_clean	出力用バッファをクリア(消去)し、出力のバッファリングをオフにする	bool ob_end_clean ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 失敗する原因は、まず、アクティブなバッファ以外に対して この関数をコールしたか、あるいは何らかの理由により バッファを消去することができなかった場合です（特殊なバッファ等）。
ob_end_flush	出力用バッファをフラッシュ(送信)し、出力のバッファリングをオフにする	bool ob_end_flush ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 失敗する原因は、まず、アクティブなバッファ以外に対してこの 関数をコールしたか、あるいは何らかの理由により バッファを消去することができなかった場合です（特殊なバッファ等）。
ob_etaghandler	ETag 出力ハンドラ	string ob_etaghandler ( string $data , int $mode )
ob_flush	出力バッファをフラッシュ(送信)する	void ob_flush ( void )	値を返しません。
ob_get_clean	現在のバッファの内容を取得し、出力バッファを削除する	string ob_get_clean ( void )	出力バッファの内容を返した後で出力のバッファリングを終了します。 出力バッファリングが開始されていない場合は FALSE が返されます。
ob_get_contents	出力用バッファの内容を返す	string ob_get_contents ( void )	出力用バッファの内容を返します。 出力のバッファリングがアクティブでない場合には FALSE を返します。
ob_get_flush	出力バッファをフラッシュし、その内容を文字列として返した後で出力バッファリングを終了する	string ob_get_flush ( void )	出力バッファを返します。バッファリングが開始されていない場合は FALSE を返します。
ob_get_length	出力バッファの長さを返す	int ob_get_length ( void )	出力バッファの内容の長さを返します。 出力のバッファリングがアクティブでない場合には、FALSE を返します。
ob_get_level	出力バッファリング機構のネストレベルを返す	int ob_get_level ( void )	出力バッファリングハンドラのネストレベルを返します。 バッファリングがアクティブでない場合はゼロを返します。
ob_get_status	出力バッファのステータスを取得する	array ob_get_status ([ bool $full_status = FALSE ] )	パラメータ full_status を指定していなかったり full_status = FALSE としていた場合は、 以下の要素を保持する配列が返されます。 Array ( [level] => 2 [type] => 0 [status] => 0 [name] => URL-Rewriter [del] => 1 ) 単純な ob_get_status() の出力結果 キー: level値: 出力階層レベル キー: type値: PHP_OUTPUT_HANDLER_INTERNAL (0) あるいは PHP_OUTPUT_HANDLER_USER (1) キー: status値: PHP_OUTPUT_HANDLER_START (0)、PHP_OUTPUT_HANDLER_CONT (1) あるいは PHP_OUTPUT_HANDLER_END (2) のいずれか キー: name値: アクティブな出力ハンドラの名前、あるいは設定されていない場合は ' default output handler' キー: del値: ob_start() が設定した削除フラグ
ob_gzhandler	出力バッファを gzip 圧縮するための ob_start コールバック関数	string ob_gzhandler ( string $buffer , int $mode )
ob_iconv_handler	出力バッファハンドラとして文字エンコーディングを変換する	string ob_iconv_handler ( string $contents , int $status )	このハンドラの返り値についての情報は ob_start() を参照ください。
ob_implicit_flush	自動フラッシュをオンまたはオフにする	void ob_implicit_flush ([ int $flag = true ] )	値を返しません。
ob_inflatehandler	展開出力ハンドラ	string ob_inflatehandler ( string $data , int $mode )
ob_list_handlers	使用中の出力ハンドラの一覧を取得する	array ob_list_handlers ( void )	これは、使用中の出力ハンドラを（もし存在すれば）配列で返します。もし output_buffering が 有効になっているか、あるいは ob_start() で 無名関数が使用されている場合、 ob_list_handlers() は "default output handler" を返します。
ob_start	出力のバッファリングを有効にする	bool ob_start ([ callable $output_callback [, int $chunk_size = 0 [, bool $erase = true ]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ob_tidyhandler	バッファを修正するための ob_start コールバック関数	string ob_tidyhandler ( string $input [, int $mode ] )	修正したバッファを返します。
oci_bind_array_by_name	PHP の配列を Oracle PL/SQL の配列に名前でバインドする	bool oci_bind_array_by_name ( resource $statement , string $name , array &$var_array , int $max_table_length [, int $max_item_length = -1 [, int $type = SQLT_AFC ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_bind_by_name	Oracle プレースホルダに PHP 変数をバインドする	bool oci_bind_by_name ( resource $statement , string $bv_name , mixed &$variable [, int $maxlength = -1 [, int $type = SQLT_CHR ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_cancel	カーソルからの読み込みをキャンセルする	bool oci_cancel ( resource $statement )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_client_version	Oracle クライアント・ライブラリのバージョンを返す	string oci_client_version ( void )	文字列としてバージョン番号を返します。
oci_close	Oracleとの接続を閉じる	bool oci_close ( resource $connection )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_commit	未解決のトランザクションをコミットする	bool oci_commit ( resource $connection )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_connect	Oracle データベースに接続する	resource oci_connect ( string $username , string $password [, string $connection_string [, string $character_set [, int $session_mode ]]] )	接続 ID、もしくはエラー時は FALSE を返します。
oci_define_by_name	PHP の変数を、クエリで取得するカラムに関連づける	bool oci_define_by_name ( resource $statement , string $column_name , mixed &$variable [, int $type = SQLT_CHR ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_error	最後に見つかったエラーを返す	array oci_error ([ resource $resource ] )	もしエラーが見つからない場合、 oci_error() は FALSE を返します。それ以外の場合は、 oci_error() はエラーの情報を連想配列で返します。
oci_execute	文を実行する	bool oci_execute ( resource $statement [, int $mode = OCI_COMMIT_ON_SUCCESS ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_fetch_all	クエリからの複数の行を二次元配列に取得する	int oci_fetch_all ( resource $statement , array &$output [, int $skip = 0 [, int $maxrows = -1 [, int $flags = OCI_FETCHSTATEMENT_BY_COLUMN + OCI_ASSOC ]]] )	output の行数を返します。これは 0 以上の値となります。 失敗した場合に FALSE を返します.
oci_fetch_array	クエリの次の行を連想配列あるいは数値添字配列で返す	array oci_fetch_array ( resource $statement [, int $mode ] )	連想配列や数値添字配列を返します。 statement にもう行がない場合は FALSE を返します。
oci_fetch_assoc	クエリの次の行を連想配列で返す	array oci_fetch_assoc ( resource $statement )	連想配列を返します。 statement にもう行がない場合は FALSE を返します。
oci_fetch_object	クエリの次の行をオブジェクトとして返す	object oci_fetch_object ( resource $statement )	オブジェクトを返します。 オブジェクトの属性は文中のフィールドと一致しています。 statement にもう行がない場合は FALSE を返します。
oci_fetch_row	クエリの次の行を配列で返す	array oci_fetch_row ( resource $statement )	数値添字配列を返します。 statement にもう行がない場合は FALSE を返します。
oci_fetch	クエリの次の行を内部バッファに取得する	bool oci_fetch ( resource $statement )	成功した場合に TRUE、 statement にもう行がない場合に FALSE を返します。
oci_field_is_null	フィールドが NULL であるかどうかを確認する	bool oci_field_is_null ( resource $statement , mixed $field )	field が NULL の場合に TRUE、 それ以外の場合に FALSE を返します。
oci_field_name	文からのフィールド名を返す	string oci_field_name ( resource $statement , int $field )	名前を表す文字列、あるいはエラー時に FALSE を返します。
oci_field_precision	フィールドの精度を問い合わせる	int oci_field_precision ( resource $statement , int $field )	精度を表す整数値、あるいはエラー時に FALSE を返します。
oci_field_scale	フィールドの桁数を問い合わせる	int oci_field_scale ( resource $statement , int $field )	桁数を表す整数値、あるいはエラー時に FALSE を返します。
oci_field_size	フィールドサイズを返す	int oci_field_size ( resource $statement , mixed $field )	フィールド field のサイズを表すバイト数、あるいは エラー時に FALSE を返します。
oci_field_type_raw	Oracle におけるフィールドの型を問い合わせる	int oci_field_type_raw ( resource $statement , int $field )	Oracle のデータ型を表す文字列、あるいはエラー時に FALSE を返します。
oci_field_type	フィールドのデータ型を返す	mixed oci_field_type ( resource $statement , int $field )	フィールドのデータ型を表す文字列、あるいはエラー時に FALSE を返します。
oci_free_descriptor	ディスクリプタを解放する	bool oci_free_descriptor ( resource $descriptor )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_free_statement	文やカーソルに関連付けられた全てのリソースを解放する	bool oci_free_statement ( resource $statement )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_internal_debug	内部デバッグ用の出力を有効または無効にする	void oci_internal_debug ( bool $onoff )	値を返しません。
oci_lob_copy	ラージオブジェクトをコピーする	bool oci_lob_copy ( OCI-Lob $lob_to , OCI-Lob $lob_from [, int $length = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_lob_is_equal	2 つの LOB/FILE ロケータの等価性を比較する	bool oci_lob_is_equal ( OCI-Lob $lob1 , OCI-Lob $lob2 )	これらのオブジェクトが等しい場合 TRUE を返し、 そうでなければ FALSE を返します。
oci_new_collection	新しいコレクションオブジェクトを割り当てる	OCI-Collection oci_new_collection ( resource $connection , string $tdo [, string $schema = NULL ] )	新しい OCICollection オブジェクト、 あるいはエラー時に FALSE を返します。
oci_new_connect	一意な接続を使って Oracle サーバーへ接続する	resource oci_new_connect ( string $username , string $password [, string $connection_string [, string $character_set [, int $session_mode ]]] )	接続 ID、あるいはエラー時に FALSE を返します。
oci_new_cursor	新規カーソル (ステートメントハンドル) を割り当て、それを返す	resource oci_new_cursor ( resource $connection )	新しいステートメントハンドル、あるいはエラー時に FALSE を返します。
oci_new_descriptor	空の新規 LOB あるいは FILE ディスクリプタを初期化する	OCI-Lob oci_new_descriptor ( resource $connection [, int $type = OCI_DTYPE_LOB ] )	成功した場合に新しい LOB あるいは FILE ディスクリプタ、 エラー時に FALSE を返します。
oci_num_fields	ある文における結果のカラム数を返す	int oci_num_fields ( resource $statement )	カラムの数を表す整数値、あるいはエラー時に FALSE を返します。
oci_num_rows	文の実行で作用された行数を取得する	int oci_num_rows ( resource $statement )	作用された行の数を表す整数値、あるいはエラー時に FALSE を返します。
oci_parse	実行のために Oracle の文をパースする	resource oci_parse ( resource $connection , string $sql_text )	成功した場合にステートメントハンドル、あるいはエラー時に FALSE を返します。
oci_password_change	Oracle ユーザーのパスワードを変更する	bool oci_password_change ( resource $connection , string $username , string $old_password , string $new_password )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_pconnect	持続的接続を使用してOracle データベースに接続する	resource oci_pconnect ( string $username , string $password [, string $connection_string [, string $character_set [, int $session_mode ]]] )	接続 ID、あるいはエラー時に FALSE を返します。
oci_result	フェッチした行からフィールドの値を取得する	mixed oci_result ( resource $statement , mixed $field )	抽象型 (ROWID, LOB, FILE) を除き、全てを文字列として返します。 エラーの場合、FALSE を返します。
oci_rollback	未解決のデータベーストランザクションをロールバックする	bool oci_rollback ( resource $connection )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_server_version	Oracle データベースのバージョンを返す	string oci_server_version ( resource $connection )	バージョン情報を表す文字列、あるいはエラー時に FALSE を返します。
oci_set_action	アクション名を設定します	bool oci_set_action ( resource $connection , string $action_name )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_set_client_identifier	クライアント識別子を設定します	bool oci_set_client_identifier ( resource $connection , string $client_identifier )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_set_client_info	クライアント情報を設定する	bool oci_set_client_info ( resource $connection , string $client_info )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_set_edition	データベース・エディション を設定します	bool oci_set_edition ( string $edition )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_set_module_name	モジュール名を設定します	bool oci_set_module_name ( resource $connection , string $module_name )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_set_prefetch	クエリがプリフェッチする行数を設定する	bool oci_set_prefetch ( resource $statement , int $rows )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
oci_statement_type	ステートメントの種類を返す	string oci_statement_type ( resource $statement )	ステートメント statement の種類を次のいずれかの値で返します。 ステートメントの種類 返される文字列 注意 ALTER &nbsp; BEGIN &nbsp; CALL PHP 5.2.1 (PECL OCI8 1.2.3) 以降で使用可能です。 CREATE &nbsp; DECLARE &nbsp; DELETE &nbsp; DROP &nbsp; INSERT &nbsp; SELECT &nbsp; UPDATE &nbsp; UNKNOWN &nbsp;
ocibindbyname	oci_bind_by_name() のエイリアス
ocicancel	oci_cancel() のエイリアス
ocicloselob	OCI-Lob::close() のエイリアス
ocicollappend	OCI-Collection::append() のエイリアス
ocicollassign	OCI-Collection::assign() のエイリアス
ocicollassignelem	OCI-Collection::assignElem() のエイリアス
ocicollgetelem	OCI-Collection::getElem() のエイリアス
ocicollmax	OCI-Collection::max() のエイリアス
ocicollsize	OCI-Collection::size() のエイリアス
ocicolltrim	OCI-Collection::trim() のエイリアス
ocicolumnisnull	oci_field_is_null() のエイリアス
ocicolumnname	oci_field_name() のエイリアス
ocicolumnprecision	oci_field_precision() のエイリアス
ocicolumnscale	oci_field_scale() のエイリアス
ocicolumnsize	oci_field_size() のエイリアス
ocicolumntype	oci_field_type() のエイリアス
ocicolumntyperaw	oci_field_type_raw() のエイリアス
ocicommit	oci_commit() のエイリアス
ocidefinebyname	oci_define_by_name() のエイリアス
ocierror	oci_error() のエイリアス
ociexecute	oci_execute() のエイリアス
ocifetch	oci_fetch() のエイリアス
ocifetchinto	結果配列の次の行を取得する (非推奨)	int ocifetchinto ( resource $statement , array &$result [, int $mode = OCI_ASSOC + OCI_NUM ] )
ocifetchstatement	oci_fetch_all() のエイリアス
ocifreecollection	OCI-Collection::free() のエイリアス
ocifreecursor	oci_free_statement() のエイリアス
ocifreedesc	OCI-Lob::free() のエイリアス
ocifreestatement	oci_free_statement() のエイリアス
ociinternaldebug	oci_internal_debug() のエイリアス
ociloadlob	OCI-Lob::load() のエイリアス
ocilogoff	oci_close() のエイリアス
ocilogon	oci_connect() のエイリアス
ocinewcollection	oci_new_collection() のエイリアス
ocinewcursor	oci_new_cursor() のエイリアス
ocinewdescriptor	oci_new_descriptor() のエイリアス
ocinlogon	oci_new_connect() のエイリアス
ocinumcols	oci_num_fields() のエイリアス
ociparse	oci_parse() のエイリアス
ociplogon	oci_pconnect() のエイリアス
ociresult	oci_result() のエイリアス
ocirollback	oci_rollback() のエイリアス
ocirowcount	oci_num_rows() のエイリアス
ocisavelob	OCI-Lob::save() のエイリアス
ocisavelobfile	OCI-Lob::import() のエイリアス
ociserverversion	oci_server_version() のエイリアス
ocisetprefetch	oci_set_prefetch() のエイリアス
ocistatementtype	oci_statement_type() のエイリアス
ociwritelobtofile	OCI-Lob::export() のエイリアス
ociwritetemporarylob	OCI-Lob::writeTemporary() のエイリアス
octdec	8 進数を 10 進数に変換する	number octdec ( string $octal_string )	octal_string を 8 進で表した値を返します。
odbc_autocommit	自動コミットの動作をオンまたはオフにする	mixed odbc_autocommit ( resource $connection_id [, bool $OnOff = false ] )	OnOff パラメータを指定しない場合、 この関数は、connection_id に関する 自動コミットの状態を返します。自動コミットがオンの場合に 非ゼロ、オフの場合にゼロ、エラーを生じた場合に FALSE を返します。
odbc_binmode	バイナリカラムデータを処理する	bool odbc_binmode ( resource $result_id , int $mode )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
odbc_close_all	全ての ODBC 接続を閉じる	void odbc_close_all ( void )	値を返しません。
odbc_close	ODBC 接続を閉じる	void odbc_close ( resource $connection_id )	値を返しません。
odbc_columnprivileges	指定したテーブルに関するカラムおよび付随する権限のリストを取得する	resource odbc_columnprivileges ( resource $connection_id , string $qualifier , string $owner , string $table_name , string $column_name )	ODBC 結果 ID を返します。失敗した場合に FALSE を返します。 この結果 ID を使用して、カラムや関連する権限の一覧を取得します。
odbc_columns	指定したテーブルにあるカラム名のリストを取得する	resource odbc_columns ( resource $connection_id [, string $qualifier [, string $schema [, string $table_name [, string $column_name ]]]] )	ODBC 結果 ID を返します。失敗した場合に FALSE を返します。
odbc_commit	ODBC トランザクションをコミットする	bool odbc_commit ( resource $connection_id )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
odbc_connect	データソースに接続する	resource odbc_connect ( string $dsn , string $user , string $password [, int $cursor_type ] )	ODBC 接続、またはエラーの場合に FALSE を返します。
odbc_cursor	カーソル名を得る	string odbc_cursor ( resource $result_id )	カーソル名を文字列で返します。
odbc_data_source	現在の接続についての情報を返す	array odbc_data_source ( resource $connection_id , int $fetch_type )	エラー時には FALSE、成功時には配列を返します。
odbc_do	odbc_exec() のエイリアス
odbc_error	直近のエラーコードを得る	string odbc_error ([ resource $connection_id ] )	connection_id が指定された場合、 その接続の直近の状態が返されます。そうでない場合、 他の接続の直近の状態が返されます。
odbc_errormsg	直近のエラーメッセージを得る	string odbc_errormsg ([ resource $connection_id ] )	connection_id が指定された場合、 その接続の直近の状態が返されます。さもなくば、他の接続の直近の状態が返されます。
odbc_exec	SQL文を準備し、実行する	resource odbc_exec ( resource $connection_id , string $query_string [, int $flags ] )	SQL コマンドの実行に成功した場合には、 ODBC 結果 ID を返します。エラー時には、FALSEを返します。
odbc_execute	プリペアドステートメントを実行する	bool odbc_execute ( resource $result_id [, array $parameters_array ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
odbc_fetch_array	連想配列として結果の行を取得する	array odbc_fetch_array ( resource $result [, int $rownumber ] )	取得した行に対応する配列を返します。もう行がない場合には FALSE を返します。
odbc_fetch_into	一行ぶんの結果を配列に取り込む	int odbc_fetch_into ( resource $result_id , array &$result_array [, int $rownumber ] )	結果におけるカラム番号を返します。また、エラーの場合に FALSE を返します。
odbc_fetch_object	オブジェクトとして結果の行を取得する	object odbc_fetch_object ( resource $result [, int $rownumber ] )	取得した行に対応するオブジェクトを返します。もう行がない場合には FALSE を返します。
odbc_fetch_row	行を取り込む	bool odbc_fetch_row ( resource $result_id [, int $row_number ] )	行があった場合には TRUE、それ以外の場合に FALSE を返します。
odbc_field_len	フィールドの長さ (精度) を得る	int odbc_field_len ( resource $result_id , int $field_number )	フィールド名を表す文字列、あるいはエラー時に FALSE を返します。
odbc_field_name	カラム名を得る	string odbc_field_name ( resource $result_id , int $field_number )	フィールド名を表す文字列、あるいはエラー時に FALSE を返します。
odbc_field_num	カラム番号を返す	int odbc_field_num ( resource $result_id , string $field_name )	フィールド番号、あるいはエラー時に FALSE を返します。 フィールド番号は、1 から始まります。
odbc_field_precision	odbc_field_len() のエイリアス
odbc_field_scale	フィールドの精度を得る	int odbc_field_scale ( resource $result_id , int $field_number )	フィールド番号、あるいはエラー時に FALSE を返します。
odbc_field_type	フィールドのデータ型を返す	string odbc_field_type ( resource $result_id , int $field_number )	フィールドの型を表す文字列、あるいはエラー時に FALSE を返します。
odbc_foreignkeys	外部キーのリストを取得する	resource odbc_foreignkeys ( resource $connection_id , string $pk_qualifier , string $pk_owner , string $pk_table , string $fk_qualifier , string $fk_owner , string $fk_table )	ODBC 結果 ID を返します。失敗した場合に FALSE を返します。
odbc_free_result	結果を保持するリソースを開放する	bool odbc_free_result ( resource $result_id )	常に TRUE を返します。
odbc_gettypeinfo	データソースがサポートするデータ型についての情報を取得する	resource odbc_gettypeinfo ( resource $connection_id [, int $data_type ] )	ODBC 結果 ID または失敗した場合に FALSE を返します。
odbc_longreadlen	LONG カラムを処理する	bool odbc_longreadlen ( resource $result_id , int $length )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
odbc_next_result	複数の結果が利用可能などうか確認する	bool odbc_next_result ( resource $result_id )	結果セットがまだある場合に TRUE、それ以外の場合に FALSE を返します。
odbc_num_fields	結果のカラム数を返す	int odbc_num_fields ( resource $result_id )	フィールド数、あるいはエラー時に -1 を返します。
odbc_num_rows	結果における行数を返す	int odbc_num_rows ( resource $result_id )	ODBC 結果における行の数を返します。 この関数は、エラー時に-1を返します。
odbc_pconnect	持続的なデータベース接続を開く	resource odbc_pconnect ( string $dsn , string $user , string $password [, int $cursor_type ] )	ODBC 接続 ID またはエラー時に 0 (FALSE) を返します。
odbc_prepare	実行用に文を準備する	resource odbc_prepare ( resource $connection_id , string $query_string )	SQL コマンドの準備に成功した場合は、ODBC 結果 ID を返します。 エラー時には、FALSE を返します。
odbc_primarykeys	テーブルの主キーを取得する	resource odbc_primarykeys ( resource $connection_id , string $qualifier , string $owner , string $table )	ODBC 結果 ID を返します。失敗した場合に FALSE を返します。
odbc_procedurecolumns	プロシージャへのパラメータに関する情報を取得する	resource odbc_procedurecolumns ( resource $connection_id )	指定したプロシージャに関して入出力パラメータのリストとその結果を構成するカラムを返します。 ODBC 結果 ID を返します。失敗した場合に FALSE を返します。
odbc_procedures	指定したデータソースに保存されているプロシージャのリストを取得する	resource odbc_procedures ( resource $connection_id )	情報を含む ODBC 結果 ID を返します。 失敗した場合に FALSE を返します。
odbc_result_all	HTML テーブルとして結果を出力する	int odbc_result_all ( resource $result_id [, string $format ] )	成功の場合に結果の行数、エラーの場合に FALSE を返します。
odbc_result	結果データを得る	mixed odbc_result ( resource $result_id , mixed $field )	フィールドの内容を表す文字列を返します。エラー時には FALSE、NULL データの場合は NULL、そしてバイナリデータの場合は TRUE を返します。
odbc_rollback	トランザクションをロールバックする	bool odbc_rollback ( resource $connection_id )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
odbc_setoption	ODBC の設定を変更する	bool odbc_setoption ( resource $id , int $function , int $option , int $param )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
odbc_specialcolumns	特殊カラムを取得する	resource odbc_specialcolumns ( resource $connection_id , int $type , string $qualifier , string $owner , string $table , int $scope , int $nullable )	ODBC 結果 ID または失敗した場合に FALSE を返します。
odbc_statistics	テーブルに関する統計情報を取得する	resource odbc_statistics ( resource $connection_id , string $qualifier , string $owner , string $table_name , int $unique , int $accuracy )	ODBC 結果 ID を返します。失敗した場合に FALSE を返します。
odbc_tableprivileges	各テーブルのリストおよび関連する権限のリストを取得する	resource odbc_tableprivileges ( resource $connection_id , string $qualifier , string $owner , string $name )	ODBC 結果 ID を返します。失敗した場合に FALSE を返します。
odbc_tables	指定したデータソースに保存されたテーブルの名前のリストを取得する	resource odbc_tables ( resource $connection_id [, string $qualifier [, string $owner [, string $name [, string $types ]]]] )	情報を含んでいる ODBC 結果 ID を返します。 失敗した場合に FALSE を返します。
opcache_compile_file	Compiles and caches a PHP script without executing it	boolean opcache_compile_file ( string $file )	Returns TRUE if file was compiled successfully 失敗した場合に FALSE を返します.
opcache_invalidate	キャッシュされたスクリプトを無効にする	boolean opcache_invalidate ( string $script [, boolean $force = FALSE ] )	script の opcode キャッシュが無効にされたか、無効にする対象が存在しない場合は TRUE を返します。opcode キャッシュが無効にされていた場合は FALSE を返します。
opcache_reset	opcode のキャッシュ内容をリセットする	boolean opcache_reset ( void )	opcode のキャッシュがリセットさせた場合は TRUE を返します。 opcode キャッシュが向こうにされている場合は FALSE を返します。
openal_buffer_create	OpenAL バッファを生成する	resource openal_buffer_create ( void )	成功した場合に Open AL (バッファ) リソース、失敗した場合に FALSE を返します。
openal_buffer_data	バッファのデータを読み込む	bool openal_buffer_data ( resource $buffer , int $format , string $data , int $freq )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openal_buffer_destroy	OpenAL バッファを削除する	bool openal_buffer_destroy ( resource $buffer )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openal_buffer_get	OpenAL バッファのプロパティを取得する	int openal_buffer_get ( resource $buffer , int $property )	要求された property の値を整数で返します。 失敗した場合に FALSE を返します。
openal_buffer_loadwav	.wav ファイルをバッファに読み込む	bool openal_buffer_loadwav ( resource $buffer , string $wavfile )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openal_context_create	音声処理コンテキストを作成する	resource openal_context_create ( resource $device )	成功した場合に Open AL (コンテキスト) リソース、 失敗した場合に FALSE を返します。
openal_context_current	指定したコンテキストを現在のコンテキストにする	bool openal_context_current ( resource $context )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openal_context_destroy	コンテキストを削除する	bool openal_context_destroy ( resource $context )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openal_context_process	指定したコンテキストを処理する	bool openal_context_process ( resource $context )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openal_context_suspend	指定したコンテキストをサスペンドする	bool openal_context_suspend ( resource $context )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openal_device_close	OpenAL デバイスを閉じる	bool openal_device_close ( resource $device )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openal_device_open	OpenAL 音声レイヤを初期化する	resource openal_device_open ([ string $device_desc ] )	成功した場合に Open AL (デバイス) リソース、 失敗した場合に FALSE を返します。
openal_listener_get	リスナーのプロパティを取得する	mixed openal_listener_get ( int $property )	float あるいは float の配列 (どちらか適切なほう) を返します。 失敗した場合に FALSE を返します。
openal_listener_set	リスナーのプロパティを設定する	bool openal_listener_set ( int $property , mixed $setting )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openal_source_create	ソースリソースを生成する	resource openal_source_create ( void )	成功した場合に Open AL (ソース) リソース、 失敗した場合に FALSE を返します。
openal_source_destroy	ソースリソースを削除する	bool openal_source_destroy ( resource $source )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openal_source_get	OpenAL ソースのプロパティを取得する	mixed openal_source_get ( resource $source , int $property )	取得したプロパティに関連付けられた型を返します。 失敗した場合に FALSE を返します。
openal_source_pause	ソースを一時停止する	bool openal_source_pause ( resource $source )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openal_source_play	ソースの再生を開始する	bool openal_source_play ( resource $source )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openal_source_rewind	ソースを巻き戻す	bool openal_source_rewind ( resource $source )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openal_source_set	ソースのプロパティを設定する	bool openal_source_set ( resource $source , int $property , mixed $setting )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openal_source_stop	ソースの再生を停止する	bool openal_source_stop ( resource $source )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openal_stream	ソースのストリーム再生を開始する	resource openal_stream ( resource $source , int $format , int $rate )	成功した場合にストリームリソースを返します。失敗した場合に FALSE を返します。
opendir	ディレクトリハンドルをオープンする	resource opendir ( string $path [, resource $context ] )	成功した場合にディレクトリハンドルの resource 、 失敗した場合に FALSE を返します。
openlog	システムのロガーへの接続をオープンする	bool openlog ( string $ident , int $option , int $facility )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_cipher_iv_length	暗号 iv の長さを取得	int openssl_cipher_iv_length ( string $method )	成功した場合は暗号の長さ、失敗した場合には FALSE を返します。
openssl_csr_export_to_file	CSR をファイルにエクスポートする	bool openssl_csr_export_to_file ( resource $csr , string $outfilename [, bool $notext = true ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_csr_export	CSR を文字列としてエクスポートする	bool openssl_csr_export ( resource $csr , string &$out [, bool $notext = true ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_csr_get_public_key	CERT の公開鍵を返す	resource openssl_csr_get_public_key ( mixed $csr [, bool $use_shortnames = true ] )
openssl_csr_get_subject	CERT の subject を返す	array openssl_csr_get_subject ( mixed $csr [, bool $use_shortnames = true ] )
openssl_csr_new	CSR を作成する	mixed openssl_csr_new ( array $dn , resource &$privkey [, array $configargs [, array $extraattribs ]] )	CSR を返します。
openssl_csr_sign	他の CERT（あるいは自分自身）で証明書をサインする	resource openssl_csr_sign ( mixed $csr , mixed $cacert , mixed $priv_key , int $days [, array $configargs [, int $serial = 0 ]] )	成功した場合に x509 証明書リソース、失敗した場合に FALSE を返します。
openssl_decrypt	データを復号	string openssl_decrypt ( string $data , string $method , string $password [, int $options = 0 [, string $iv = "" ]] )	成功した場合復号された文字列、失敗した場合に FALSE を返します。
openssl_dh_compute_key	リモート DH キー及びローカル DH キーの公開値に関して、共有される秘密を計算	string openssl_dh_compute_key ( string $pub_key , resource $dh_key )	成功した場合計算されたキー、失敗した場合に FALSE を返します。
openssl_digest	ダイジェストを計算	string openssl_digest ( string $data , string $method [, bool $raw_output = false ] )	成功した場合ダイジェスト・ハッシュ値、失敗した場合に FALSE を返します。
openssl_encrypt	データを暗号化	string openssl_encrypt ( string $data , string $method , string $password [, int $options = 0 [, string $iv = "" ]] )	成功した場合暗号化された文字列、失敗した場合に FALSE を返します。
openssl_error_string	OpenSSL エラーメッセージを返す	string openssl_error_string ( void )	エラーメッセージ文字列を返します。 エラーメッセージがもうない場合は、FALSE を返します。
openssl_free_key	キーリソースを開放する	void openssl_free_key ( resource $key_identifier )	値を返しません。
openssl_get_cipher_methods	利用可能な暗号メソッドを取得	array openssl_get_cipher_methods ([ bool $aliases = false ] )	利用可能な暗号メソッドの array
openssl_get_md_methods	利用可能なダイジェスト・メソッドを取得	array openssl_get_md_methods ([ bool $aliases = false ] )	利用可能なダイジェスト・メソッドの array
openssl_get_privatekey	openssl_pkey_get_private() のエイリアス
openssl_get_publickey	openssl_pkey_get_public() のエイリアス
openssl_open	シール(暗号化)されたデータをオープン(復号)する	bool openssl_open ( string $sealed_data , string &$open_data , string $env_key , mixed $priv_key_id [, string $method ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_pbkdf2	PKCS5 v2 の PBKDF2 文字列を生成する。デフォルトは SHA-1	string openssl_pbkdf2 ( string $password , string $salt , int $key_length , int $iterations [, string $digest_algorithm ] )	文字列を返します。失敗した場合に FALSE を返します。
openssl_pkcs12_export_to_file	PKCS#12 互換の証明書保存ファイルをエクスポートする	bool openssl_pkcs12_export_to_file ( mixed $x509 , string $filename , mixed $priv_key , string $pass [, array $args ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_pkcs12_export	PKCS#12 互換の証明書保存ファイルを変数にエクスポートする	bool openssl_pkcs12_export ( mixed $x509 , string &$out , mixed $priv_key , string $pass [, array $args ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_pkcs12_read	PKCS#12 認証ストアをパースして配列形式にする	bool openssl_pkcs12_read ( string $pkcs12 , array &$certs , string $pass )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_pkcs7_decrypt	S/MIME 暗号化されたメッセージを復号する	bool openssl_pkcs7_decrypt ( string $infilename , string $outfilename , mixed $recipcert [, mixed $recipkey ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_pkcs7_encrypt	S/MIME メッセージを暗号化する	bool openssl_pkcs7_encrypt ( string $infile , string $outfile , mixed $recipcerts , array $headers [, int $flags = 0 [, int $cipherid = OPENSSL_CIPHER_RC2_40 ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_pkcs7_sign	S/MIME メッセージにサインする	bool openssl_pkcs7_sign ( string $infilename , string $outfilename , mixed $signcert , mixed $privkey , array $headers [, int $flags = PKCS7_DETACHED [, string $extracerts ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_pkcs7_verify	S/MIME でサインされたメッセージの署名を検証する	mixed openssl_pkcs7_verify ( string $filename , int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content ]]]] )	署名が検証された場合は TRUE、正しくない場合 (メッセージが改暫されたか署名に用いられた証明書が無効) は FALSE、 エラーの場合に -1 を返します。
openssl_pkey_export_to_file	エクスポート可能な形式で、キーをファイルに取得する	bool openssl_pkey_export_to_file ( mixed $key , string $outfilename [, string $passphrase [, array $configargs ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_pkey_export	エクスポート可能な形式で、キーを文字列に取得する	bool openssl_pkey_export ( mixed $key , string &$out [, string $passphrase [, array $configargs ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_pkey_free	秘密鍵を開放する	void openssl_pkey_free ( resource $key )	値を返しません。
openssl_pkey_get_details	キーの詳細の配列を返す	array openssl_pkey_get_details ( resource $key )	成功した場合にキーの詳細を含む配列、失敗した場合に FALSE を返します。 返される配列のキーは bits (ビット数)、 key (公開鍵を表す文字列) および type (キーの種類。 OPENSSL_KEYTYPE_RSA、 OPENSSL_KEYTYPE_DSA、 OPENSSL_KEYTYPE_DH、 OPENSSL_KEYTYPE_EC のいずれか。あるいは不明な場合は -1) となります。
openssl_pkey_get_private	秘密鍵を取得する	resource openssl_pkey_get_private ( mixed $key [, string $passphrase = "" ] )	成功した場合に正のキーリソース ID、エラー時に FALSE を返します。
openssl_pkey_get_public	証明書から公開鍵を抽出し、使用できるようにする	resource openssl_pkey_get_public ( mixed $certificate )	成功した場合に正のキーリソース ID、エラー時に FALSE を返します。
openssl_pkey_new	新規に秘密鍵を生成する	resource openssl_pkey_new ([ array $configargs ] )	成功した場合に秘密鍵のリソース ID、 エラー時に FALSE を返します。
openssl_private_decrypt	秘密鍵でデータを復号する	bool openssl_private_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_private_encrypt	秘密鍵でデータを暗号化する	bool openssl_private_encrypt ( string $data , string &$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_public_decrypt	公開鍵でデータを復号する	bool openssl_public_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_public_encrypt	公開鍵でデータを暗号化する	bool openssl_public_encrypt ( string $data , string &$crypted , mixed $key [, int $padding = OPENSSL_PKCS1_PADDING ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_random_pseudo_bytes	疑似乱数のバイト文字列を生成する	string openssl_random_pseudo_bytes ( int $length [, bool &$crypto_strong ] )	成功した場合は指定したバイト長の string を返します。失敗した場合に FALSE を返します。
openssl_seal	データをシール(暗号化)する	int openssl_seal ( string $data , string &$sealed_data , array &$env_keys , array $pub_key_ids [, string $method ] )	成功時にシール(暗号化)されたデータの長さ、エラー時に FALSE を返します。成功時には、暗号化されたデータが sealed_data に、エンベロープキーが env_keys に返されます。
openssl_sign	署名を生成する	bool openssl_sign ( string $data , string &$signature , mixed $priv_key_id [, int $signature_alg = OPENSSL_ALGO_SHA1 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_verify	署名を検証する	int openssl_verify ( string $data , string $signature , mixed $pub_key_id [, int $signature_alg = OPENSSL_ALGO_SHA1 ] )	署名 (signature) が正しい場合に 1、正しくない場合に 0、 エラーの場合に -1 を返します。
openssl_x509_check_private_key	秘密鍵が証明書に対応するかを確認する	bool openssl_x509_check_private_key ( mixed $cert , mixed $key )	key が cert に対応する秘密鍵の場合に TRUE、それ以外の場合に FALSE を返します。
openssl_x509_checkpurpose	証明書が特定の目的に使用可能かどうか確認する	int openssl_x509_checkpurpose ( mixed $x509cert , int $purpose [, array $cainfo = array() [, string $untrustedfile ]] )	証明書が意図した目的に使用可能である場合に TRUE、使用できない場合に FALSE 、エラーの場合に -1 を返します。
openssl_x509_export_to_file	証明書をファイルにエクスポートする	bool openssl_x509_export_to_file ( mixed $x509 , string $outfilename [, bool $notext = TRUE ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_x509_export	証明書を文字列としてエクスポートする	bool openssl_x509_export ( mixed $x509 , string &$output [, bool $notext = TRUE ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
openssl_x509_free	証明書リソースを開放する	void openssl_x509_free ( resource $x509cert )	値を返しません。
openssl_x509_parse	X509 証明書をパースし、配列として情報を返す	array openssl_x509_parse ( mixed $x509cert [, bool $shortnames = true ] )	返されるデータの構造については（わざと）まだ文書化していません。 これは、今後もデータの構造が変更される可能性があるためです。
openssl_x509_read	X.509 証明書をパースし、リソース ID を返す	resource openssl_x509_read ( mixed $x509certdata )	成功した場合にリソース ID、失敗した場合に FALSE を返します。
ord	文字の ASCII 値を返す	int ord ( string $string )	ASCII 値を返します。
output_add_rewrite_var	URL リライタの値を追加する	bool output_add_rewrite_var ( string $name , string $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
output_reset_rewrite_vars	URL リライタの値をリセットする	bool output_reset_rewrite_vars ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
override_function	組み込みの関数を上書きする	bool override_function ( string $function_name , string $function_args , string $function_code )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ovrimos_close	ovrimos への接続を閉じる	void ovrimos_close ( int $connection )	値を返しません。
ovrimos_commit	トランザクションをコミットする	bool ovrimos_commit ( int $connection_id )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ovrimos_connect	指定したデータベースに接続する	int ovrimos_connect ( string $host , string $dborport , string $user , string $password )	成功した場合に接続 ID (0 より大きい値)、 失敗した場合に 0 を返します。
ovrimos_cursor	カーソルの名前を返す	string ovrimos_cursor ( int $result_id )	名前を表す文字列、あるいはエラー時に FALSE を返します。
ovrimos_exec	SQL 文を実行する	int ovrimos_exec ( int $connection_id , string $query )	結果 ID を表す文字列、あるいはエラー時に FALSE を返します。
ovrimos_execute	準備された SQL 命令を実行する	bool ovrimos_execute ( int $result_id [, array $parameters_array ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ovrimos_fetch_into	結果セットから行を取得する	bool ovrimos_fetch_into ( int $result_id , array &$result_array [, string $how [, int $rownumber ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ovrimos_fetch_row	結果セットからレコードを取得する	bool ovrimos_fetch_row ( int $result_id [, int $how [, int $row_number ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ovrimos_field_len	出力カラムの長さを返す	int ovrimos_field_len ( int $result_id , int $field_number )	フィールドの長さを表す整数値、あるいはエラー時に FALSE を返します。
ovrimos_field_name	出力のカラム名を返す	string ovrimos_field_name ( int $result_id , int $field_number )	フィールド名を表す文字列、あるいはエラー時に FALSE を返します。
ovrimos_field_num	出力カラムの (1 から始まる) インデックスを返す	int ovrimos_field_num ( int $result_id , string $field_name )	1 からはじまるインデックス、あるいはエラー時に FALSE を返します。
ovrimos_field_type	出力カラムの型を返す	int ovrimos_field_type ( int $result_id , int $field_number )	フィールドの型を表す整数値、あるいはエラー時に FALSE を返します。
ovrimos_free_result	指定した result_id を開放する	bool ovrimos_free_result ( int $result_id )	TRUE を返します。
ovrimos_longreadlen	long データ型から取得されるバイト数を指定する	bool ovrimos_longreadlen ( int $result_id , int $length )	TRUE を返します。
ovrimos_num_fields	カラム数を返す	int ovrimos_num_fields ( int $result_id )	カラムの数を表す整数値、あるいはエラー時に FALSE を返します。
ovrimos_num_rows	update 命令により変更された行の数を返す	int ovrimos_num_rows ( int $result_id )	行の数を表す整数値、あるいはエラー時 FALSE を返します。
ovrimos_prepare	SQL 命令を準備する	int ovrimos_prepare ( int $connection_id , string $query )	成功した場合に結果 ID、エラー時に FALSE を返します。
ovrimos_result_all	結果全体を HTML テーブルとして出力する	int ovrimos_result_all ( int $result_id [, string $format ] )	作成された表の行数を返します。
ovrimos_result	出力カラムを取得する	string ovrimos_result ( int $result_id , mixed $field )	カラムを表す文字列、あるいは失敗した場合に FALSE を返します。
ovrimos_rollback	トランザクションをロールバックする	bool ovrimos_rollback ( int $connection_id )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pack	データをバイナリ文字列にパックする	string pack ( string $format [, mixed $args [, mixed $... ]] )	バイナリ文字列を含むデータを返します。
parse_ini_file	設定ファイルをパースする	array parse_ini_file ( string $filename [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]] )	成功した場合に設定を連想配列形式で返します。 失敗した場合に FALSE を返します。
parse_ini_string	設定文字列をパースする	array parse_ini_string ( string $ini [, bool $process_sections = false [, int $scanner_mode = INI_SCANNER_NORMAL ]] )	成功した場合に設定を連想配列形式で返します。 失敗した場合に FALSE を返します。
parse_str	文字列を処理し、変数に代入する	void parse_str ( string $str [, array &$arr ] )	値を返しません。
parse_url	URL を解釈し、その構成要素を返す	mixed parse_url ( string $url [, int $component = -1 ] )	完全におかしな形式の URL については、 parse_url() は FALSE を返します。
parsekit_compile_file	PHP コードの文字列をコンパイルし、結果を op コードの配列で返す	array parsekit_compile_file ( string $filename [, array &$errors [, int $options = PARSEKIT_QUIET ]] )	複雑な形式の配列を返します。詳細は以下に示します。
parsekit_compile_string	PHP コードの文字列をコンパイルし、結果を op コードの配列で返す	array parsekit_compile_string ( string $phpcode [, array &$errors [, int $options = PARSEKIT_QUIET ]] )	複雑な形式の配列を返します。詳細は以下に示します。
parsekit_func_arginfo	関数の引数に関する情報を返す	array parsekit_func_arginfo ( mixed $function )	引数の情報を含む配列を返します。
passthru	外部プログラムを実行し、未整形の出力を表示する	void passthru ( string $command [, int &$return_var ] )	値を返しません。
password_get_info	指定したハッシュに関する情報を返す	array password_get_info ( string $hash )	三つの要素を持つ連想配列を返します。 algo には、そのハッシュの パスワードアルゴリズム定数 が含まれます。 algoName には、そのアルゴリズムの名前が含まれます。 options には、 password_hash() を呼んだときのオプションが含まれます。
password_hash	パスワードハッシュを作る	string password_hash ( string $password , integer $algo [, array $options ] )	ハッシュしたパスワードを返します。失敗した場合に FALSE を返します。
password_needs_rehash	指定したハッシュがオプションにマッチするかどうかを調べる	boolean password_needs_rehash ( string $hash , string $algo [, string $options ] )	指定した algo と options にマッチするためにハッシュの再計算が必要な場合は TRUE、 それ以外の場合は FALSE を返します。
password_verify	パスワードがハッシュにマッチするかどうかを調べる	boolean password_verify ( string $password , string $hash )	パスワードとハッシュがマッチする場合に TRUE、それ以外の場合に FALSE を返します。
pathinfo	ファイルパスに関する情報を返す	mixed pathinfo ( string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ] )	options パラメータを渡さなかった場合は、次の要素を含む連想配列を返します。 dirname、basename、 extension (存在すれば)、そして filename。
pclose	プロセスのファイルポインタをクローズする	int pclose ( resource $handle )	実行していたプロセスの終了ステータスを返します。 エラーが発生した場合は -1 を返します。
pcntl_alarm	シグナルを送信するアラームを設定する	int pcntl_alarm ( int $seconds )	それまでに予定されていたアラームの予定時刻までの秒数を返します。 事前に予定されていたアラームがなかった場合には 0 を返します。
pcntl_errno	pcntl_strerror() のエイリアス
pcntl_exec	現在のプロセス空間で指定したプログラムを実行する	void pcntl_exec ( string $path [, array $args [, array $envs ]] )	エラー時に FALSE を返し、成功時には何も返しません。
pcntl_fork	現在実行中のプロセスをフォークする	int pcntl_fork ( void )	成功時に、子プロセスの PID が親プロセスの実行スレッドに返され、 子プロセスの実行スレッドには 0 が返されます。失敗した場合、親プロセスの コンテキストに -1 が返され、子プロセスは生成されずに、PHP のエラーが 出力されます。
pcntl_get_last_error	直近の pcntl 関数が失敗したときのエラー番号を取得する	int pcntl_get_last_error ( void )	エラーコードを返します。
pcntl_getpriority	プロセスの優先度を取得する	int pcntl_getpriority ([ int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS ]] )	pcntl_getpriority() はプロセスの優先度を返します。 エラー時には FALSE を返します。数字が小さいほど、優先順位は上となります。
pcntl_setpriority	プロセスの優先度を変更する	bool pcntl_setpriority ( int $priority [, int $pid = getmypid() [, int $process_identifier = PRIO_PROCESS ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pcntl_signal_dispatch	ペンディングシグナル用のハンドラをコールする	bool pcntl_signal_dispatch ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pcntl_signal	シグナルハンドラを設定する	bool pcntl_signal ( int $signo , callable|int $handler [, bool $restart_syscalls = true ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pcntl_sigprocmask	ブロックされたシグナルを設定あるいは取得する	bool pcntl_sigprocmask ( int $how , array $set [, array &$oldset ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pcntl_sigtimedwait	タイムアウトつきでシグナルを待つ	int pcntl_sigtimedwait ( array $set [, array &$siginfo [, int $seconds = 0 [, int $nanoseconds = 0 ]]] )	成功した場合に pcntl_sigtimedwait() はシグナル番号を返します。
pcntl_sigwaitinfo	シグナルを待つ	int pcntl_sigwaitinfo ( array $set [, array &$siginfo ] )	成功した場合に pcntl_sigwaitinfo() はシグナル番号を返します。
pcntl_strerror	指定した errno に対応するシステムのエラーメッセージを取得する	string pcntl_strerror ( int $errno )	エラーの説明を返します。失敗した場合に FALSE を返します。
pcntl_wait	待つかフォークした子プロセスのステータスを返す	int pcntl_wait ( int &$status [, int $options = 0 ] )	pcntl_wait() は、終了した子プロセスの プロセス ID を返します。エラーの場合は -1、(wait3 が使用可能なシステムで) WNOHANG が使用され、子プロセスが利用できない場合に 0 を返します。
pcntl_waitpid	待つかフォークした子プロセスのステータスを返す	int pcntl_waitpid ( int $pid , int &$status [, int $options = 0 ] )	pcntl_waitpid() は、終了した子プロセスの プロセス ID を返します。エラーの場合は -1、WNOHANG が使用され、 子プロセスが利用できない場合に 0 を返します。
pcntl_wexitstatus	終了した子プロセスのリターンコードを返す	int pcntl_wexitstatus ( int $status )	リターンコードを表す整数値を返します。
pcntl_wifexited	ステータスコードが正常終了を表しているかどうかを調べる	bool pcntl_wifexited ( int $status )	子プロセスのステータスコードが終了に成功した場合に TRUE、 それ以外の場合に FALSE を返します。
pcntl_wifsignaled	ステータスコードがシグナルによる終了を表しているかどうかを調べる	bool pcntl_wifsignaled ( int $status )	捕捉されなかったシグナルのせいで子プロセスが終了した場合に TRUE、 それ以外の場合に FALSE を返します。
pcntl_wifstopped	子プロセスが現在停止しているかどうかを調べる	bool pcntl_wifstopped ( int $status )	リターンを生じた子プロセスが現在停止している場合に TRUE、 それ以外の場合に FALSE を返します。
pcntl_wstopsig	子プロセスを停止させたシグナルを返す	int pcntl_wstopsig ( int $status )	シグナル番号を返します。
pcntl_wtermsig	子プロセスの終了を生じたシグナルを返す	int pcntl_wtermsig ( int $status )	シグナル番号を表す整数値を返します。
PDF_activate_item	構造体要素やその他の内容をアクティブにする	bool PDF_activate_item ( resource $pdfdoc , int $id )
PDF_add_annotation	注記を追加する [古い関数]
PDF_add_bookmark	ブックマークを現在のページに追加する [古い関数]
PDF_add_launchlink	現在のページに起動用注記を追加する [古い関数]	bool PDF_add_launchlink ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename )
PDF_add_locallink	現在のページにリンク注記を追加する [古い関数]	bool PDF_add_locallink ( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , int $page , string $dest )
PDF_add_nameddest	移動先を作成する	bool PDF_add_nameddest ( resource $pdfdoc , string $name , string $optlist )
PDF_add_note	現在のページに注記を追加する [古い関数]	bool PDF_add_note ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open )
PDF_add_outline	現在のページにブックマークを追加する [古い関数]
PDF_add_pdflink	現在のページにリンク注記を追加する [古い関数]	bool PDF_add_pdflink ( resource $pdfdoc , float $bottom_left_x , float $bottom_left_y , float $up_right_x , float $up_right_y , string $filename , int $page , string $dest )
PDF_add_table_cell	新しいテーブル、あるいは既存のテーブルにセルを追加する	int PDF_add_table_cell ( resource $pdfdoc , int $table , int $column , int $row , string $text , string $optlist )
PDF_add_textflow	Textflow を作成するか、既存の Textflow にテキストを追加する	int PDF_add_textflow ( resource $pdfdoc , int $textflow , string $text , string $optlist )
PDF_add_thumbnail	現在のページにサムネイルを追加する	bool PDF_add_thumbnail ( resource $pdfdoc , int $image )
PDF_add_weblink	現在のページに Web リンクを追加する [古い関数]	bool PDF_add_weblink ( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , string $url )
PDF_arc	反時計回りに円弧を描く	bool PDF_arc ( resource $p , float $x , float $y , float $r , float $alpha , float $beta )
PDF_arcn	時計回りに円弧を描く	bool PDF_arcn ( resource $p , float $x , float $y , float $r , float $alpha , float $beta )
PDF_attach_file	現在のページに添付ファイルを追加する [古い関数]	bool PDF_attach_file ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename , string $description , string $author , string $mimetype , string $icon )
PDF_begin_document	新しい PDF ファイルを作成する	int PDF_begin_document ( resource $pdfdoc , string $filename , string $optlist )
PDF_begin_font	Type 3 フォント定義を開始する	bool PDF_begin_font ( resource $pdfdoc , string $filename , float $a , float $b , float $c , float $d , float $e , float $f , string $optlist )
PDF_begin_glyph	Type 3 フォントのグリフ定義を開始する	bool PDF_begin_glyph ( resource $pdfdoc , string $glyphname , float $wx , float $llx , float $lly , float $urx , float $ury )
PDF_begin_item	構造体要素あるいはその他の内容をオープンする	int PDF_begin_item ( resource $pdfdoc , string $tag , string $optlist )
PDF_begin_layer	レイヤーを開始する	bool PDF_begin_layer ( resource $pdfdoc , int $layer )
PDF_begin_page_ext	新規ページを開始する	bool PDF_begin_page_ext ( resource $pdfdoc , float $width , float $height , string $optlist )
PDF_begin_page	新規ページを開始する [古い関数]	bool PDF_begin_page ( resource $pdfdoc , float $width , float $height )
PDF_begin_pattern	パターン定義を開始する	int PDF_begin_pattern ( resource $pdfdoc , float $width , float $height , float $xstep , float $ystep , int $painttype )
PDF_begin_template_ext	テンプレート定義を開始する	int PDF_begin_template_ext ( resource $pdfdoc , float $width , float $height , string $optlist )
PDF_begin_template	テンプレート定義を開始する [古い関数]	int PDF_begin_template ( resource $pdfdoc , float $width , float $height )
PDF_circle	円を描く	bool PDF_circle ( resource $pdfdoc , float $x , float $y , float $r )
PDF_clip	現在のパスに切り取る	bool PDF_clip ( resource $p )
PDF_close_image	画像を閉じる	bool PDF_close_image ( resource $p , int $image )
PDF_close_pdi_page	ページハンドルを閉じる	bool PDF_close_pdi_page ( resource $p , int $page )
PDF_close_pdi	PDF ドキュメント入力を閉じる [古い関数]	bool PDF_close_pdi ( resource $p , int $doc )
PDF_close	pdf ドキュメントを閉じる [古い関数]	bool PDF_close ( resource $p )
PDF_closepath_fill_stroke	現在のパスを閉じ、塗りつぶし、輪郭を描く	bool PDF_closepath_fill_stroke ( resource $p )
PDF_closepath_stroke	パスを閉じ、パスに沿って線を描く	bool PDF_closepath_stroke ( resource $p )
PDF_closepath	現在のパスを閉じる	bool PDF_closepath ( resource $p )
PDF_concat	行列を CTM に追加する	bool PDF_concat ( resource $p , float $a , float $b , float $c , float $d , float $e , float $f )
PDF_continue_text	次の行にテキストを出力する	bool PDF_continue_text ( resource $p , string $text )
PDF_create_3dview	3D ビューを作成する	int PDF_create_3dview ( resource $pdfdoc , string $username , string $optlist )
PDF_create_action	オブジェクトやイベントに対するアクションを作成する	int PDF_create_action ( resource $pdfdoc , string $type , string $optlist )
PDF_create_annotation	矩形の注記を作成する	bool PDF_create_annotation ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $type , string $optlist )
PDF_create_bookmark	ブックマークを作成する	int PDF_create_bookmark ( resource $pdfdoc , string $text , string $optlist )
PDF_create_field	フォームフィールドを作成する	bool PDF_create_field ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $name , string $type , string $optlist )
PDF_create_fieldgroup	フォームフィールドグループを作成する	bool PDF_create_fieldgroup ( resource $pdfdoc , string $name , string $optlist )
PDF_create_gstate	画像状態オブジェクトを作成する	int PDF_create_gstate ( resource $pdfdoc , string $optlist )
PDF_create_pvf	PDFlib 仮想ファイルを作成する	bool PDF_create_pvf ( resource $pdfdoc , string $filename , string $data , string $optlist )
PDF_create_textflow	textflow オブジェクトを作成する	int PDF_create_textflow ( resource $pdfdoc , string $text , string $optlist )
PDF_curveto	ベジエ曲線を描く	bool PDF_curveto ( resource $p , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )
PDF_define_layer	レイヤー定義を作成する	int PDF_define_layer ( resource $pdfdoc , string $name , string $optlist )
PDF_delete_pvf	PDFlib 仮想ファイルを削除する	int PDF_delete_pvf ( resource $pdfdoc , string $filename )
PDF_delete_table	テーブルオブジェクトを削除する	bool PDF_delete_table ( resource $pdfdoc , int $table , string $optlist )
PDF_delete_textflow	textflow オブジェクトを削除する	bool PDF_delete_textflow ( resource $pdfdoc , int $textflow )
PDF_delete	PDFlib オブジェクトを削除する	bool PDF_delete ( resource $pdfdoc )
PDF_encoding_set_char	グリフ名や Unicode 値を追加する	bool PDF_encoding_set_char ( resource $pdfdoc , string $encoding , int $slot , string $glyphname , int $uv )
PDF_end_document	PDF ファイルを閉じる	bool PDF_end_document ( resource $pdfdoc , string $optlist )
PDF_end_font	Type 3 フォント定義を終了する	bool PDF_end_font ( resource $pdfdoc )
PDF_end_glyph	Type 3 フォントのグリフ定義を終了する	bool PDF_end_glyph ( resource $pdfdoc )
PDF_end_item	構造体要素やその他の内容を閉じる	bool PDF_end_item ( resource $pdfdoc , int $id )
PDF_end_layer	すべてのアクティブなレイヤーを無効にする	bool PDF_end_layer ( resource $pdfdoc )
PDF_end_page_ext	ページを終了する	bool PDF_end_page_ext ( resource $pdfdoc , string $optlist )
PDF_end_page	ページを終了する	bool PDF_end_page ( resource $p )
PDF_end_pattern	パターンを終了する	bool PDF_end_pattern ( resource $p )
PDF_end_template	テンプレートを終了する	bool PDF_end_template ( resource $p )
PDF_endpath	現在のパスを終了する	bool PDF_endpath ( resource $p )
PDF_fill_imageblock	画像ブロックをさまざまなデータで塗りつぶす	int PDF_fill_imageblock ( resource $pdfdoc , int $page , string $blockname , int $image , string $optlist )
PDF_fill_pdfblock	PDF ブロックをさまざまなデータで塗りつぶす	int PDF_fill_pdfblock ( resource $pdfdoc , int $page , string $blockname , int $contents , string $optlist )
PDF_fill_stroke	パスを塗りつぶし、パスの輪郭を描く	bool PDF_fill_stroke ( resource $p )
PDF_fill_textblock	テキストブロックをさまざまなデータで塗りつぶす	int PDF_fill_textblock ( resource $pdfdoc , int $page , string $blockname , string $text , string $optlist )
PDF_fill	現在のパスを塗りつぶす	bool PDF_fill ( resource $p )
PDF_findfont	後で使用するフォントを準備する [古い関数]	int PDF_findfont ( resource $p , string $fontname , string $encoding , int $embed )
PDF_fit_image	画像やテンプレートを配置する	bool PDF_fit_image ( resource $pdfdoc , int $image , float $x , float $y , string $optlist )
PDF_fit_pdi_page	インポートした PDF ページを配置する	bool PDF_fit_pdi_page ( resource $pdfdoc , int $page , float $x , float $y , string $optlist )
PDF_fit_table	テーブルをページに配置する	string PDF_fit_table ( resource $pdfdoc , int $table , float $llx , float $lly , float $urx , float $ury , string $optlist )
PDF_fit_textflow	textflow を矩形領域に配置する	string PDF_fit_textflow ( resource $pdfdoc , int $textflow , float $llx , float $lly , float $urx , float $ury , string $optlist )
PDF_fit_textline	1 行分のテキストを配置する	bool PDF_fit_textline ( resource $pdfdoc , string $text , float $x , float $y , string $optlist )
PDF_get_apiname	成功しなかった API 関数の名前を取得する	string PDF_get_apiname ( resource $pdfdoc )
PDF_get_buffer	PDF 出力バッファを取得する	string PDF_get_buffer ( resource $p )
PDF_get_errmsg	エラーテキストを取得する	string PDF_get_errmsg ( resource $pdfdoc )
PDF_get_errnum	エラー番号を取得する	int PDF_get_errnum ( resource $pdfdoc )
PDF_get_font	フォントを取得する [古い関数]
PDF_get_fontname	フォント名を取得する [古い関数]
PDF_get_fontsize	フォント処理 [古い関数]
PDF_get_image_height	画像の高さを取得する [古い関数]
PDF_get_image_width	画像の幅を取得する [古い関数]
PDF_get_majorversion	メジャーバージョン番号を取得する [古い関数]	int PDF_get_majorversion ( void )
PDF_get_minorversion	マイナーバージョン番号を取得する [古い関数]	int PDF_get_minorversion ( void )
PDF_get_parameter	文字列パラメータを取得する	string PDF_get_parameter ( resource $p , string $key , float $modifier )
PDF_get_pdi_parameter	PDI 文字列パラメータを取得する [古い関数]	string PDF_get_pdi_parameter ( resource $p , string $key , int $doc , int $page , int $reserved )
PDF_get_pdi_value	数値型の PDI パラメータを取得する [古い関数]	float PDF_get_pdi_value ( resource $p , string $key , int $doc , int $page , int $reserved )
PDF_get_value	数値型のパラメータを取得する	float PDF_get_value ( resource $p , string $key , float $modifier )
PDF_info_font	読み込まれたフォントについての詳細情報を問い合わせる	float PDF_info_font ( resource $pdfdoc , int $font , string $keyword , string $optlist )
PDF_info_matchbox	マッチボックスの情報を問い合わせる	float PDF_info_matchbox ( resource $pdfdoc , string $boxname , int $num , string $keyword )
PDF_info_table	テーブルの情報を取得する	float PDF_info_table ( resource $pdfdoc , int $table , string $keyword )
PDF_info_textflow	textflow の状態を問い合わせる	float PDF_info_textflow ( resource $pdfdoc , int $textflow , string $keyword )
PDF_info_textline	テキストの行のフォーマットを行い、メトリクスを問い合わせる	float PDF_info_textline ( resource $pdfdoc , string $text , string $keyword , string $optlist )
PDF_initgraphics	描画状態をリセットする	bool PDF_initgraphics ( resource $p )
PDF_lineto	線を描く	bool PDF_lineto ( resource $p , float $x , float $y )
PDF_load_3ddata	3D モデルを読み込む	int PDF_load_3ddata ( resource $pdfdoc , string $filename , string $optlist )
PDF_load_font	フォントを検索し、準備する	int PDF_load_font ( resource $pdfdoc , string $fontname , string $encoding , string $optlist )
PDF_load_iccprofile	ICC プロファイルを検索し、準備する	int PDF_load_iccprofile ( resource $pdfdoc , string $profilename , string $optlist )
PDF_load_image	画像ファイルをオープンする	int PDF_load_image ( resource $pdfdoc , string $imagetype , string $filename , string $optlist )
PDF_makespotcolor	スポット色を作成する	int PDF_makespotcolor ( resource $p , string $spotname )
PDF_moveto	現在の位置を設定する	bool PDF_moveto ( resource $p , float $x , float $y )
PDF_new	PDFlib オブジェクトを作成する	resource PDF_new ( void )
PDF_open_ccitt	raw CCITT イメージをオープンする [古い関数]	int PDF_open_ccitt ( resource $pdfdoc , string $filename , int $width , int $height , int $BitReverse , int $k , int $Blackls1 )
PDF_open_file	PDF ファイルを作成する [古い関数]	bool PDF_open_file ( resource $p , string $filename )
PDF_open_gif	GIF イメージをオープンする [古い関数]
PDF_open_image_file	ファイルからイメージを読み込む [古い関数]	int PDF_open_image_file ( resource $p , string $imagetype , string $filename , string $stringparam , int $intparam )
PDF_open_image	イメージデータを使用する [古い関数]	int PDF_open_image ( resource $p , string $imagetype , string $source , string $data , int $length , int $width , int $height , int $components , int $bpc , string $params )
PDF_open_jpeg	JPEG イメージをオープンする [古い関数]
PDF_open_memory_image	PHP のイメージ関数で作成されたイメージをオープンする [未サポート]	int PDF_open_memory_image ( resource $p , resource $image )
PDF_open_pdi_document	pdi ドキュメントを準備する	int PDF_open_pdi_document ( resource $p , string $filename , string $optlist )
PDF_open_pdi_page	ページを準備する	int PDF_open_pdi_page ( resource $p , int $doc , int $pagenumber , string $optlist )
PDF_open_pdi	PDF ファイルをオープンする [古い関数]	int PDF_open_pdi ( resource $pdfdoc , string $filename , string $optlist , int $len )
PDF_open_tiff	TIFF イメージをオープンする [古い関数]
PDF_pcos_get_number	number あるいは boolean 型の pCOS パスの値を取得する	float PDF_pcos_get_number ( resource $p , int $doc , string $path )
PDF_pcos_get_stream	stream、fstream あるいは string 型の pCOS パスの内容を取得する	string PDF_pcos_get_stream ( resource $p , int $doc , string $optlist , string $path )
PDF_pcos_get_string	name、string あるいは boolean 型の pCOS パスの値を取得する	string PDF_pcos_get_string ( resource $p , int $doc , string $path )
PDF_place_image	イメージをページ上に置く [古い関数]	bool PDF_place_image ( resource $pdfdoc , int $image , float $x , float $y , float $scale )
PDF_place_pdi_page	PDF ページを置く [古い関数]	bool PDF_place_pdi_page ( resource $pdfdoc , int $page , float $x , float $y , float $sx , float $sy )
PDF_process_pdi	インポートされた PDF ドキュメントを処理する	int PDF_process_pdi ( resource $pdfdoc , int $doc , int $page , string $optlist )
PDF_rect	矩形を描く	bool PDF_rect ( resource $p , float $x , float $y , float $width , float $height )
PDF_restore	描画状態を復元する	bool PDF_restore ( resource $p )
PDF_resume_page	ページを再開する	bool PDF_resume_page ( resource $pdfdoc , string $optlist )
PDF_rotate	座標系を回転する	bool PDF_rotate ( resource $p , float $phi )
PDF_save	描画状態を保存する	bool PDF_save ( resource $p )
PDF_scale	スケールを設定する	bool PDF_scale ( resource $p , float $sx , float $sy )
PDF_set_border_color	注記の周りの境界色を設定する [古い関数]	bool PDF_set_border_color ( resource $p , float $red , float $green , float $blue )
PDF_set_border_dash	注記の周りの境界の破線形式を設定する [古い関数]	bool PDF_set_border_dash ( resource $pdfdoc , float $black , float $white )
PDF_set_border_style	注記の周りの境界の形式を設定する [古い関数]	bool PDF_set_border_style ( resource $pdfdoc , string $style , float $width )
PDF_set_char_spacing	文字間隔を設定する [古い関数]
PDF_set_duration	ページ間隔を設定する [古い関数]
PDF_set_gstate	画像状態オブジェクトをアクティブにする	bool PDF_set_gstate ( resource $pdfdoc , int $gstate )
PDF_set_horiz_scaling	テキストの横方向倍率を設定する [古い関数]
PDF_set_info_author	ドキュメントの author フィールドを設定する [古い関数]
PDF_set_info_creator	ドキュメントの creator フィールドを設定する [古い関数]
PDF_set_info_keywords	ドキュメントの keyword フィールドを設定する [古い関数]
PDF_set_info_subject	ドキュメントの subject フィールドを設定する [古い関数]
PDF_set_info_title	ドキュメントの title フィールドを設定する [古い関数]
PDF_set_info	ドキュメント情報のフィールドを設定する	bool PDF_set_info ( resource $p , string $key , string $value )
PDF_set_layer_dependency	レイヤー間の関係を定義する	bool PDF_set_layer_dependency ( resource $pdfdoc , string $type , string $optlist )
PDF_set_leading	テキストの行間を設定する [古い関数]
PDF_set_parameter	文字列パラメータを設定する	bool PDF_set_parameter ( resource $p , string $key , string $value )
PDF_set_text_matrix	テキストの行列を設定する [古い関数]
PDF_set_text_pos	テキストの位置を設定する	bool PDF_set_text_pos ( resource $p , float $x , float $y )
PDF_set_text_rendering	テキストの描画方法を設定する [古い関数]
PDF_set_text_rise	テキストの傾きを設定する [古い関数]
PDF_set_value	数値パラメータを設定する	bool PDF_set_value ( resource $p , string $key , float $value )
PDF_set_word_spacing	単語間の空白を設定する [古い関数]
PDF_setcolor	塗りつぶし色および輪郭色を設定する	bool PDF_setcolor ( resource $p , string $fstype , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4 )
PDF_setdash	破線パターンを設定する	bool PDF_setdash ( resource $pdfdoc , float $b , float $w )
PDF_setdashpattern	破線パターンを設定する	bool PDF_setdashpattern ( resource $pdfdoc , string $optlist )
PDF_setflat	平面度を設定する	bool PDF_setflat ( resource $pdfdoc , float $flatness )
PDF_setfont	フォントを設定する	bool PDF_setfont ( resource $pdfdoc , int $font , float $fontsize )
PDF_setgray_fill	塗りつぶし色をグレーに設定する [古い関数]	bool PDF_setgray_fill ( resource $p , float $g )
PDF_setgray_stroke	描画色をグレーに設定する [古い関数]	bool PDF_setgray_stroke ( resource $p , float $g )
PDF_setgray	色をグレーに設定する [古い関数]	bool PDF_setgray ( resource $p , float $g )
PDF_setlinecap	linecap パラメータを設定する	bool PDF_setlinecap ( resource $p , int $linecap )
PDF_setlinejoin	linejoin パラメータを設定する	bool PDF_setlinejoin ( resource $p , int $value )
PDF_setlinewidth	線幅を設定する	bool PDF_setlinewidth ( resource $p , float $width )
PDF_setmatrix	現在の変換行列を設定する	bool PDF_setmatrix ( resource $p , float $a , float $b , float $c , float $d , float $e , float $f )
PDF_setmiterlimit	miter limit を設定する	bool PDF_setmiterlimit ( resource $pdfdoc , float $miter )
PDF_setpolydash	複雑な破線パターンを設定する [古い関数]
PDF_setrgbcolor_fill	塗りつぶし RGB 色の値を設定する	bool PDF_setrgbcolor_fill ( resource $p , float $red , float $green , float $blue )
PDF_setrgbcolor_stroke	描画 RGB 色を設定する [古い関数]	bool PDF_setrgbcolor_stroke ( resource $p , float $red , float $green , float $blue )
PDF_setrgbcolor	描画および塗りつぶし RGB 色を設定する [古い関数]	bool PDF_setrgbcolor ( resource $p , float $red , float $green , float $blue )
PDF_shading_pattern	シェーディングパターンを定義する	int PDF_shading_pattern ( resource $pdfdoc , int $shading , string $optlist )
PDF_shading	混色を定義する	int PDF_shading ( resource $pdfdoc , string $shtype , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist )
PDF_shfill	シェーディングで領域を塗りつぶす	bool PDF_shfill ( resource $pdfdoc , int $shading )
PDF_show_boxed	ボックスにテキストを出力する [古い関数]	int PDF_show_boxed ( resource $p , string $text , float $left , float $top , float $width , float $height , string $mode , string $feature )
PDF_show_xy	指定した位置にテキストを出力する	bool PDF_show_xy ( resource $p , string $text , float $x , float $y )
PDF_show	現在の位置にテキストを出力する	bool PDF_show ( resource $pdfdoc , string $text )
PDF_skew	座標系を歪ませる	bool PDF_skew ( resource $p , float $alpha , float $beta )
PDF_stringwidth	テキストの幅を返す	float PDF_stringwidth ( resource $p , string $text , int $font , float $fontsize )
PDF_stroke	パスを描く	bool PDF_stroke ( resource $p )
PDF_suspend_page	ページを停止する	bool PDF_suspend_page ( resource $pdfdoc , string $optlist )
PDF_translate	座標系の原点を設定する	bool PDF_translate ( resource $p , float $tx , float $ty )
PDF_utf16_to_utf8	文字列を UTF-16 から UTF-8 に変換する	string PDF_utf16_to_utf8 ( resource $pdfdoc , string $utf16string )
PDF_utf32_to_utf16	文字列を UTF-32 から UTF-16 に変換する	string PDF_utf32_to_utf16 ( resource $pdfdoc , string $utf32string , string $ordering )
PDF_utf8_to_utf16	文字列を UTF-8 から UTF-16 に変換する	string PDF_utf8_to_utf16 ( resource $pdfdoc , string $utf8string , string $ordering )
pfsockopen	持続的な Internet または Unix ドメインソケット接続をオープンする	resource pfsockopen ( string $hostname [, int $port = -1 [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") ]]]] )
pg_affected_rows	変更されたレコード(タプル)の数を返す	int pg_affected_rows ( resource $result )	クエリによって変更された行の数を返します。もし変更されたタプルがない場合は 0 を返します。
pg_cancel_query	非同期クエリを取り消す	bool pg_cancel_query ( resource $connection )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pg_client_encoding	クライアントのエンコーディングを取得する	string pg_client_encoding ([ resource $connection ] )	クライアントのエンコーディングを返します。エラー時には FALSE を返します。
pg_close	PostgreSQL 接続をクローズする	bool pg_close ([ resource $connection ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pg_connect	PostgreSQL 接続をオープンする	resource pg_connect ( string $connection_string [, int $connect_type ] )	成功した場合に PostgreSQL の接続リソース、失敗した場合に FALSE を返します。
pg_connection_busy	接続がビジーかどうか調べる	bool pg_connection_busy ( resource $connection )	接続がビジーの場合に TRUE 、そうでない場合に FALSE を返します。
pg_connection_reset	接続をリセット(再接続)する	bool pg_connection_reset ( resource $connection )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pg_connection_status	接続ステータスを取得する	int pg_connection_status ( resource $connection )	PGSQL_CONNECTION_OK あるいは PGSQL_CONNECTION_BAD 。
pg_convert	連想配列の値を、SQL 文として実行可能な形式に変換する	array pg_convert ( resource $connection , string $table_name , array $assoc_array [, int $options = 0 ] )	変換された値の配列を返します。エラー時には FALSE を返します。
pg_copy_from	配列からテーブルに挿入する	bool pg_copy_from ( resource $connection , string $table_name , array $rows [, string $delimiter [, string $null_as ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pg_copy_to	配列にテーブルをコピーする	array pg_copy_to ( resource $connection , string $table_name [, string $delimiter [, string $null_as ]] )	COPY されたデータが 1 行ごとにひとつの要素と なっている配列を返します。失敗した場合には FALSE を返します。
pg_dbname	データベース名を取得する	string pg_dbname ([ resource $connection ] )	connection が指すデータベースの名前を表す 文字列を返します。エラー時には FALSE を返します。
pg_delete	レコードを削除する	mixed pg_delete ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 options で PGSQL_DML_STRING が渡された場合は文字列を返します。
pg_end_copy	PostgreSQL バックエンドと同期する	bool pg_end_copy ([ resource $connection ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pg_escape_bytea	bytea フィールドに挿入するために文字列をエスケープする	string pg_escape_bytea ([ resource $connection ], string $data )	エスケープされたデータを文字列で返します。
pg_escape_identifier	テキスト型フィールドに挿入するために、識別子をエスケープする	string pg_escape_identifier ([ resource $connection ], string $data )	エスケープされたデータを文字列で返します。
pg_escape_literal	テキスト型フィールドに挿入するために、リテラルをエスケープする	string pg_escape_literal ([ resource $connection ], string $data )	エスケープされたデータを文字列で返します。
pg_escape_string	クエリに使う文字列をエスケープする	string pg_escape_string ([ resource $connection ], string $data )	エスケープされたデータを文字列で返します。
pg_execute	指定したパラメータを用いてプリペアドステートメントを実行するリクエストを 送信し、その結果を待つ	resource pg_execute ([ resource $connection ], string $stmtname , array $params )	成功した場合にクエリ結果リソース、失敗した場合に FALSE を返します。
pg_fetch_all_columns	指定したカラムの全ての行を配列として取得する	array pg_fetch_all_columns ( resource $result [, int $column = 0 ] )	結果カラムの全ての値を配列で返します。
pg_fetch_all	取得されたすべての行を配列として取得する	array pg_fetch_all ( resource $result )	結果のすべての行を含む配列を返します。それぞれの行は、フィールド名を 添字とするフィールド値の配列です。
pg_fetch_array	行を配列として取得する	array pg_fetch_array ( resource $result [, int $row [, int $result_type = PGSQL_BOTH ]] )	0 から始まる数値添字の配列か連想配列（フィールド名をキーとする）、 あるいはその両方を返します。配列の各要素の値は文字列です。 データベースの NULL 値は、NULL として返します。
pg_fetch_assoc	行を連想配列として取得する	array pg_fetch_assoc ( resource $result [, int $row ] )	連想配列（フィールド名をキーとする）を返します。 配列の各要素の値は文字列です。 データベースの NULL 値は、NULL として返します。
pg_fetch_object	行をオブジェクトとして得る	object pg_fetch_object ( resource $result [, int $row [, int $result_type = PGSQL_ASSOC ]] )	結果の各フィールドに対応する属性を持つ object を返します。 データベースの NULL 値は NULL として返します。
pg_fetch_result	結果リソースから値を返す	string pg_fetch_result ( resource $result , int $row , mixed $field )	論理型の値は "t" あるいは "f" の形式で返します。 配列を含むそれ以外の型は、PostgreSQL のやりかたにしたがって文字列として フォーマットされた形式で返します。これは psql プログラムの出力と同じ形式です。データベースの NULL 値は、NULL として返します。
pg_fetch_row	数値添字の配列として行を得る	array pg_fetch_row ( resource $result [, int $row ] )	個々の値を文字列として格納した配列を返します。配列の添字は 0 から 始まります。データベースの NULL 値は NULL として返します。
pg_field_is_null	フィールドが SQL の NULL かどうか調べる	int pg_field_is_null ( resource $result , int $row , mixed $field )	指定した行のフィールドが SQL の NULL だった場合に 1、そうでない場合に 0 を返します。 もし範囲外の行を指定したりその他のエラーが発生したりした場合には FALSE を返します。
pg_field_name	フィールドの名前を返す	string pg_field_name ( resource $result , int $field_number )	フィールド名を返します。エラー時には FALSE を返します。
pg_field_num	指定されたフィールドのフィールド番号を返す	int pg_field_num ( resource $result , string $field_name )	フィールド番号（0 から始まります）を返します。エラー時には -1 を返します。
pg_field_prtlen	表示される長さを返す	int pg_field_prtlen ( resource $result , int $row_number , mixed $field_name_or_number )	フィールドの表示される長さを返します。エラー時には FALSE を返します。
pg_field_size	指定したフィールドの内部記憶領域におけるサイズを返す	int pg_field_size ( resource $result , int $field_number )	内部記憶領域のサイズ（バイト数）を返します。-1 は可変長フィールドを 示します。エラー時には FALSE を返します。
pg_field_table	tables フィールドの名前あるいは oid を返す	mixed pg_field_table ( resource $result , int $field_number [, bool $oid_only = false ] )	成功した場合にフィールドのテーブル名あるいは oid、 あるいは失敗した場合に FALSE を返します。
pg_field_type_oid	フィールド番号に対応する型 ID（OID）を返す	int pg_field_type_oid ( resource $result , int $field_number )	フィールドの型に対応する OID を返します。エラー時には FALSE を返します。
pg_field_type	フィールド番号に対応する型名を返す	string pg_field_type ( resource $result , int $field_number )	フィールド型の名前を文字列で返します。エラー時には FALSE を返します。
pg_free_result	メモリを開放する	bool pg_free_result ( resource $result )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pg_get_notify	SQL NOTIFY メッセージを取得する	array pg_get_notify ( resource $connection [, int $result_type ] )	NOTIFY メッセージ名とバックエンドの PID を含む 配列を返します。もし待ち受ける NOTIFY が存在しない 場合は then FALSE を返します。
pg_get_pid	バックエンドのプロセス ID を得る	int pg_get_pid ( resource $connection )	バックエンドのデータベースのプロセス ID 。
pg_get_result	非同期クエリの結果を取得する	resource pg_get_result ([ resource $connection ] )	結果 resource を返します。結果がもうない場合に FALSE を返します。
pg_host	接続に関連するホスト名を返す	string pg_host ([ resource $connection ] )	connection が接続しているホストの名前を 文字列で返します。エラー時には FALSE を返します。
pg_insert	テーブルに配列を挿入する	mixed pg_insert ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 options で PGSQL_DML_STRING が渡された場合は文字列を返します。
pg_last_error	特定の接続から直近のエラーメッセージ文字列を取得する	string pg_last_error ([ resource $connection ] )	指定した connection の直近のエラーメッセージを 含む文字列を返します。エラー時には FALSE を返します。
pg_last_notice	PostgreSQL サーバーからの直近の通知メッセージを返す	string pg_last_notice ( resource $connection )	指定された connection の直近の通知を文字列で 返します。エラー時には FALSE を返します。
pg_last_oid	直近の行のオブジェクト ID を返す	string pg_last_oid ( resource $result )	指定された connection で、直近に挿入された行に 割り当てられた OID を文字列で返します。エラー時や有効な OID のない場合に FALSE を返します。
pg_lo_close	ラージオブジェクトをクローズする	bool pg_lo_close ( resource $large_object )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pg_lo_create	ラージオブジェクトを生成する	int pg_lo_create ([ resource $connection [, mixed $object_id ]] )	ラージオブジェクトの OID を返します。 エラー時には FALSE を返します。
pg_lo_export	ラージオブジェクトをファイルにエクスポートする	bool pg_lo_export ([ resource $connection ], int $oid , string $pathname )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pg_lo_import	ファイルからラージオブジェクトをインポートする	int pg_lo_import ([ resource $connection ], string $pathname [, mixed $object_id ] )	作成されたラージオブジェクトの OID を返します。 失敗した場合には FALSE を返します。
pg_lo_open	ラージオブジェクトをオープンする	resource pg_lo_open ( resource $connection , int $oid , string $mode )	ラージオブジェクトのリソースを返します。エラー時には FALSE を返します。
pg_lo_read_all	ラージオブジェクト全体を読み込みブラウザに直接送信する	int pg_lo_read_all ( resource $large_object )	読み込んだバイト数を返します。エラー時には FALSE を返します。
pg_lo_read	ラージオブジェクトを読み込む	string pg_lo_read ( resource $large_object [, int $len = 8192 ] )	ラージオブジェクトから len バイトのデータを 文字列で返します。エラー時には FALSE を返します。
pg_lo_seek	ラージオブジェクトの位置をシークする	bool pg_lo_seek ( resource $large_object , int $offset [, int $whence = PGSQL_SEEK_CUR ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pg_lo_tell	ラージオブジェクトのカレントのシーク位置を返す	int pg_lo_tell ( resource $large_object )	ラージオブジェクトの先頭からのカレントのシーク位置（バイト数）を返します。 エラーが発生した場合は、負の数を返します。
pg_lo_unlink	ラージオブジェクトを削除する	bool pg_lo_unlink ( resource $connection , int $oid )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pg_lo_write	ラージオブジェクトを書く	int pg_lo_write ( resource $large_object , string $data [, int $len ] )	ラージオブジェクトに書き込んだバイト数を返します。 エラー時には FALSE を返します。
pg_meta_data	テーブルからメタデータを取得する	array pg_meta_data ( resource $connection , string $table_name )	テーブル定義の配列を返します。エラー時には FALSE を返します。
pg_num_fields	フィールド数を返す	int pg_num_fields ( resource $result )	結果のフィールド（カラム）数を返します。エラー時には -1 を返します。
pg_num_rows	行数を返す	int pg_num_rows ( resource $result )	結果の行数を返します。エラー時には -1 を返します。
pg_options	接続に関連するオプションを取得する	string pg_options ([ resource $connection ] )	connection のオプションを文字列で返します。 エラー時には FALSE を返します。
pg_parameter_status	サーバーのパラメータ設定を検索する	string pg_parameter_status ([ resource $connection ], string $param_name )	パラメータの値を文字列で返します。失敗した場合や param_name が間違っている場合には FALSE を返します。
pg_pconnect	持続的な PostgreSQL 接続をオープンする	resource pg_pconnect ( string $connection_string [, int $connect_type ] )	成功した場合に PostgreSQL の接続リソース、失敗した場合に FALSE を返します。
pg_ping	データベース接続を調べる	bool pg_ping ([ resource $connection ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pg_port	接続に関連するポート番号を返す	int pg_port ([ resource $connection ] )	connection が指しているデータベースのポート番号を 含む int を返します。エラー時には FALSE を返します。
pg_prepare	指定したパラメータでプリペアドステートメントを作成するリクエストを 送信し、その完了を待つ	resource pg_prepare ([ resource $connection ], string $stmtname , string $query )	成功した場合にクエリ結果リソース、失敗した場合に FALSE を返します。
pg_put_line	NULL で終わる文字列を PostgreSQL バックエンドに送信する	bool pg_put_line ([ resource $connection ], string $data )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pg_query_params	SQL コマンドとパラメータを分割してサーバーにを送信し、その結果を待つ	resource pg_query_params ([ resource $connection ], string $query , array $params )	成功した場合にクエリ結果リソース、失敗した場合に FALSE を返します。
pg_query	クエリを実行する	resource pg_query ([ resource $connection ], string $query )	成功した場合にクエリ結果リソース、失敗した場合に FALSE を返します。
pg_result_error_field	エラー報告の各フィールドを返す	string pg_result_error_field ( resource $result , int $fieldcode )	エラーフィールドの内容を文字列で返します。 フィールドが存在しない場合に NULL 、失敗した場合に FALSE を返します。
pg_result_error	結果に関連するエラーメッセージを取得する	string pg_result_error ( resource $result )	result パラメータに関連付けられたエラーがある場合は それを文字列で返し、それ以外の場合は FALSE を返します。
pg_result_seek	結果リソースの内部行オフセットを設定する	bool pg_result_seek ( resource $result , int $offset )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pg_result_status	クエリ結果のステータスを取得する	mixed pg_result_status ( resource $result [, int $type = PGSQL_STATUS_LONG ] )	PGSQL_STATUS_LONG が指定された場合の返り値は 以下のいずれかです。 PGSQL_EMPTY_QUERY、 PGSQL_COMMAND_OK、PGSQL_TUPLES_OK、PGSQL_COPY_OUT、 PGSQL_COPY_IN、PGSQL_BAD_RESPONSE、PGSQL_NONFATAL_ERROR および PGSQL_FATAL_ERROR 。 それ以外の場合は、PostgreSQL コマンドタグを含む文字列を返します。
pg_select	レコードを選択する	mixed pg_select ( resource $connection , string $table_name , array $assoc_array [, int $options = PGSQL_DML_EXEC ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 options に PGSQL_DML_STRING が渡された場合は文字列を返します。
pg_send_execute	指定したパラメータでプリペアドステートメントを実行するリクエストを 送信し、その結果を待たない	bool pg_send_execute ( resource $connection , string $stmtname , array $params )	成功した場合に TRUE 、失敗した場合に FALSE を返します。 クエリの結果を確認するには pg_get_result() を使用します。
pg_send_prepare	指定したパラメータでプリペアドステートメントを作成するリクエストを 送信し、その結果を待たない	bool pg_send_prepare ( resource $connection , string $stmtname , string $query )	成功した場合に TRUE 、失敗した場合に FALSE を返します。 クエリの結果を確かめるには pg_get_result() を使用します。
pg_send_query_params	コマンドとパラメータを分割してサーバーに送信し、その結果を待たない	bool pg_send_query_params ( resource $connection , string $query , array $params )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pg_send_query	非同期クエリを送信する	bool pg_send_query ( resource $connection , string $query )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pg_set_client_encoding	クライアントのエンコーディングを設定する	int pg_set_client_encoding ([ resource $connection ], string $encoding )	成功した場合に 0 、エラー時に -1 を返します。
pg_set_error_verbosity	pg_last_error() および pg_result_error() が返すメッセージの詳細度を指定する	int pg_set_error_verbosity ([ resource $connection ], int $verbosity )	変更前の詳細度レベル。PGSQL_ERRORS_TERSE、 PGSQL_ERRORS_DEFAULT あるいは PGSQL_ERRORS_VERBOSE のいずれかを 返します。
pg_trace	PostgreSQL 接続のトレースを有効にする	bool pg_trace ( string $pathname [, string $mode = "w" [, resource $connection ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pg_transaction_status	サーバー上で実行中のトランザクションの状態を返す	int pg_transaction_status ( resource $connection )	PGSQL_TRANSACTION_IDLE（アイドル状態）、 PGSQL_TRANSACTION_ACTIVE（コマンドの実行中）、 PGSQL_TRANSACTION_INTRANS（正常なトランザクション内でアイドル状態）、 あるいは PGSQL_TRANSACTION_INERROR（失敗したトランザクション内でアイドル状態） のいずれかを返します。 接続が異常な場合は PGSQL_TRANSACTION_UNKNOWN を返します。 PGSQL_TRANSACTION_ACTIVE が返されるのは、クエリを サーバーに送信した後まだそれが完了していない場合のみです。
pg_tty	接続に関する TTY 名を返す	string pg_tty ([ resource $connection ] )	connection のデバッグ TTY を文字列で返します。 エラー時には FALSE を返します。
pg_unescape_bytea	bytea 型のバイナリをアンエスケープする	string pg_unescape_bytea ( string $data )	アンエスケープされたデータを文字列で返します。
pg_untrace	PostgreSQL 接続のトレースを無効にする	bool pg_untrace ([ resource $connection ] )	Always returns TRUE.
pg_update	テーブルを更新する	mixed pg_update ( resource $connection , string $table_name , array $data , array $condition [, int $options = PGSQL_DML_EXEC ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 options に PGSQL_DML_STRING が渡された場合は文字列を返します。
pg_version	クライアント・プロトコル・サーバーのバージョンを配列で返す	array pg_version ([ resource $connection ] )	client, protocol および server のキーとその値を持つ配列を 返します（有効な場合）。エラー時や接続が正常でない場合に FALSE を返します。
php_check_syntax	指定したファイルの文法チェック（と実行）を行う	bool php_check_syntax ( string $filename [, string &$error_message ] )	文法チェックが成功した場合に TRUE 、チェックが失敗したり file_name がオープンできなかった場合に FALSE を返します。
php_ini_loaded_file	読み込まれた php.ini ファイルのパスを取得する	string php_ini_loaded_file ( void )	読み込まれている php.ini のパス、 あるいは読み込まれていない場合に FALSE を返します。
php_ini_scanned_files	追加の ini ディレクトリにある .ini ファイルのリストを取得する	string php_ini_scanned_files ( void )	成功すると、.iniファイルをカンマ区切りにした文字列が返されます。 --with-config-file-scan-dir がセットされていなければ、 FALSEを返します。指定されたディレクトリが空であれば、 空文字列が返されます。ファイルが認識できないものであれば、 そのファイルは文字列には含まれますが同時にPHPがエラーを起こします。 このエラーはコンパイルの時と、 php_ini_scanned_files() 関数を使用したときの両方で発生します。
php_logo_guid	ロゴの guid を取得する	string php_logo_guid ( void )	PHPE9568F34-D428-11d2-A769-00AA001ACF42 を返します。
php_sapi_name	ウェブサーバーと PHP の間のインターフェイスの型を返す	string php_sapi_name ( void )	インターフェイスの型を小文字の文字列で返します。
php_strip_whitespace	コメントと空白文字を取り除いたソースを返す	string php_strip_whitespace ( string $filename )	成功した場合に処理済みのソースコード、失敗した場合に空の文字列を返します。
php_uname	PHP が稼動しているオペレーティングシステムに関する情報を返す	string php_uname ([ string $mode = "a" ] )	説明を文字列で返します。
phpcredits	PHP に関するクレジットを出力する	bool phpcredits ([ int $flag = CREDITS_ALL ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
phpinfo	PHP の設定情報を出力する	bool phpinfo ([ int $what = INFO_ALL ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
phpversion	現在の PHP バージョンを取得する	string phpversion ([ string $extension ] )	オプションの extension パラメータが指定されている場合、 phpversion() はその拡張モジュールのバージョンを返します。 関連するバージョン情報が存在しない場合、 あるいは拡張モジュールが有効でない場合は FALSE を返します。
pi	円周率の値を得る	float pi ( void )	円周率の値を不動小数点数で返します。
png2wbmp	PNG イメージファイルから WBMP イメージファイルに変換する	bool png2wbmp ( string $pngname , string $wbmpname , int $dest_height , int $dest_width , int $threshold )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
popen	プロセスへのファイルポインタをオープンする	resource popen ( string $command , string $mode )	fopen() により返されたファイルポインタと同様のものを返しますが、 それは(読み書きのいずれか一方でのみ使われる)片方向ストリームであり、 pclose() によりクローズされなければならないところが異なります。 このポインタは、 fgets() 、 fgetss() および fwrite() のいずれかで使うことができます。 モードが 'r' のときは、返されるファイルポインタは そのコマンドの STDOUT と等しくなります。また、モードが 'w' のときは、返されるファイルポインタは そのコマンドの STDIN と等しくなります。
pos	current() のエイリアス
posix_access	ファイルのアクセス権限を判断する	bool posix_access ( string $file [, int $mode = POSIX_F_OK ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
posix_ctermid	制御する端末のパス名を得る	string posix_ctermid ( void )	処理に成功した場合は、現在制御している端末のパス名を表す文字列を返します。 それ以外の場合は FALSE を返し、errno を設定します。 この値を調べるには posix_get_last_error() を使用します。
posix_errno	posix_get_last_error() のエイリアス
posix_get_last_error	直近で失敗した posix 関数が設定したエラー番号を取得する	int posix_get_last_error ( void )	直近で失敗した posix 関数が設定した errno (エラー番号) を返します。 エラーが発生していない場合は 0 が返されます。
posix_getcwd	現在のディレクトリのパス名	string posix_getcwd ( void )	絶対パスを表す文字列を返します。 エラー時には FALSE を返し、errno を設定します。この値は posix_get_last_error() で取得することができます。
posix_getegid	現在のプロセスの有効なグループ ID を返す	int posix_getegid ( void )	実効グループ ID を表す整数値を返します。
posix_geteuid	現在のプロセスの有効なユーザー ID を返す	int posix_geteuid ( void )	ユーザー ID を表す整数値を返します。
posix_getgid	現在のプロセスの実際のグループ ID を返す	int posix_getgid ( void )	実際のグループ ID を表す整数値を返します。
posix_getgrgid	指定したグループ ID を有するグループに関する情報を返す	array posix_getgrgid ( int $gid )	以下の要素を持つ配列を返します。 グループ情報の配列 要素 説明 name グループ名。これは、16 文字以下の短い文字列からなる 「ハンドル」であり、実際の完全な名前とは異なります。 passwd グループのパスワードを暗号化したもの。 システムが「シャドー」パスワードを使用している場合は、 ここではアスタリスクが返されます。 gid グループ ID。この関数をコールする際に指定した gid と同じものになるので、冗長なデータです。 members このグループに属する全メンバーを表す文字列の配列。
posix_getgrnam	指定した名前のグループに関する情報を返す	array posix_getgrnam ( string $name )	以下の要素を持つ配列を返します。 グループ情報の配列 要素 説明 name グループ名。これは、16 文字以下の短い文字列からなる 「ハンドル」であり、実際の完全な名前とは異なります。 グループ ID。この関数をコールする際に指定した name と同じものになるので、冗長なデータです。 passwd グループのパスワードを暗号化したもの。 システムが「シャドー」パスワードを使用している場合は、 ここではアスタリスクが返されます。 gid グループ ID を表す数値。 members このグループに属する全メンバーを表す文字列の配列。
posix_getgroups	現在のプロセスのグループセットを返す	array posix_getgroups ( void )	現在のプロセスのグループセットについて、 グループ ID を表す整数値を含む配列を返します。
posix_getlogin	ログイン名を返す	string posix_getlogin ( void )	ユーザーのログイン名を文字列で返します。
posix_getpgid	ジョブ制御のプロセスグループ ID を得る	int posix_getpgid ( int $pid )	ID を表す整数値を返します。
posix_getpgrp	現在のプロセスのグループ ID を返す	int posix_getpgrp ( void )	ID を表す整数値を返します。
posix_getpid	現在のプロセス ID を返す	int posix_getpid ( void )	ID を表す整数値を返します。
posix_getppid	親プロセスの ID を返す	int posix_getppid ( void )	ID を表す整数値を返します。
posix_getpwnam	指定した名前のユーザーに関する情報を返す	array posix_getpwnam ( string $username )	成功した場合は次の要素を持つ配列、それ以外の場合は FALSE を返します。 ユーザー情報配列 要素 説明 name 要素 name はユーザー名を有しています。これは、通常、 実際の完全な名前ではなく16文字未満のユーザーの"ハンドル名"となります。 この値はこの関数をコールした際に使用したパラメータ usernameと同じとする必要があり、 このため冗長な定義となります。 passwd 要素passwd には暗号化されたユーザーのパスワードが含まれます。 シャドウパスワードを使用しているシステムでは、アスタリスクが代わりに 返されます。 uid 数値形式で表したユーザー ID。 gid ユーザーのグループ ID。 実際のグループ名を調べたりそのグループのメンバーの一覧を 得るには関数 posix_getgrgid() を使用してください。 gecos GECOS は旧式の項であり、Honeywell バッチ処理プログラムの finger 情報フィールドを参照します。 しかし、このフィールドはまだ生きており、その内容はPOSIXで 規定されています。 このフィールドには、カンマで区切られた ユーザーのフルネーム、オフィスの電話番号、家の電話番号に関する リストが含まれています。多くのシステムでは、ユーザーのフルネーム のみが利用可能です。 dir この要素には、ユーザーのホームディレクトリへの絶対パスが含まれています。 shell shell 要素には、ユーザーのデフォルトシェルの実行ファイルへの絶対パスが 含まれています。
posix_getpwuid	指定 ID のユーザーに関する情報を返す	array posix_getpwuid ( int $uid )	返される連想配列の要素は次のようになります。 ユーザー情報配列 要素 説明 name 要素 name はユーザー名を有しています。これは、通常、 実際の完全な名前ではなく16文字未満のユーザーの"ハンドル名"となります。 passwd 要素passwd には暗号化されたユーザーのパスワードが含まれます。 シャドウパスワードを使用しているシステムでは、アスタリスクが代わりに 返されます。 uid ユーザーID。これは、この関数をコールする際に使用するパラメータ uidと同じとなり、このため冗長になります。 gid ユーザーのグループID。 実際のグループ名を調べたりそのグループのメンバーの一覧を 得るには関数 posix_getgrgid() を使用してください。 gecos GECOS は旧式の項であり、Honeywell バッチ処理プログラムの finger 情報フィールドを参照します。 しかし、このフィールドはまだ生きており、その内容はPOSIXで 規定されています。 このフィールドには、カンマで区切られた ユーザーのフルネーム、オフィスの電話番号、家の電話番号に関する リストが含まれています。多くのシステムでは、ユーザーのフルネーム のみが利用可能です。 dir この要素には、ユーザーのホームディレクトリへの絶対パスが含まれています。 shell shell 要素には、ユーザーのデフォルトシェルの実行ファイルへの絶対パスが 含まれています。
posix_getrlimit	システムリソース制限に関する情報を返す	array posix_getrlimit ( void )	各リソースに関する制限値を含む連想配列を返します。 個々のリミット値には、ソフトリミットとハードリミットがあります。 返される制限の一覧 制限の名前 制限についての説明 core コアファイルの最大サイズ。0 の場合はコアファイルを作成しません。 コアファイルのサイズがこの値を超えると、 このサイズまで切り詰められます。 totalmem プロセスのメモリの最大サイズを表すバイト数。 virtualmem プロセスの仮想メモリの最大サイズを表すバイト数。 data プロセスのデータセグメントの最大サイズを表すバイト数。 stack プロセスのスタックの最大サイズを表すバイト数。 rss RAM 上の仮想ページの最大数。 maxproc 呼び出し元のプロセスの実ユーザー ID で作成できるプロセスの最大数。 memlock RAM 内にロックできるメモリの最大バイト数。 cpu そのプロセスが使用できる CPU 時間。 filesize そのプロセスが使用できるデータセグメントの最大サイズを表すバイト数。 openfiles オープンできるファイル記述子の最大値よりひとつ大きい値。
posix_getsid	プロセスの現在の sid を得る	int posix_getsid ( int $pid )	ID を表す整数値を返します。
posix_getuid	現在のプロセスの実際のユーザー ID を返す	int posix_getuid ( void )	ID を表す整数値を返します。
posix_initgroups	グループアクセスリストを求める	bool posix_initgroups ( string $name , int $base_group_id )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
posix_isatty	ファイル記述子が対話型端末であるかどうかを定義する	bool posix_isatty ( int $fd )	fd がオープンされており、 かつ端末に接続されている場合に TRUE、 それ以外の場合に FALSE を返します。
posix_kill	プロセスにシグナルを送信する	bool posix_kill ( int $pid , int $sig )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
posix_mkfifo	fifo スペシャルファイル(名前付きパイプ)を作成する	bool posix_mkfifo ( string $pathname , int $mode )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
posix_mknod	スペシャルファイルあるいは通常のファイルを作成する (POSIX.1)	bool posix_mknod ( string $pathname , int $mode [, int $major = 0 [, int $minor = 0 ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
posix_setegid	現在のプロセスの実効 GID を設定する	bool posix_setegid ( int $gid )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
posix_seteuid	現在のプロセスの実効 UID を設定する	bool posix_seteuid ( int $uid )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
posix_setgid	現在のプロセスの GID を設定する	bool posix_setgid ( int $gid )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
posix_setpgid	ジョブ制御のプロセスグループ ID を設定する	bool posix_setpgid ( int $pid , int $pgid )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
posix_setsid	現在のプロセスをセッションリーダーにする	int posix_setsid ( void )	セッション ID、あるいはエラー時に -1 を返します。
posix_setuid	現在のプロセスの UID を設定する	bool posix_setuid ( int $uid )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
posix_strerror	指定したエラー番号に対応するシステムのエラーメッセージを取得する	string posix_strerror ( int $errno )	エラーメッセージを表す文字列を返します。
posix_times	プロセス時間を得る	array posix_times ( void )	現在のプロセスの CPU 使用状況に関する情報を表す文字列を連想配列 として返します。連想配列のキーは次のようになります。 ticks - リブートからの経過クロック数。 utime - 現在のプロセスにより使用されているユーザー時間。 stime - 現在のプロセスにより使用されているシステム時間。 cutime - 現在のプロセスおよび子プロセスにより使用されているユーザー時間。 cstime - 現在のプロセスおよび子プロセスにより使用されているシステム時間。
posix_ttyname	端末のデバイス名を調べる	string posix_ttyname ( int $fd )	成功した場合に fd の絶対パスを表す文字列、 失敗した場合に FALSE を返します。
posix_uname	システム名を得る	array posix_uname ( void )	システムに関する情報を文字列の連想配列として返します。 連想配列のキーは、次のようになります。 sysname - オペレーティングシステムの名前 (例 Linux) nodename - システムの名前 (例 valiant) release - オペレーティングシステムのリリース (例 2.2.10) version - オペレーティングシステムのバージョン (例 #4 Tue Jul 20 17:01:36 MEST 1999) machine - システムアーキテクチャ (例 i586) domainname - DNS ドメイン名 (例 example.com)
pow	指数表現	number pow ( number $base , number $exp )	base の exp 乗を返します。 両方の引数が非負の整数で、かつ結果が integer 型の範囲に収まる場合は、結果を integer 型で返します。 それ以外の場合は結果を float 型で返します。
preg_filter	正規表現による検索と置換を行う	mixed preg_filter ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &$count ]] )	subject が配列の場合は配列を、それ以外の場合は文字列を返します。
preg_grep	パターンにマッチする配列の要素を返す	array preg_grep ( string $pattern , array $input [, int $flags = 0 ] )	input 配列のキーを使用した配列を返します。
preg_last_error	直近の PCRE 正規表現処理のエラーコードを返す	int preg_last_error ( void )	以下の定数のいずれかを返します (別のページで説明します)。 PREG_NO_ERROR PREG_INTERNAL_ERROR PREG_BACKTRACK_LIMIT_ERROR (pcre.backtrack_limit も参照ください) PREG_RECURSION_LIMIT_ERROR (pcre.recursion_limit も参照ください) PREG_BAD_UTF8_ERROR PREG_BAD_UTF8_OFFSET_ERROR (PHP 5.3.0 以降)
preg_match_all	繰り返し正規表現検索を行う	int preg_match_all ( string $pattern , string $subject [, array &$matches [, int $flags = PREG_PATTERN_ORDER [, int $offset = 0 ]]] )	パターンがマッチした総数を返します（ゼロとなる可能性もあります）。 または、エラーが発生した場合に FALSE を返します。
preg_match	正規表現によるマッチングを行う	int preg_match ( string $pattern , string $subject [, array &$matches [, int $flags = 0 [, int $offset = 0 ]]] )	preg_match() は、pattern が指定した subject にマッチした場合に 1 を返します。 マッチしなかった場合は 0、エラーが発生した場合は FALSE を返します。
preg_quote	正規表現文字をクオートする	string preg_quote ( string $str [, string $delimiter = NULL ] )	クォートされた (エスケープした) 文字列を返します。
preg_replace_callback	正規表現検索を行い、コールバック関数を使用して置換を行う	mixed preg_replace_callback ( mixed $pattern , callable $callback , mixed $subject [, int $limit = -1 [, int &$count ]] )	preg_replace_callback() は、 subject が配列の場合には配列を、 それ以外の場合は文字列を返します。 エラー時の返り値は NULL となります。
preg_replace	正規表現検索および置換を行う	mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &$count ]] )	preg_replace() は、 subject 引数が配列の場合は配列を、 その他の場合は文字列を返します。
preg_split	正規表現で文字列を分割する	array preg_split ( string $pattern , string $subject [, int $limit = -1 [, int $flags = 0 ]] )	pattern にマッチした境界で分割した subject の部分文字列の配列を返します。
prev	内部の配列ポインタをひとつ前に戻す	mixed prev ( array &$array )	内部の配列ポインタが指している前の場所の配列値を返します。 もう要素がない場合は FALSE を返します。
print_r	指定した変数に関する情報を解りやすく出力する	mixed print_r ( mixed $expression [, bool $return = false ] )	string 、integer , float を指定した場合はその値が出力されます。 array を指定した場合、キーと要素を表す形式で値が 表示されます。object に関しても同様の表示形式となります。
print	文字列を出力する	int print ( string $arg )	常に 1 を返します。
printer_abort	プリンタのスプールファイルを削除する	void printer_abort ( resource $printer_handle )	値を返しません。
printer_close	プリンタへの接続を閉じる	void printer_close ( resource $printer_handle )	値を返しません。
printer_create_brush	新規ブラシを作成する	resource printer_create_brush ( int $style , string $color )	ブラシのハンドル、あるいはエラー時に FALSE を返します。
printer_create_dc	新規デバイスコンテキストを作成する	void printer_create_dc ( resource $printer_handle )	値を返しません。
printer_create_font	新規フォントを作成する	resource printer_create_font ( string $face , int $height , int $width , int $font_weight , bool $italic , bool $underline , bool $strikeout , int $orientation )	成功した場合にフォントのハンドル、エラー時に FALSE を返します。
printer_create_pen	新規ペンを作成する	resource printer_create_pen ( int $style , int $width , string $color )	Returns a pen handle or FALSE on error.
printer_delete_brush	ブラシを削除する	void printer_delete_brush ( resource $brush_handle )	値を返しません。
printer_delete_dc	デバイスコンテキストを削除する	bool printer_delete_dc ( resource $printer_handle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
printer_delete_font	フォントを削除する	void printer_delete_font ( resource $font_handle )	値を返しません。
printer_delete_pen	ペンを削除する	void printer_delete_pen ( resource $pen_handle )	値を返しません。
printer_draw_bmp	ビットマップを描画する	bool printer_draw_bmp ( resource $printer_handle , string $filename , int $x , int $y [, int $width ], int $height )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
printer_draw_chord	弦を描画する	void printer_draw_chord ( resource $printer_handle , int $rec_x , int $rec_y , int $rec_x1 , int $rec_y1 , int $rad_x , int $rad_y , int $rad_x1 , int $rad_y1 )	値を返しません。
printer_draw_elipse	楕円を描画する	void printer_draw_elipse ( resource $printer_handle , int $ul_x , int $ul_y , int $lr_x , int $lr_y )	値を返しません。
printer_draw_line	線を描画する	void printer_draw_line ( resource $printer_handle , int $from_x , int $from_y , int $to_x , int $to_y )	値を返しません。
printer_draw_pie	円弧を描画する	void printer_draw_pie ( resource $printer_handle , int $rec_x , int $rec_y , int $rec_x1 , int $rec_y1 , int $rad1_x , int $rad1_y , int $rad2_x , int $rad2_y )	値を返しません。
printer_draw_rectangle	矩形を描画する	void printer_draw_rectangle ( resource $printer_handle , int $ul_x , int $ul_y , int $lr_x , int $lr_y )	値を返しません。
printer_draw_roundrect	角が丸い矩形を描画する	void printer_draw_roundrect ( resource $printer_handle , int $ul_x , int $ul_y , int $lr_x , int $lr_y , int $width , int $height )	値を返しません。
printer_draw_text	テキストを描画する	void printer_draw_text ( resource $printer_handle , string $text , int $x , int $y )	値を返しません。
printer_end_doc	ドキュメントを閉じる	bool printer_end_doc ( resource $printer_handle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
printer_end_page	アクティブなページを閉じる	bool printer_end_page ( resource $printer_handle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
printer_get_option	プリンタ設定データを取得する	mixed printer_get_option ( resource $printer_handle , string $option )	option の値を返します。
printer_list	サーバーに登録されたプリンタの配列を返す	array printer_list ( int $enumtype [, string $name [, int $level ]] )	プリンタの配列を返します。
printer_logical_fontheight	論理フォントの高さを取得する	int printer_logical_fontheight ( resource $printer_handle , int $height )	論理フォントの高さを返します。失敗した場合に FALSE を返します。
printer_open	プリンタへの接続をオープンする	resource printer_open ([ string $printername ] )	成功時にハンドルを返します。失敗した場合に FALSE を返します。
printer_select_brush	ブラシを選択する	void printer_select_brush ( resource $printer_handle , resource $brush_handle )	値を返しません。
printer_select_font	フォントを選択する	void printer_select_font ( resource $printer_handle , resource $font_handle )	値を返しません。
printer_select_pen	ペンを選択する	void printer_select_pen ( resource $printer_handle , resource $pen_handle )	値を返しません。
printer_set_option	プリンタの接続を設定する	bool printer_set_option ( resource $printer_handle , int $option , mixed $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
printer_start_doc	新規ドキュメントを開始する	bool printer_start_doc ( resource $printer_handle [, string $document ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
printer_start_page	新規ページを開始する	bool printer_start_page ( resource $printer_handle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
printer_write	プリンタへデータを書き込む	bool printer_write ( resource $printer_handle , string $content )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
printf	フォーマット済みの文字列を出力する	int printf ( string $format [, mixed $args [, mixed $... ]] )	出力した文字列の長さを返します。
proc_close	proc_open() で開かれたプロセスを閉じ、 そのプロセスの終了コードを返す	int proc_close ( resource $process )	実行していたプロセスの終了状態を返します。 エラーが発生した場合は -1 を返します。
proc_get_status	proc_open() で開かれたプロセスに関する情報を取得する	array proc_get_status ( resource $process )	成功時は集められた情報の配列 、失敗時は FALSE 。 返される配列は次のような要素を持ちます:
proc_nice	現在のプロセスの優先度を変更する	bool proc_nice ( int $increment )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 ユーザーが優先度を変更する権限を持っていないなど、 エラーが発生した場合は E_WARNING レベルのエラーも発行されます。
proc_open	コマンドを実行し、入出力用にファイルポインタを開く	resource proc_open ( string $cmd , array $descriptorspec , array &$pipes [, string $cwd [, array $env [, array $other_options ]]] )	プロセスを表すリソースを返します。このリソースは、使用し終えた際に proc_close() を使用して開放する必要があります。 失敗した場合は FALSE を返します。
proc_terminate	proc_open でオープンされたプロセスを強制終了する	bool proc_terminate ( resource $process [, int $signal = 15 ] )	実行していたプロセスの終了状態を返します。
property_exists	オブジェクトもしくはクラスにプロパティが存在するかどうかを調べる	bool property_exists ( mixed $class , string $property )	プロパティが存在している場合は TRUE、存在していない場合に FALSE、 エラー時には NULL を返します。
ps_add_bookmark	現在のページにブックマークを追加する	int ps_add_bookmark ( resource $psdoc , string $text [, int $parent = 0 [, int $open = 0 ]] )	返り値はブックマークへの参照です。この値は、作成したブックマークを 他のブックマークの親として使用する場合にのみ使われます。 成功した場合には、この値はゼロより大きくなります。 エラーが発生した場合にはゼロを返します。
ps_add_launchlink	ファイルを実行するためのリンクを追加する	bool ps_add_launchlink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_add_locallink	同一ドキュメント内のページへのリンクを追加する	bool ps_add_locallink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , int $page , string $dest )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_add_note	現在のページに注釈を追加する	bool ps_add_note ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_add_pdflink	別の PDF ドキュメントのページへのリンクを追加する	bool ps_add_pdflink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename , int $page , string $dest )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_add_weblink	Web 上の場所へのリンクを追加する	bool ps_add_weblink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $url )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_arc	反時計回りに円弧を描く	bool ps_arc ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_arcn	時計回りに円弧を描く	bool ps_arcn ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_begin_page	新しいページを開始する	bool ps_begin_page ( resource $psdoc , float $width , float $height )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_begin_pattern	新しいパターンを開始する	int ps_begin_pattern ( resource $psdoc , float $width , float $height , float $xstep , float $ystep , int $painttype )	パターンの ID を返します。失敗した場合に FALSE を返します。
ps_begin_template	新しいテンプレートを開始する	int ps_begin_template ( resource $psdoc , float $width , float $height )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_circle	円を描く	bool ps_circle ( resource $psdoc , float $x , float $y , float $radius )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_clip	現在のパスを描画範囲として指定する	bool ps_clip ( resource $psdoc )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_close_image	画像を閉じ、メモリを開放する	void ps_close_image ( resource $psdoc , int $imageid )	成功した場合に NULL を、失敗した場合に FALSE を返します。
ps_close	PostScript ドキュメントを閉じる	bool ps_close ( resource $psdoc )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_closepath_stroke	パスを閉じ、描画する	bool ps_closepath_stroke ( resource $psdoc )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_closepath	パスを閉じる	bool ps_closepath ( resource $psdoc )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_continue_text	次の行にテキストを続ける	bool ps_continue_text ( resource $psdoc , string $text )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_curveto	曲線を描く	bool ps_curveto ( resource $psdoc , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_delete	PostScript ドキュメントの全リソースを削除する	bool ps_delete ( resource $psdoc )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_end_page	ページを終了する	bool ps_end_page ( resource $psdoc )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_end_pattern	パターンを終了する	bool ps_end_pattern ( resource $psdoc )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_end_template	テンプレートを終了する	bool ps_end_template ( resource $psdoc )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_fill_stroke	現在のパスを塗りつぶし、線を引く	bool ps_fill_stroke ( resource $psdoc )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_fill	現在のパスを塗りつぶす	bool ps_fill ( resource $psdoc )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_findfont	フォントを読み込む	int ps_findfont ( resource $psdoc , string $fontname , string $encoding [, bool $embed = false ] )	成功した場合にフォントの ID を、失敗した場合にゼロを返します。 ID は正の数値です。
ps_get_buffer	生成された PS データを含むバッファの内容を取得する	string ps_get_buffer ( resource $psdoc )
ps_get_parameter	パラメータを取得する	string ps_get_parameter ( resource $psdoc , string $name [, float $modifier ] )	成功した場合にパラメータの値を、失敗した場合に FALSE を返します。
ps_get_value	値を取得する	float ps_get_value ( resource $psdoc , string $name [, float $modifier ] )	成功した場合にパラメータの値を、失敗した場合に FALSE を返します。
ps_hyphenate	単語をハイフネーションする	array ps_hyphenate ( resource $psdoc , string $text )	テキスト内で改行を入れられる位置を表す整数値の配列、 失敗した場合に FALSE を返します。
ps_include_file	外部ファイルを生の PostScript コードとして読み込む	bool ps_include_file ( resource $psdoc , string $file )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_lineto	直線を描く	bool ps_lineto ( resource $psdoc , float $x , float $y )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_makespotcolor	スポット色を作成する	int ps_makespotcolor ( resource $psdoc , string $name [, int $reserved = 0 ] )	成功した場合にスポット色の ID を、失敗した場合にゼロを返します。
ps_moveto	現在位置を設定する	bool ps_moveto ( resource $psdoc , float $x , float $y )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_new	新しい PostScript ドキュメントオブジェクトを作成する	resource ps_new ( void )	成功した場合に PostScript ドキュメントのリソースを、 失敗した場合に FALSE を返します。 この返り値は、その他のすべての関数の最初の引数として渡されます。
ps_open_file	出力用のファイルを開く	bool ps_open_file ( resource $psdoc [, string $filename ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_open_image_file	ファイルから画像を開く	int ps_open_image_file ( resource $psdoc , string $type , string $filename [, string $stringparam [, int $intparam = 0 ]] )	成功した場合に画像の ID を、失敗した場合にゼロを返します。 ID は、0 より大きい正の数値です。
ps_open_image	後で配置するために画像を読み込む	int ps_open_image ( resource $psdoc , string $type , string $source , string $data , int $lenght , int $width , int $height , int $components , int $bpc , string $params )	成功した場合に画像の ID を、失敗した場合にゼロを返します。 ID は、0 より大きい正の数値です。
ps_open_memory_image	GD 画像を受け取り、PS ドキュメントにはめ込む画像を返す	int ps_open_memory_image ( resource $psdoc , int $gd )
ps_place_image	画像をページに配置する	bool ps_place_image ( resource $psdoc , int $imageid , float $x , float $y , float $scale )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_rect	矩形を描く	bool ps_rect ( resource $psdoc , float $x , float $y , float $width , float $height )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_restore	以前に保存されたコンテキストを復元する	bool ps_restore ( resource $psdoc )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_rotate	回転の程度を設定する	bool ps_rotate ( resource $psdoc , float $rot )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_save	現在のコンテキストを保存する	bool ps_save ( resource $psdoc )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_scale	縮尺を設定する	bool ps_scale ( resource $psdoc , float $x , float $y )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_set_border_color	注記の枠線の色を設定する	bool ps_set_border_color ( resource $psdoc , float $red , float $green , float $blue )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_set_border_dash	注記の枠線の、破線の状態を設定する	bool ps_set_border_dash ( resource $psdoc , float $black , float $white )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_set_border_style	注記の枠線の形式を設定する	bool ps_set_border_style ( resource $psdoc , string $style , float $width )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_set_info	ドキュメントの情報を設定する	bool ps_set_info ( resource $p , string $key , string $val )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_set_parameter	パラメータを設定する	bool ps_set_parameter ( resource $psdoc , string $name , string $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_set_text_pos	テキストの出力位置を設定する	bool ps_set_text_pos ( resource $psdoc , float $x , float $y )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_set_value	値を設定する	bool ps_set_value ( resource $psdoc , string $name , float $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_setcolor	色を設定する	bool ps_setcolor ( resource $psdoc , string $type , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4 )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_setdash	破線の形状を設定する	bool ps_setdash ( resource $psdoc , float $on , float $off )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_setflat	平面度を設定する	bool ps_setflat ( resource $psdoc , float $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_setfont	以降の出力で用いるフォントを設定する	bool ps_setfont ( resource $psdoc , int $fontid , float $size )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_setgray	グレー値を設定する	bool ps_setgray ( resource $psdoc , float $gray )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_setlinecap	線端の形状を設定する	bool ps_setlinecap ( resource $psdoc , int $type )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_setlinejoin	線の連結方法を設定する	bool ps_setlinejoin ( resource $psdoc , int $type )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_setlinewidth	線幅を設定する	bool ps_setlinewidth ( resource $psdoc , float $width )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_setmiterlimit	miter limit 値を設定する	bool ps_setmiterlimit ( resource $psdoc , float $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_setoverprintmode	overprint モードを設定する	bool ps_setoverprintmode ( resource $psdoc , int $mode )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_setpolydash	破線の形状を設定する	bool ps_setpolydash ( resource $psdoc , float $arr )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_shading_pattern	シェーディング用のパターンを作成する	int ps_shading_pattern ( resource $psdoc , int $shadingid , string $optlist )	成功した場合にパターンの ID を、失敗した場合に FALSE を返します。
ps_shading	以降の出力で用いるシェーディングを作成する	int ps_shading ( resource $psdoc , string $type , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist )	成功した場合にパターンの ID を、失敗した場合に FALSE を返します。
ps_shfill	範囲をシェーディングで塗りつぶす	bool ps_shfill ( resource $psdoc , int $shadingid )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_show_boxed	テキストをボックス内に出力する	int ps_show_boxed ( resource $psdoc , string $text , float $left , float $bottom , float $width , float $height , string $hmode [, string $feature ] )	書くことができなかった文字数を返します。
ps_show_xy	指定された位置にテキストを出力する	bool ps_show_xy ( resource $psdoc , string $text , float $x , float $y )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_show_xy2	テキストを指定した位置に出力する	bool ps_show_xy2 ( resource $psdoc , string $text , int $len , float $xcoor , float $ycoor )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_show	テキストを出力する	bool ps_show ( resource $psdoc , string $text )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_show2	テキストを現在の位置に出力する	bool ps_show2 ( resource $psdoc , string $text , int $len )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_string_geometry	文字列のジオメトリを取得する	array ps_string_geometry ( resource $psdoc , string $text [, int $fontid = 0 [, float $size = 0.0 ]] )	文字の寸法を格納した配列です。'width' には ps_stringwidth() で返される文字列の幅が入ります。 下に突き出している部分の長さの最大値が 'descender' に、 また上に突き出している部分の長さの最大値が 'ascender' に入ります。
ps_stringwidth	文字列の幅を取得する	float ps_stringwidth ( resource $psdoc , string $text [, int $fontid = 0 [, float $size = 0.0 ]] )	文字列の幅をポイント数で返します。
ps_stroke	現在のパスを描画する	bool ps_stroke ( resource $psdoc )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_symbol_name	グリフ名を取得する	string ps_symbol_name ( resource $psdoc , int $ord [, int $fontid = 0 ] )	指定されたフォントのグリフ名を返します。
ps_symbol_width	グリフの幅を取得する	float ps_symbol_width ( resource $psdoc , int $ord [, int $fontid = 0 [, float $size = 0.0 ]] )	グリフの幅をポイント数で返します。
ps_symbol	グリフを出力する	bool ps_symbol ( resource $psdoc , int $ord )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ps_translate	座標変換を設定する	bool ps_translate ( resource $psdoc , float $x , float $y )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pspell_add_to_personal	ユーザーの単語リストに単語を追加する	bool pspell_add_to_personal ( int $dictionary_link , string $word )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pspell_add_to_session	現在のセッションの単語リストに単語を追加する	bool pspell_add_to_session ( int $dictionary_link , string $word )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pspell_check	単語をチェックする	bool pspell_check ( int $dictionary_link , string $word )	スペルが正しい場合に TRUE、そうでない場合に FALSE を返します。
pspell_clear_session	現在のセッションをクリアする	bool pspell_clear_session ( int $dictionary_link )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pspell_config_create	辞書をオープンする際に使用する設定を作成する	int pspell_config_create ( string $language [, string $spelling [, string $jargon [, string $encoding ]]] )	pspell 設定 ID、あるいはエラー時に FALSE を返します。
pspell_config_data_dir	言語データファイルの場所	bool pspell_config_data_dir ( int $conf , string $directory )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pspell_config_dict_dir	メイン単語リストの場所	bool pspell_config_dict_dir ( int $conf , string $directory )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pspell_config_ignore	長さが N 文字未満の単語を無視する	bool pspell_config_ignore ( int $dictionary_link , int $n )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pspell_config_mode	返される提案の数のモードを変更する	bool pspell_config_mode ( int $dictionary_link , int $mode )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pspell_config_personal	個人の単語リストを保持するファイルを設定する	bool pspell_config_personal ( int $dictionary_link , string $file )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pspell_config_repl	置換候補を保持するファイルを設定する	bool pspell_config_repl ( int $dictionary_link , string $file )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pspell_config_runtogether	複合語を有効な単語の組み合わせとして考慮する	bool pspell_config_runtogether ( int $dictionary_link , bool $flag )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pspell_config_save_repl	単語リストと共に置換リストを保存するかどうかを定義する	bool pspell_config_save_repl ( int $dictionary_link , bool $flag )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pspell_new_config	指定した設定に基づき新規辞書をロードする	int pspell_new_config ( int $config )	成功した場合に辞書リンク ID を返します。
pspell_new_personal	個人の単語リストを有する新規辞書をロードする	int pspell_new_personal ( string $personal , string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0 ]]]] )	その他の pspell 関数で使用する辞書リンク ID を返します。
pspell_new	新規辞書をロードする	int pspell_new ( string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode = 0 ]]]] )	成功した場合にディレクトリリンク識別子、失敗した場合に FALSE を返します。
pspell_save_wordlist	個人の単語リストをファイルに保存する	bool pspell_save_wordlist ( int $dictionary_link )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pspell_store_replacement	単語を置換する組を保存する	bool pspell_store_replacement ( int $dictionary_link , string $misspelled , string $correct )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
pspell_suggest	単語のスペルについて修正候補を示す	array pspell_suggest ( int $dictionary_link , string $word )	修正候補の配列を返します。
putenv	環境変数の値を設定する	bool putenv ( string $setting )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
px_close	paradox データベースを閉じる	bool px_close ( resource $pxdoc )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
px_create_fp	新しい paradox データベースを作成する	bool px_create_fp ( resource $pxdoc , resource $file , array $fielddesc )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
px_date2string	日付を文字列に変換する	string px_date2string ( resource $pxdoc , int $value , string $format )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
px_delete_record	paradox データベースからレコードを削除する	bool px_delete_record ( resource $pxdoc , int $num )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
px_delete	paradox データベースのリソースを削除する	bool px_delete ( resource $pxdoc )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
px_get_field	単一のフィールドの仕様を返す	array px_get_field ( resource $pxdoc , int $fieldno )	fieldno 番目のデータベースフィールドの仕様を、 連想配列で返します。 name、type および size という 3 つのフィールドが含まれます。
px_get_info	paradox ファイルに関する多くの情報を返す	array px_get_info ( resource $pxdoc )	paradox ファイルに関する多くの情報を含む連想配列を返します。 この配列は、将来的にさらに拡張される予定です。
px_get_parameter	パラメータを取得する	string px_get_parameter ( resource $pxdoc , string $name )	パラメータの値、失敗した場合に FALSE を返します。
px_get_record	paradox データベースのレコードを返す	array px_get_record ( resource $pxdoc , int $num [, int $mode = 0 ] )	paradox データベースから、num 番目のレコードを返します。 レコードは連想配列形式で返され、フィールド名がキーとなります。
px_get_schema	データベーススキーマを返す	array px_get_schema ( resource $pxdoc [, int $mode = 0 ] )	データベースファイルのスキーマを連想配列で返します。 キーの名前はフィールド名と等しくなります。 配列の各要素もまた連想配列となっており、2 つのフィールド type および size が含まれます。type は、 フィールド型の定数 の中のいずれかです。 size は、レコード内でこのフィールドが使用するバイト数です。 すべてのフィールドのサイズを合計したものが、 px-get-info() で得られるレコードサイズと等しくなります。
px_get_value	値を取得する	float px_get_value ( resource $pxdoc , string $name )	パラメータの値、失敗した場合に FALSE を返します。
px_insert_record	paradox データベースにレコードを挿入する	int px_insert_record ( resource $pxdoc , array $data )	失敗した場合には FALSE、成功した場合にはレコード数を返します。
px_new	新しい paradox オブジェクトを作成する	resource px_new ( void )	失敗した場合は FALSE を返します。
px_numfields	データベース内のフィールドの数を返す	int px_numfields ( resource $pxdoc )	データベースファイル内のフィールドの数を返します。この関数の返す値は、 px_get_info() が返す配列における要素 numfields の値と等しくなります。
px_numrecords	データベース内のレコードの数を返す	int px_numrecords ( resource $pxdoc )	データベースファイル内のレコードの数を返します。この関数の返す値は、 px_get_info() が返す配列における要素 numrecords の値と等しくなります。
px_open_fp	paradox データベースをオープンする	bool px_open_fp ( resource $pxdoc , resource $file )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
px_put_record	paradox データベースにレコードを保存する	bool px_put_record ( resource $pxdoc , array $record [, int $recpos = -1 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
px_retrieve_record	paradox データベースのレコードを返す	array px_retrieve_record ( resource $pxdoc , int $num [, int $mode = 0 ] )	paradox データベースから、num 番目のレコードを返します。 レコードは連想配列形式で返され、フィールド名がキーとなります。
px_set_blob_file	blob を読み込むファイル名を設定する	bool px_set_blob_file ( resource $pxdoc , string $filename )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
px_set_parameter	パラメータを設定する	bool px_set_parameter ( resource $pxdoc , string $name , string $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
px_set_tablename	テーブルの名前を設定する (非推奨)	void px_set_tablename ( resource $pxdoc , string $name )	成功した場合に NULL、失敗した場合に FALSE を返します。
px_set_targetencoding	文字フィールドのエンコーディングを設定する (非推奨)	bool px_set_targetencoding ( resource $pxdoc , string $encoding )	エンコーディングが設定されていない場合は FALSE を返します。 これは、例えば未知のエンコーディングが設定されていたり、 pxlib がコード変換をサポートしていない場合にも起こります。 後者の場合は警告が発生します。
px_set_value	値を設定する	bool px_set_value ( resource $pxdoc , string $name , float $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
px_timestamp2string	タイムスタンプを文字列に変換する	string px_timestamp2string ( resource $pxdoc , float $value , string $format )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
px_update_record	paradox データベースのレコードを更新する	bool px_update_record ( resource $pxdoc , array $data , int $num )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
qdom_error	直近の QDOM 操作からのエラー文字列、 またはエラーが発生しなかった場合に FALSE を返す	string qdom_error ( void )
qdom_tree	XML 文字列のツリーを作成する	QDomDocument qdom_tree ( string $doc )
quoted_printable_decode	quoted-printable 文字列を 8 ビット文字列に変換する	string quoted_printable_decode ( string $str )	8 ビットバイナリ文字列を返します。
quoted_printable_encode	8 ビット文字列を quoted-printable 文字列に変換する	string quoted_printable_encode ( string $str )	エンコードされた文字列を返します。
quotemeta	メタ文字をクォートする	string quotemeta ( string $str )	メタ文字をクォートした文字列を返します。 空文字を str に渡した場合は FALSE を返します。
rad2deg	ラジアン単位の数値を度単位に変換する	float rad2deg ( float $number )	number と同等な値を度で表したものを返します。
radius_acct_open	課金用の Radius ハンドルを作成する	resource radius_acct_open ( void )	成功した場合にハンドル、エラー時に FALSE を返します。 この関数が失敗するのは、無効なメモリを使用した場合のみです。
radius_add_server	サーバーを追加する	bool radius_add_server ( resource $radius_handle , string $hostname , int $port , string $secret , int $timeout , int $max_tries )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
radius_auth_open	認証用の Radius ハンドルを作成する	resource radius_auth_open ( void )	成功した場合にハンドル、エラー時に FALSE を返します。 この関数が失敗するのは、無効なメモリを使用した場合のみです。
radius_close	すべてのリソースを開放する	bool radius_close ( resource $radius_handle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
radius_config	指定した設定ファイルをライブラリに読み込ませる	bool radius_config ( resource $radius_handle , string $file )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
radius_create_request	課金あるいは認証のリクエストを作成する	bool radius_create_request ( resource $radius_handle , int $type )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
radius_cvt_addr	生データを IP アドレスに変換する	string radius_cvt_addr ( string $data )
radius_cvt_int	生データを整数に変換する	int radius_cvt_int ( string $data )
radius_cvt_string	生データを文字列に変換する	string radius_cvt_string ( string $data )
radius_demangle_mppe_key	変形されたデータから mppe キーを得る	string radius_demangle_mppe_key ( resource $radius_handle , string $mangled )	復元したデータ、あるいはエラー時には FALSE を返します。
radius_demangle	データを復元する	string radius_demangle ( resource $radius_handle , string $mangled )	復元した文字列、あるいはエラー時には FALSE を返します。
radius_get_attr	属性を取得する	mixed radius_get_attr ( resource $radius_handle )	属性の型とデータを含む連想配列、あるいは 0 以上の エラー番号を返します。
radius_get_tagged_attr_data	Extracts the data from a tagged attribute	string radius_get_tagged_attr_data ( string $data )	Returns the data from the tagged attribute 失敗した場合に FALSE を返します.
radius_get_tagged_attr_tag	Extracts the tag from a tagged attribute	integer radius_get_tagged_attr_tag ( string $data )	Returns the tag from the tagged attribute 失敗した場合に FALSE を返します.
radius_get_vendor_attr	ベンダ固有の属性を取得する	array radius_get_vendor_attr ( string $data )	属性の型、ベンダおよびデータを含む連想配列か、エラー時には FALSE を返します。
radius_put_addr	IP アドレス属性を設定する	bool radius_put_addr ( resource $radius_handle , int $type , string $addr [, int $options = 0 [, int $tag ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
radius_put_attr	バイナリ属性を設定する	bool radius_put_attr ( resource $radius_handle , int $type , string $value [, int $options = 0 [, int $tag ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
radius_put_int	整数属性を設定する	bool radius_put_int ( resource $radius_handle , int $type , int $value [, int $options = 0 [, int $tag ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
radius_put_string	文字列属性を設定する	bool radius_put_string ( resource $radius_handle , int $type , string $value [, int $options = 0 [, int $tag ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
radius_put_vendor_addr	ベンダー固有の IP アドレス属性を設定する	bool radius_put_vendor_addr ( resource $radius_handle , int $vendor , int $type , string $addr )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
radius_put_vendor_attr	ベンダー固有のバイナリ属性を設定する	bool radius_put_vendor_attr ( resource $radius_handle , int $vendor , int $type , string $value [, int $options = 0 [, int $tag ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
radius_put_vendor_int	ベンダー固有の整数属性を設定する	bool radius_put_vendor_int ( resource $radius_handle , int $vendor , int $type , int $value [, int $options = 0 [, int $tag ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
radius_put_vendor_string	ベンダー固有の文字列属性を設定する	bool radius_put_vendor_string ( resource $radius_handle , int $vendor , int $type , string $value [, int $options = 0 [, int $tag ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
radius_request_authenticator	リクエスト認証子を返す	string radius_request_authenticator ( resource $radius_handle )	リクエスト認証子を文字列で返します。エラー時には FALSE を返します。
radius_salt_encrypt_attr	Salt-encrypts a value	string radius_salt_encrypt_attr ( resource $radius_handle , string $data )	Returns the salt-encrypted data 失敗した場合に FALSE を返します.
radius_send_request	リクエストを送信し、応答を待つ	int radius_send_request ( resource $radius_handle )	有効な応答を受信したら、 radius_send_request() は応答の型を示す Radius コードを返します。一般的なコードは RADIUS_ACCESS_ACCEPT、 RADIUS_ACCESS_REJECT あるいは RADIUS_ACCESS_CHALLENGE です。 有効な応答を受信できなかった場合は、 radius_send_request() は FALSE を返します。
radius_server_secret	共有秘密鍵を返す	string radius_server_secret ( resource $radius_handle )	サーバーの共有秘密鍵を文字列で返します。エラー時には FALSE を返します。
radius_strerror	エラーメッセージを返す	string radius_strerror ( resource $radius_handle )	失敗した radius 関数からのエラーメッセージを文字列で返します。
rand	乱数を生成する	int rand ( void )	min (あるいは 0) から max (あるいは getrandmax() 、それぞれ端点を含む) までの間の疑似乱数値を返します。
range	ある範囲の整数を有する配列を作成する	array range ( mixed $start , mixed $end [, number $step = 1 ] )	start から end までの整数の配列を返します。
rar_wrapper_cache_stats	URL ラッパーのキャッシュのヒット数	string rar_wrapper_cache_stats ( void )
rawurldecode	URL エンコードされた文字列をデコードする	string rawurldecode ( string $str )	デコードされた URL を文字列で返します。
rawurlencode	RFC 3986 に基づき URL エンコードを行う	string rawurlencode ( string $str )	-_.~ を除くすべての非アルファベット文字をパーセント 記号 (%)に続いて 2 つの 16 進数がある表現形式に 置き換えた文字列を返します。これは、文字定数が特殊な URL デリミタと して解釈されたり、URL デリミタが(いくつかの電子メールシステムのような) 転送メディアにより文字変換されて失われてしまったりすることが ないように、&raquo;&nbsp;RFC 3986 で定められたエンコーディング方法です。 注意: PHP 5.3.0 より前のバージョンでは、rawurlencode はチルダ (~) もエンコードしていました。これは &raquo;&nbsp;RFC 1738 で定められた方法です。
read_exif_data	exif_read_data() のエイリアス
readdir	ディレクトリハンドルからエントリを読み込む	string readdir ([ resource $dir_handle ] )	成功した場合にエントリ名、失敗した場合に FALSE を返します。
readfile	ファイルを出力する	int readfile ( string $filename [, bool $use_include_path = false [, resource $context ]] )	ファイルから読み込んだバイト数を返します。エラーが起こると FALSEを返し、また@ readfile() という名前でコールされない限り、 エラーメッセージが表示されます。
readgzfile	gz ファイルを出力する	int readgzfile ( string $filename [, int $use_include_path = 0 ] )	ファイルから読み込んだ (解凍された) データのバイト数を返します。 エラーが発生した場合、FALSE が返され、@readgzfile としてコールされている場合を除き、エラーメッセージが出力されます。
readline_add_history	ヒストリに 1 行追加する	bool readline_add_history ( string $line )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
readline_callback_handler_install	readline コールバックインターフェイスと端末を初期化し、 プロンプトを表示して結果をすぐに返す	bool readline_callback_handler_install ( string $prompt , callable $callback )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
readline_callback_handler_remove	インストールされたハンドラを削除し、端末の設定をもとに戻す	bool readline_callback_handler_remove ( void )	インストールされたコールバックが削除できた場合に TRUE、 削除するハンドラが見つからなかった場合に FALSE を返します。
readline_callback_read_char	文字を読み込み、改行を受け取ると readline コールバックインターフェイスに通知する	void readline_callback_read_char ( void )	値を返しません。
readline_clear_history	ヒストリをクリアする	bool readline_clear_history ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
readline_completion_function	補完関数を登録する	bool readline_completion_function ( callable $function )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
readline_info	種々の readline の内部変数を取得/設定する	mixed readline_info ([ string $varname [, string $newvalue ]] )	パラメータを指定しないでコールした場合、この関数は readline が使用する すべての設定の値を配列で返します。要素の添字は次のようになります。 done, end, erase_empty_line, library_version, line_buffer, mark, pending_input, point, prompt, readline_name, terminal_name
readline_list_history	ヒストリを一覧表示する	array readline_list_history ( void )	コマンドラインヒストリ全体の配列を返します。 各要素にはゼロから始まる整数の添字が付加されています。
readline_on_new_line	カーソルが新しい行に移動したことを readline に通知する	void readline_on_new_line ( void )	値を返しません。
readline_read_history	ヒストリを読み込む	bool readline_read_history ([ string $filename ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
readline_redisplay	画面を再描画する	void readline_redisplay ( void )	値を返しません。
readline_write_history	ヒストリを書きこむ	bool readline_write_history ([ string $filename ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
readline	一行読み込む	string readline ([ string $prompt ] )	ユーザーから取得した文字列を一つだけ返します。 返り値の最後の改行は取り除かれます。
readlink	シンボリックリンク先を返す	string readlink ( string $path )	シンボリックリンク・パスの内容を返します。エラーの場合は FALSE を返します。
realpath_cache_get	realpath キャッシュ・エントリーを取得	array realpath_cache_get ( void )	realpath キャッシュ・エントリーの配列を返します。キーは元のパス・エントリーで、 値はデータ項目の配列です。それには、解決されたパス、失効日、キャッシュに保持されるその他のオプションを含みます。
realpath_cache_size	realpath キャッシュサイズを取得	int realpath_cache_size ( void )	realpath キャッシュが使用中のメモリ量を返します。
realpath	絶対パス名を返す	string realpath ( string $path )	成功した場合は正規化した絶対パス名を返します。 返されるパスはシンボリックリンクや「/./」「/../」要素を含みません。
recode_file	コード変換指令に基づきファイルからファイルにコード変換する	bool recode_file ( string $request , resource $input , resource $output )	応じることができない場合に FALSE、それ以外の場合に TRUE を返します。
recode_string	コード変換指令に基づき文字列のコードを変換する	string recode_string ( string $request , string $string )	変換後の文字列、または変換指令を実行できない場合に FALSE を返します。
recode	recode_string() のエイリアス
register_shutdown_function	シャットダウン時に実行する関数を登録する	void register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $... ]] )	値を返しません。
register_tick_function	各 tick で実行する関数を登録する	bool register_tick_function ( callable $function [, mixed $arg [, mixed $... ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
rename_function	グローバルの関数テーブルで関数名を変更する	bool rename_function ( string $original_name , string $new_name )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
rename	ファイルをリネームする	bool rename ( string $oldname , string $newname [, resource $context ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
reset	配列の内部ポインタを先頭の要素にセットする	mixed reset ( array &$array )	配列の最初の要素の値を返します。 配列が空の場合 FALSE を返します。
restore_error_handler	以前のエラーハンドラ関数を回復する	bool restore_error_handler ( void )	この関数は常に TRUE を返します。
restore_exception_handler	以前の例外ハンドラ関数を回復する	bool restore_exception_handler ( void )	この関数は常に TRUE を返します。
restore_include_path	include_path 設定オプションの値を元に戻す	void restore_include_path ( void )	値を返しません。
rewind	ファイルポインタの位置を先頭に戻す	bool rewind ( resource $handle )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
rewinddir	ディレクトリハンドルを元に戻す	void rewinddir ([ resource $dir_handle ] )
rmdir	ディレクトリを削除する	bool rmdir ( string $dirname [, resource $context ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
round	浮動小数点数を丸める	float round ( float $val [, int $precision = 0 [, int $mode = PHP_ROUND_HALF_UP ]] )	丸めた値を返します。
rpm_close	RPM ファイルを閉じる	bool rpm_close ( resource $rpmr )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
rpm_get_tag	RPM ファイルからヘッダタグを取得する	mixed rpm_get_tag ( resource $rpmr , int $tagnum )	関数に渡した tagnum の値により、 返り値の型はいろいろな形式になりえます。
rpm_is_valid	filename が RPM ファイルであるかどうかを確かめる	bool rpm_is_valid ( string $filename )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
rpm_open	RPM ファイルをオープンする	resource rpm_open ( string $filename )	オープンに成功すると、 rpm_open() は オープンしたファイルのファイルポインタリソースを返します。 エラー時にはこの関数は FALSE を返します。
rpm_version	rpmreader 拡張モジュールの現在のバージョンを表す文字列を返す	string rpm_version ( void )	rpm_version() は、現在 PHP に読み込まれている rpmreader のバージョンを表す文字列を返します。
rrd_create	Creates rrd database file	bool rrd_create ( string $filename , array $options )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
rrd_error	Gets latest error message.	string rrd_error ( void )	Latest error message.
rrd_fetch	Fetch the data for graph as array.	array rrd_fetch ( string $filename , array $options )	Returns information about retrieved graph data.
rrd_first	Gets the timestamp of the first sample from rrd file.	int rrd_first ( string $file [, int $raaindex = 0 ] )	Integer number of unix timestamp, FALSE if some error occurs.
rrd_graph	Creates image from a data.	array rrd_graph ( string $filename , array $options )	Array with information about generated image is returned, FALSE when error occurs.
rrd_info	Gets information about rrd file	array rrd_info ( string $filename )	Array with information about requsted RRD file, FALSE when error occurs.
rrd_last	Gets unix timestamp of the last sample.	int rrd_last ( string $filename )	Integer as unix timestamp of the most recent data from the RRD database.
rrd_lastupdate	Gets information about last updated data.	array rrd_lastupdate ( string $filename )	Array of information about last update, FALSE when error occurs.
rrd_restore	Restores the RRD file from XML dump.	bool rrd_restore ( string $xml_file , string $rrd_file [, array $options ] )	Returns TRUE on success, FALSE otherwise.
rrd_tune	Tunes some RRD database file header options.	bool rrd_tune ( string $filename , array $options )	Returns TRUE on success, FALSE otherwise.
rrd_update	Updates the RRD database.	bool rrd_update ( string $filename , array $options )	Returns TRUE on success, FALSE when error occurs.
rrd_version	Gets information about underlying rrdtool library	string rrd_version ( void )	String with rrdtool version number e.g. "1.4.3".
rrd_xport	Exports the information about RRD database.	array rrd_xport ( array $options )	Array with information about RRD database file, FALSE when error occurs.
rsort	配列を逆順にソートする	bool rsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
rtrim	文字列の最後から空白 (もしくはその他の文字) を取り除く	string rtrim ( string $str [, string $charlist ] )	変更後の文字列を返します。
runkit_class_adopt	ある基底クラスを、他のクラスを継承させたクラスに変換する。親クラスの適切なメソッドを追加する	bool runkit_class_adopt ( string $classname , string $parentname )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_class_emancipate	他のクラスを継承しているクラスから継承関係を解消し、 親クラスから継承しているメソッドを取り除く	bool runkit_class_emancipate ( string $classname )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_constant_add	define() と同じだが、クラス定数も指定可能	bool runkit_constant_add ( string $constname , mixed $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_constant_redefine	定義済みの定数を再定義する	bool runkit_constant_redefine ( string $constname , mixed $newvalue )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_constant_remove	定義済みの定数を削除する	bool runkit_constant_remove ( string $constname )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_function_add	新しい関数を追加する。 create_function() と同じ	bool runkit_function_add ( string $funcname , string $arglist , string $code )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_function_copy	関数を別の名前でコピーする	bool runkit_function_copy ( string $funcname , string $targetname )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_function_redefine	関数の定義を新しい実装で置き換える	bool runkit_function_redefine ( string $funcname , string $arglist , string $code )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_function_remove	関数の定義を削除する	bool runkit_function_remove ( string $funcname )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_function_rename	関数名を変更する	bool runkit_function_rename ( string $funcname , string $newname )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_import	ファイルから関数やクラスの定義を読み込み、必要に応じて書き換える	bool runkit_import ( string $filename [, int $flags = RUNKIT_IMPORT_CLASS_METHODS ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_lint_file	指定したファイルの PHP 文法をチェックする	bool runkit_lint_file ( string $filename )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_lint	指定した PHP コードの文法をチェックする	bool runkit_lint ( string $code )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_method_add	指定したクラスに、新しいメソッドを動的に追加する	bool runkit_method_add ( string $classname , string $methodname , string $args , string $code [, int $flags = RUNKIT_ACC_PUBLIC ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_method_copy	あるクラスのメソッドを別のクラスにコピーする	bool runkit_method_copy ( string $dClass , string $dMethod , string $sClass [, string $sMethod ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_method_redefine	指定されたメソッドのコードを動的に変更する	bool runkit_method_redefine ( string $classname , string $methodname , string $args , string $code [, int $flags = RUNKIT_ACC_PUBLIC ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_method_remove	指定したメソッドを動的に削除する	bool runkit_method_remove ( string $classname , string $methodname )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_method_rename	指定したメソッドの名前を動的に変更する	bool runkit_method_rename ( string $classname , string $methodname , string $newname )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
runkit_return_value_used	現在の関数の返り値が使用されているかどうかを調べる	bool runkit_return_value_used ( void )	呼び出し元のスコープで関数の返り値が使用されている場合に TRUE、 それ以外の場合に FALSE を返します。
runkit_sandbox_output_handler	サンドボックス内での出力を取得・処理するための関数を指定する	mixed runkit_sandbox_output_handler ( object $sandbox [, mixed $callback ] )	前に定義されていた出力ハンドラコールバックの名前を返します。 ハンドラが定義されていなかった場合は FALSE を返します。
runkit_superglobals	登録されているスーパーグローバルを、数値添字の配列で返す	array runkit_superglobals ( void )	登録されているスーパーグローバルを、数値添字の配列で返します。 スーパーグローバルとは、例えば _GET、_POST、_REQUEST、_COOKIE、_SESSION、_SERVER、_ENV、_FILES などです。
scandir	指定されたパスのファイルとディレクトリのリストを取得する	array scandir ( string $directory [, int $sorting_order = SCANDIR_SORT_ASCENDING [, resource $context ]] )	成功した場合にファイル名の配列、失敗した場合に FALSE を返します。 directory がディレクトリではない場合は、 FALSE を返し、E_WARNING レベルのエラーを 発行します。
sem_acquire	セマフォを得る	bool sem_acquire ( resource $sem_identifier )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sem_get	セマフォ ID を得る	resource sem_get ( int $key [, int $max_acquire = 1 [, int $perm = 0666 [, int $auto_release = 1 ]]] )	成功した場合に正のセマフォ ID、エラー時には FALSE を返します。
sem_release	セマフォを解放する	bool sem_release ( resource $sem_identifier )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sem_remove	セマフォを削除する	bool sem_remove ( resource $sem_identifier )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
serialize	値の保存可能な表現を生成する	string serialize ( mixed $value )	value の保存可能なバイトストリーム表現を含む文字列を返します。
session_cache_expire	現在のキャッシュの有効期限を返す	int session_cache_expire ([ string $new_cache_expire ] )	session.cache_expire の現在の設定を返します。 返り値は分単位で、デフォルトは 180 です。
session_cache_limiter	現在のキャッシュリミッタを取得または設定する	string session_cache_limiter ([ string $cache_limiter ] )	現在のキャッシュリミッタの名前を返します。
session_commit	session_write_close() のエイリアス
session_decode	セッションエンコードされた文字列からセッションデータをデコードする	bool session_decode ( string $data )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
session_destroy	セッションに登録されたデータを全て破棄する	bool session_destroy ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
session_encode	現在のセッションデータを、セッションエンコードされた文字列に変換する	string session_encode ( void )	現在のセッションの内容をエンコードしたものを返します。
session_get_cookie_params	セッションクッキーのパラメータを得る	array session_get_cookie_params ( void )	現在のセッションクッキーの情報を配列として返します。 この配列には次のような項目が含まれています。 "lifetime" - クッキーの生存期間(lifetime) "path" - 情報が保存されている場所のパス "domain" - クッキーのドメイン "secure" - クッキーはセキュアな接続でのみ送信されます。 "httponly" - クッキーは HTTP を通してのみアクセス可能となります。
session_id	現在のセッション ID を取得または設定する	string session_id ([ string $id ] )	session_id() は現在のセッションのセッション ID を返します。 現在のセッションが存在しない (現在のセッション ID が存在しない) 場合は空文字列 ("") を返します。
session_is_registered	変数がセッションに登録されているかどうかを調べる	bool session_is_registered ( string $name )	session_is_registered() は、 name という名前のグローバル変数が現在のセッションに登録されている場合に TRUE、それ以外の場合に FALSE を返します。
session_module_name	現在のセッションモジュールを取得または設定する	string session_module_name ([ string $module ] )	現在のセッションモジュールの名前を返します。
session_name	現在のセッション名を取得または設定する	string session_name ([ string $name ] )	現在のセッションの名前を返します。
session_pgsql_add_error	エラーカウントを加算し、直近のエラーメッセージを設定する	bool session_pgsql_add_error ( int $error_level [, string $error_message ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
session_pgsql_get_error	エラーの数および直近のエラーメッセージを返す	array session_pgsql_get_error ([ bool $with_error_message = false ] )	エラーの数を配列で返します。
session_pgsql_get_field	カスタムフィールドの値を取得する	string session_pgsql_get_field ( void )
session_pgsql_reset	セッションデータベースサーバーとの接続をリセットする	bool session_pgsql_reset ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
session_pgsql_set_field	カスタムフィールドの値を設定する	bool session_pgsql_set_field ( string $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
session_pgsql_status	現在の保存ハンドラの状態を得る	array session_pgsql_status ( void )
session_regenerate_id	現在のセッションIDを新しく生成したものと置き換える	bool session_regenerate_id ([ bool $delete_old_session = false ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
session_register_shutdown	セッションのシャットダウン関数	void session_register_shutdown ( void )	値を返しません。
session_register	現在のセッションに1つ以上の変数を登録する	bool session_register ( mixed $name [, mixed $... ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
session_save_path	現在のセッションデータ保存パスを取得または設定する	string session_save_path ([ string $path ] )	現在のデータ保存先ディレクトリのパスを返します。
session_set_cookie_params	セッションクッキーパラメータを設定する	void session_set_cookie_params ( int $lifetime [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]] )	値を返しません。
session_set_save_handler	ユーザー定義のセッション保存関数を設定する	bool session_set_save_handler ( callable $open , callable $close , callable $read , callable $write , callable $destroy , callable $gc )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
session_start	新しいセッションを開始、あるいは既存のセッションを再開する	bool session_start ( void )	この関数は、セッションが正常に開始した場合に TRUE、それ以外の場合に FALSE を返します。
session_status	現在のセッションの状態を返す	int session_status ( void )	セッションが無効な場合は PHP_SESSION_DISABLED セッションが有効だけれどもセッションが存在しない場合は PHP_SESSION_NONE セッションが有効で、かつセッションが存在する場合は PHP_SESSION_ACTIVE
session_unregister	現在のセッションから変数の登録を削除する	bool session_unregister ( string $name )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
session_unset	全てのセッション変数を開放する	void session_unset ( void )	値を返しません。
session_write_close	セッションデータを書き込んでセッションを終了する	void session_write_close ( void )	値を返しません。
set_error_handler	ユーザー定義のエラーハンドラ関数を設定する	mixed set_error_handler ( callable $error_handler [, int $error_types = E_ALL | E_STRICT ] )	前に定義されたエラーハンドラ(ある場合)を含む文字列を返します。 組み込みのエラーハンドラを使用している場合は NULL を返します。 また、無効なコールバックなどでエラーとなった場合も NULL を返します。 前に定義されたハンドラがクラスメソッドの場合、この関数は、 クラスとメソッド名からなる添字配列を返します。
set_exception_handler	ユーザー定義の例外ハンドラ関数を設定する	callable set_exception_handler ( callable $exception_handler )	前に定義された例外ハンドラの名前、またはエラー発生時に NULL を返します。 前にハンドラが定義されていない場合にも NULL が返されます。
set_file_buffer	stream_set_write_buffer() のエイリアス
set_include_path	include_path 設定オプションをセットする	string set_include_path ( string $new_include_path )	成功した場合に元の include_path の値、失敗した場合に FALSE を返します。
set_magic_quotes_runtime	magic_quotes_runtime の現在アクティブな設定をセットする	bool set_magic_quotes_runtime ( bool $new_setting )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
set_socket_blocking	stream_set_blocking() のエイリアス
set_time_limit	実行時間の最大値を制限する	void set_time_limit ( int $seconds )	値を返しません。
setcookie	クッキーを送信する	bool setcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]] )	もしもこの関数をコールする前に何らかの出力がある場合には、 setcookie() は失敗し FALSE を返します。 setcookie() が正常に実行されると、TRUE を返します。 この関数では、ユーザーがクッキーを受け入れたかどうかを判断することはできません。
setlocale	ロケール情報を設定する	string setlocale ( int $category , string $locale [, string $... ] )	現在の新しいロケールを返します。ロケール機能が未実装、 指定されたロケールが存在しない、カテゴリ名が無効などの場合は FALSE を返します。
setproctitle	プロセスのタイトルを設定	void setproctitle ( string $title )	値を返しません。
setrawcookie	値を URL エンコードせずにクッキーを送信する	bool setrawcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
setthreadtitle	スレッドのタイトルを設定	bool setthreadtitle ( string $title )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
settype	変数の型をセットする	bool settype ( mixed &$var , string $type )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sha1_file	ファイルの sha1 ハッシュを計算する	string sha1_file ( string $filename [, bool $raw_output = false ] )	成功した場合に文字列、それ以外の場合に FALSE を返します。
sha1	文字列の sha1 ハッシュを計算する	string sha1 ( string $str [, bool $raw_output = false ] )	sha1 ハッシュを文字列で返します。
shell_exec	シェルによりコマンドを実行し、文字列として出力全体を返す	string shell_exec ( string $cmd )	実行されたコマンドからの出力、あるいはエラーが発生した場合は NULL を返します。
shm_attach	共有メモリセグメントを作成またはオープンする	resource shm_attach ( int $key [, int $memsize [, int $perm = 0666 ]] )	共有メモリセグメントの ID を返します。
shm_detach	共有メモリセグメントへの接続を閉じる	bool shm_detach ( resource $shm_identifier )	shm_detach() は、常に TRUE を返します。
shm_get_var	共有メモリから変数を返す	mixed shm_get_var ( resource $shm_identifier , int $variable_key )	指定したキーの変数を返します。
shm_has_var	特定のエントリが存在するかどうかを調べる	bool shm_has_var ( resource $shm_identifier , int $variable_key )	エントリが存在する場合に TRUE、それ以外の場合に FALSE を返します。
shm_put_var	共有メモリの変数を挿入または更新する	bool shm_put_var ( resource $shm_identifier , int $variable_key , mixed $variable )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
shm_remove_var	共有メモリから変数を削除する	bool shm_remove_var ( resource $shm_identifier , int $variable_key )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
shm_remove	Unix システムから共有メモリを削除する	bool shm_remove ( resource $shm_identifier )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
shmop_close	共有メモリブロックを閉じる	void shmop_close ( int $shmid )	値を返しません。
shmop_delete	共有メモリブロックを削除する	bool shmop_delete ( int $shmid )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
shmop_open	共有メモリブロックを作成またはオープンする	int shmop_open ( int $key , string $flags , int $mode , int $size )	成功した場合は、 shmop_open() は 作成した共有メモリセグメントにアクセスするために使用する ID を返します。 失敗した場合に FALSE を返します。
shmop_read	共有メモリブロックからデータを読み込む	string shmop_read ( int $shmid , int $start , int $count )	データを返します。失敗した場合に FALSE を返します。
shmop_size	共有メモリブロックの大きさを得る	int shmop_size ( int $shmid )	共有メモリブロックが占有するバイト数を表す整数を返します。
shmop_write	共有メモリブロックにデータを書き込む	int shmop_write ( int $shmid , string $data , int $offset )	書き込んだ data の大きさ、あるいは失敗した場合に FALSE を返します。
show_source	highlight_file() のエイリアス
shuffle	配列をシャッフルする	bool shuffle ( array &$array )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
signeurlpaiement	決済 url を取得する (2 つの引数が必要)	string nthmac ( string $clent , string $data )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
similar_text	二つの文字列の間の類似性を計算する	int similar_text ( string $first , string $second [, float &$percent ] )	両方の文字列でマッチした文字の数を返します。
simplexml_import_dom	DOM ノードから SimpleXMLElement オブジェクトを取得する	SimpleXMLElement simplexml_import_dom ( DOMNode $node [, string $class_name = "SimpleXMLElement" ] )	SimpleXMLElement を返します。失敗した場合に FALSE を返します。
simplexml_load_file	XMLファイルをパースし、オブジェクトに代入する	SimpleXMLElement simplexml_load_file ( string $filename [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns = "" [, bool $is_prefix = false ]]]] )	SimpleXMLElement クラスのオブジェクトを返します。 XML ドキュメント内のデータをプロパティに含みます。 失敗した場合に FALSE を返します。
simplexml_load_string	XML 文字列をオブジェクトに代入する	SimpleXMLElement simplexml_load_string ( string $data [, string $class_name = "SimpleXMLElement" [, int $options = 0 [, string $ns [, bool $is_prefix = false ]]]] )	SimpleXMLElement クラスのオブジェクトを返します。 XML ドキュメント内のデータをプロパティに含みます。 失敗した場合に FALSE を返します。
sin	正弦（サイン）	float sin ( float $arg )	arg のサインを返します。
sinh	双曲線正弦（ハイパボリックサイン）	float sinh ( float $arg )	arg のハイパボリックサインを返します。
sizeof	count() のエイリアス
sleep	実行を遅延させる	int sleep ( int $seconds )	成功した場合にゼロ、エラーが発生した場合に FALSE を返します。
snmp_get_quick_print	UCD ライブラリの quick_print の現在の設定値を取得する	bool snmp_get_quick_print ( void )	quick_print がオンの場合に TRUE、それ以外の場合に FALSE を返します。
snmp_get_valueretrieval	SNMP の値が返される方法を返す	int snmp_get_valueretrieval ( void )	OR でつないだ定数 ( SNMP_VALUE_LIBRARY あるいは SNMP_VALUE_PLAIN) に、場合によって SNMP_VALUE_OBJECT を組み合わせて返します。
snmp_read_mib	アクティブな MIB ツリーの中に MIB ファイルを読み込んでパースする	bool snmp_read_mib ( string $filename )
snmp_set_enum_print	すべての enum を、実際の整数値ではなく enum 値とともに返す	bool snmp_set_enum_print ( int $enum_print )
snmp_set_oid_numeric_print	指定したオブジェクト内の全てのオブジェクトを、対応するオブジェクト ID を含めて返す	void snmp_set_oid_numeric_print ( int $oid_format )
snmp_set_oid_output_format	OID の出力形式を設定する	bool snmp_set_oid_output_format ( int $oid_format = SNMP_OID_OUTPUT_MODULE )	値を返しません。
snmp_set_quick_print	UCB SNMP ライブラリで quick_print の値を設定する	bool snmp_set_quick_print ( bool $quick_print )	値を返しません。
snmp_set_valueretrieval	SNMP の値が返される方法を設定する	bool snmp_set_valueretrieval ( int $method = SNMP_VALUE_LIBRARY )
snmp2_get	SNMP オブジェクトを取得する	string snmp2_get ( string $host , string $community , string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )	成功した場合に SNMP オブジェクトの値、エラー時に FALSE を返します。
snmp2_getnext	指定したオブジェクト ID に続く SNMP オブジェクトを取得する	string snmp2_getnext ( string $host , string $community , string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )	成功した場合に SNMP オブジェクトの値、エラー時に FALSE を返します。 エラー時には E_WARNING が発生します。
snmp2_real_walk	指定したすべてのオブジェクトとそのオブジェクト ID を返す	array snmp2_real_walk ( string $host , string $community , string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )	成功した場合に SNMP オブジェクト ID とその値の連想配列。エラー時に FALSE を返します。 エラー時には E_WARNING が発生します。
snmp2_set	SNMP オブジェクトの値を設定する	bool snmp2_set ( string $host , string $community , string $object_id , string $type , string $value [, string $timeout = 1000000 [, string $retries = 5 ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
snmp2_walk	すべての SNMP オブジェクトをエージェントから取得する	array snmp2_walk ( string $host , string $community , string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )	object_id をルートとするすべての SNMP オブジェクトの値の配列、あるいはエラー時に FALSE を返します。
snmp3_get	SNMP オブジェクトを取得する	string snmp3_get ( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )	成功した場合に SNMP オブジェクトの値、エラー時に FALSE を返します。
snmp3_getnext	指定したオブジェクト ID に続く SNMP オブジェクトを取得する	string snmp3_getnext ( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )	成功した場合に SNMP オブジェクトの値、エラー時に FALSE を返します。 エラー時には E_WARNING が発生します。
snmp3_real_walk	指定したすべてのオブジェクトとそのオブジェクト ID を返す	array snmp3_real_walk ( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )	成功した場合に SNMP オブジェクト ID とその値の連想配列。エラー時に FALSE を返します。 エラー時には E_WARNING が発生します。
snmp3_set	SNMP オブジェクトの値を設定する	bool snmp3_set ( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id , string $type , string $value [, int $timeout = 1000000 [, int $retries = 5 ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
snmp3_walk	すべての SNMP オブジェクトをエージェントから取得する	array snmp3_walk ( string $host , string $sec_name , string $sec_level , string $auth_protocol , string $auth_passphrase , string $priv_protocol , string $priv_passphrase , string $object_id [, string $timeout = 1000000 [, string $retries = 5 ]] )	object_id をルートとするすべての SNMP オブジェクトの値の配列、あるいはエラー時に FALSE を返します。
snmpget	SNMP オブジェクトを取得する	string snmpget ( string $hostname , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )	成功した場合に SNMP オブジェクトの値、失敗した場合に FALSE を返します。
snmpgetnext	指定したオブジェクト ID に続く SNMP オブジェクトを取得する	string snmpgetnext ( string $host , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )	成功した場合に SNMP オブジェクトの値、エラー時に FALSE を返します。 エラー時には E_WARNING が発生します。
snmprealwalk	指定したオブジェクトに関するオブジェクト ID を含むすべてのオブジェクトを返す	array snmprealwalk ( string $host , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )	成功した場合に SNMP オブジェクト ID とその値の連想配列。エラー時に FALSE を返します。 エラー時には E_WARNING が発生します。
snmpset	SNMP オブジェクトの値を設定する	bool snmpset ( string $host , string $community , string $object_id , string $type , mixed $value [, int $timeout = 1000000 [, int $retries = 5 ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
snmpwalk	エージェントから全ての SNMP オブジェクトを取得する	array snmpwalk ( string $hostname , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )	object_id() からの SNMP オブジェクトの値の配列をルートとして返します。 エラーの場合に FALSE を返します。
snmpwalkoid	ネットワークエンティティに関する情報ツリーを検索する	array snmpwalkoid ( string $hostname , string $community , string $object_id [, int $timeout = 1000000 [, int $retries = 5 ]] )	object_id() からの SNMP オブジェクトの値の配列をルートとして返します。 エラーの場合に FALSE を返します。
socket_accept	ソケットへの接続を許可する	resource socket_accept ( resource $socket )	成功した場合に新規ソケットリソースを、エラー時に FALSE を返します。 実際のエラーコードは、 socket_last_error() を コールすることで取得可能です。このコードを socket_strerror() に渡すことで、 エラーの内容を文字列で取得することが可能です。
socket_bind	ソケットに名前をバインドする	bool socket_bind ( resource $socket , string $address [, int $port = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
socket_clear_error	ソケットのエラーまたは直近のエラーコードをクリアする	void socket_clear_error ([ resource $socket ] )	値を返しません。
socket_close	ソケットリソースを閉じる	void socket_close ( resource $socket )	値を返しません。
socket_cmsg_space	メッセージバッファサイズを計算する	int socket_cmsg_space ( int $level , int $type )
socket_connect	ソケット上の接続を初期化する	bool socket_connect ( resource $socket , string $address [, int $port = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 エラーコードは、 socket_last_error() により取得できます。 このコードを socket_strerror() に渡すことにより、 エラー内容を表すテキストを得ることができます。
socket_create_listen	接続を受けつけるためにポートにソケットをオープンする	resource socket_create_listen ( int $port [, int $backlog = 128 ] )	socket_create_listen() は、 成功した場合に新規ソケットリソースを、エラー時に FALSE を返します。エラーコードは socket_last_error() で取得可能です。このコードを socket_strerror() に渡すと、エラーの詳細が文字列で取得可能です。
socket_create_pair	区別できないソケットの組を作成し、配列に保存する	bool socket_create_pair ( int $domain , int $type , int $protocol , array &$fd )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
socket_create	ソケット（通信時の終端）を作成する	resource socket_create ( int $domain , int $type , int $protocol )	socket_create() は、 成功時にソケットリソース、失敗時に FALSE を返します。 実際のエラーコードは、 socket_last_error() を コールすることにより取得できます。このエラーコードをさらに socket_strerror() に渡すことにより、 エラーの内容を文字列で取得することが可能です。
socket_get_option	ソケットのオプションを取得する	mixed socket_get_option ( resource $socket , int $level , int $optname )	指定したオプションの値、あるいはエラー時に FALSE を返します。
socket_get_status	stream_get_meta_data() のエイリアス
socket_getpeername	指定したソケットのリモート側に問い合わせ、その型に応じてホスト/ポート、あるいは Unix ファイルシステムのパスを返す	bool socket_getpeername ( resource $socket , string &$address [, int &$port ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 socket_getpeername() は、 ソケットの型が AF_INET、 AF_INET6 あるいは AF_UNIX のいずれでもない場合にも FALSE を返します。この場合には、 直近のソケットエラーコードは更新されません。
socket_getsockname	指定したソケットのローカル側に問い合わせ、その型に応じてホスト/ポート、あるいは Unix ファイルシステムのパスを返す	bool socket_getsockname ( resource $socket , string &$addr [, int &$port ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 socket_getsockname() は、 ソケットの型が AF_INET、 AF_INET6 あるいは AF_UNIX のいずれでもない場合にも FALSE を返します。この場合には、 直近のソケットエラーコードは更新されません。
socket_import_stream	ストリームをインポートする	resource socket_import_stream ( resource $stream )	FALSE を返します。失敗した場合は NULL を返します。
socket_last_error	ソケットの直近のエラーを返す	int socket_last_error ([ resource $socket ] )	この関数は、ソケットのエラーコードを返します。
socket_listen	ソケット上で接続待ち(listen)する	bool socket_listen ( resource $socket [, int $backlog = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 エラーコードは socket_last_error() で取得可能で、このコードを socket_strerror() に指定することにより エラーの内容を文字列として取得可能です。
socket_read	ソケットから最大バイト長まで読みこむ	string socket_read ( resource $socket , int $length [, int $type = PHP_BINARY_READ ] )	socket_read() は、成功時に文字列としてデータを返し、 エラー時 (リモートホストが接続をクローズした場合を含みます) に FALSE を返します。 エラーコードは socket_last_error() で取得可能であり、 このコードは、エラー文字列を取得するために socket_strerror() に渡すことができます。
socket_recv	接続したソケットからデータを受信する	int socket_recv ( resource $socket , string &$buf , int $len , int $flags )	socket_recv() は、受信したバイト数を返します。 エラーが発生した場合は FALSE を返します。 実際のエラーコードを取得するには socket_last_error() をコールします。 このエラーコードを socket_strerror() に渡すと、エラーに関する説明テキストを取得することができます。
socket_recvfrom	接続しているかどうかによらず、ソケットからデータを受信する	int socket_recvfrom ( resource $socket , string &$buf , int $len , int $flags , string &$name [, int &$port ] )	socket_recvfrom() は、受信したバイト数を返します。 あるいはエラー時には FALSE を返します。 エラーコードを取得するには socket_last_error() をコールします。取得したエラーコードを socket_strerror() に渡すと、 そのエラーについての説明を得ることができます。
socket_recvmsg	メッセージを読む	int socket_recvmsg ( resource $socket , string $message [, int $flags ] )
socket_select	与えられたソケットの配列に対し、指定した有効時間で select() システムコールを実行する	int socket_select ( array &$read , array &$write , array &$except , int $tv_sec [, int $tv_usec = 0 ] )	成功した場合は、 socket_select() は配列内で 変化のあったソケットリソースの数を返します。もし何かがおこる前に タイムアウト時間が経過した場合は、ゼロを返すことになります。 エラー時には FALSE が返されます。エラーコードは socket_last_error() で取得可能です。
socket_send	接続したソケットにデータを送信する	int socket_send ( resource $socket , string $buf , int $len , int $flags )	socket_send() は、送信したバイト数あるいはエラー時に FALSE を返します。
socket_sendmsg	メッセージを送信する	int socket_sendmsg ( resource $socket , array $message , int $flags )
socket_sendto	接続しているかどうかによらずソケットにメッセージを送信する	int socket_sendto ( resource $socket , string $buf , int $len , int $flags , string $addr [, int $port = 0 ] )	socket_sendto() は、リモートホストに送信したバイト数を返します。 エラーが発生した場合は FALSE を返します。
socket_set_block	ソケットリソースをブロックモードに設定する	bool socket_set_block ( resource $socket )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
socket_set_blocking	stream_set_blocking() のエイリアス
socket_set_nonblock	ソケットリソースを非ブロックモードに設定する	bool socket_set_nonblock ( resource $socket )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
socket_set_option	ソケットのオプションを設定する	bool socket_set_option ( resource $socket , int $level , int $optname , mixed $optval )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
socket_set_timeout	stream_set_timeout() のエイリアス
socket_shutdown	受信、送信、または送受信用のソケットをシャットダウンする	bool socket_shutdown ( resource $socket [, int $how = 2 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
socket_strerror	ソケットエラーの内容を文字列として返す	string socket_strerror ( int $errno )	errno パラメータに対応するエラーメッセージを返します。
socket_write	ソケットに書き込む	int socket_write ( resource $socket , string $buffer [, int $length = 0 ] )	ソケットへの書き込みに成功したデータのバイト数を返します。失敗した場合に FALSE を返します。 エラーコードは socket_last_error() を用いて取得することができ、この値を socket_strerror() に渡すことでエラー情報を文字列で取得可能です。
solr_get_version	Apache Solr エクステンションの現行バージョンを返す	string solr_get_version ( void )	成功時に文字列、失敗時に FALSE を返します。
sort	配列をソートする	bool sort ( array &$array [, int $sort_flags = SORT_REGULAR ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
soundex	文字列の soundex キーを計算する	string soundex ( string $str )	soundex キーを文字列で返します。
spl_autoload_call	要求されたクラスを読み込むために、すべての登録済みの __autoload() 関数を試す	void spl_autoload_call ( string $class_name )	値を返しません。
spl_autoload_extensions	spl_autoload 用のデフォルトの拡張子を登録し、それを返す	string spl_autoload_extensions ([ string $file_extensions ] )	spl_autoload() のデフォルト拡張子の一覧をカンマ区切り形式で返します。
spl_autoload_functions	すべての登録済み __autoload() 関数を返す	array spl_autoload_functions ( void )	すべての登録済み __autoload 関数を配列で返します。 autoload スタックが有効になっていない場合は、FALSE. が返されます。 関数が何も登録されていない場合は、空の配列が返されます。
spl_autoload_register	指定した関数を __autoload() の実装として登録する	bool spl_autoload_register ([ callable $autoload_function [, bool $throw = true [, bool $prepend = false ]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
spl_autoload_unregister	指定した関数の、__autoload() の実装としての登録を解除する	bool spl_autoload_unregister ( mixed $autoload_function )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
spl_autoload	__autoload() のデフォルト実装	void spl_autoload ( string $class_name [, string $file_extensions = spl_autoload_extensions() ] )	値を返しません。
spl_classes	利用可能な SPL クラスを返す	array spl_classes ( void )	現在利用可能な SPL クラスを配列で返します。
spl_object_hash	指定したオブジェクトのハッシュ ID を返す	string spl_object_hash ( object $obj )	現在存在する各オブジェクトに固有で、同一オブジェクトに対しては常に同じ値となる文字列を返します。
split	正規表現により文字列を分割し、配列に格納する	array split ( string $pattern , string $string [, int $limit = -1 ] )	文字列の配列を返します。配列の各要素は、大文字小文字を区別する正規表現 pattern により区切られた string 中の部分文字列です。
spliti	大文字小文字を区別しない正規表現により文字列を分割し、配列に格納する	array spliti ( string $pattern , string $string [, int $limit = -1 ] )	文字列の配列を返します。配列の各要素は、大文字小文字を区別する正規表現 pattern により区切られた string 中の部分文字列です。
sprintf	フォーマットされた文字列を返す	string sprintf ( string $format [, mixed $args [, mixed $... ]] )	フォーマット文字列 format に基づき生成された文字列を返します。
sql_regcase	大文字小文字を区別しないマッチングのための正規表現を作成する	string sql_regcase ( string $string )	大文字小文字を区別せず stringにマッチする、 有効な正規表現式を返します。この表現式は、string の中の個々のアルファベットを '[]' 表現に変換したものです。 この '[]' 表現は、大文字と小文字がそれぞれ含まれます。 アルファベット以外の文字の場合は、元々の文字がそのまま残ります。
sqlite_array_query	指定したデータベースに対してクエリを実行し、配列を返す	public array sqlite_array_query ( resource $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )	結果セット全体の配列、その他の場合は FALSE を返します。
sqlite_busy_timeout	ビジータイムアウト時間を設定またはビジーハンドラを無効にする	public void sqlite_busy_timeout ( resource $dbhandle , int $milliseconds )	値を返しません。
sqlite_changes	直近のSQLステートメントにより変更されたレコード数を返す	public int sqlite_changes ( resource $dbhandle )	変更された行数を返します。
sqlite_close	オープンされたSQLiteデータベースを閉じる	void sqlite_close ( resource $dbhandle )	値を返しません。
sqlite_column	カレントの結果セットのレコードからカラムを1列取得する	mixed sqlite_column ( resource $result , mixed $index_or_name [, bool $decode_binary = true ] )	カラムの値を返します。
sqlite_create_aggregate	SQLステートメントで使用する集約UDFを登録する	public void sqlite_create_aggregate ( resource $dbhandle , string $function_name , callable $step_func , callable $finalize_func [, int $num_args = -1 ] )	値を返しません。
sqlite_create_function	SQLステートメントで使用するために"通常の"ユーザー定義関数を登録する	public void sqlite_create_function ( resource $dbhandle , string $function_name , callable $callback [, int $num_args = -1 ] )	値を返しません。
sqlite_current	結果セットからカレントのレコードを配列として取得する	array sqlite_current ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )	結果セットからカレントレコードの配列を返します。 現在の位置が最終レコード以降の場合、 FALSE を返します。
sqlite_error_string	エラーコードの説明を返す	string sqlite_error_string ( int $error_code )	error_code に対応する可読形式の説明を文字列で返します。
sqlite_escape_string	クエリパラメータ用に文字列をエスケープする	string sqlite_escape_string ( string $item )	SQLite の SQL 文で使用できる形式にエスケープした文字列を返します。
sqlite_exec	与えられたデータベースに対して結果を伴わないクエリを実行する	public bool sqlite_exec ( resource $dbhandle , string $query [, string &$error_msg ] )	この関数はブール型の結果を返します。 成功時は TRUE、失敗時は FALSE を返します。 もしレコードを返すクエリを実行する必要がある場合は sqlite_query() を参照ください。
sqlite_factory	SQLite データベースをオープンし、SQLiteDatabse オブジェクトを返す	SQLiteDatabase sqlite_factory ( string $filename [, int $mode = 0666 [, string &$error_message ]] )	成功時に SQLiteDatabase オブジェクト、失敗時に NULL を返します。
sqlite_fetch_all	結果セットから全てのレコードを配列の配列として取得する	array sqlite_fetch_all ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )	結果セットからのカレントレコードの配列を返します。 sqlite_query() の直後にコールされた場合、 全ての行を返します。 sqlite_fetch_array() の後にコールされた場合、残りの行を返します。 結果セットに行が残っていない場合、空の配列を返します。
sqlite_fetch_array	結果セットから次のレコードを配列として取得する	array sqlite_fetch_array ( resource $result [, int $result_type = SQLITE_BOTH [, bool $decode_binary = true ]] )	結果セットの次レコードの配列を返します。 次レコードの位置が最終レコード以降の場合、FALSE を返します。
sqlite_fetch_column_types	特定のテーブルからカラム型の配列を返す	public array sqlite_fetch_column_types ( string $table_name , resource $dbhandle [, int $result_type = SQLITE_ASSOC ] )	カラムのデータ型の配列を返します。エラー時は FALSE を返します。
sqlite_fetch_object	結果セットから次のレコードをオブジェクトとして取得する	object sqlite_fetch_object ( resource $result [, string $class_name [, array $ctor_params [, bool $decode_binary = true ]]] )
sqlite_fetch_single	結果セットの最初のカラムを文字列として取得する	string sqlite_fetch_single ( resource $result [, bool $decode_binary = true ] )	最初のカラムの値を文字列で返します。
sqlite_fetch_string	sqlite_fetch_single() のエイリアス
sqlite_field_name	特定のフィールドの名前を返す	string sqlite_field_name ( resource $result , int $field_index )	与えられたオリジナルのカラム番号での SQLite 結果セット中のフィールド名を返します。エラーの場合は、FALSE を返します。
sqlite_has_more	まだレコードがあるかないかを返す	bool sqlite_has_more ( resource $result )	result ハンドルにまだレコードがある場合 TRUE を返します。そうでない場合 FALSE を返します。
sqlite_has_prev	前のレコードがあるかどうかを返す	bool sqlite_has_prev ( resource $result )	結果ハンドル result に前のレコードがある場合 TRUE、 そうでない場合 FALSE を返します。
sqlite_key	カレントレコードのインデックスを返す	int SQLiteResult::key ( void )	バッファされた結果セット result のカレントレコードのインデックスを返します。
sqlite_last_error	データベースに関する直近のエラーコードを返す	public int sqlite_last_error ( resource $dbhandle )	エラーコード、あるいはエラーが発生していない場合に 0 を返します。
sqlite_last_insert_rowid	直近に挿入されたレコードのrowidを返す	public int sqlite_last_insert_rowid ( resource $dbhandle )	行 ID を整数値で返します。
sqlite_libencoding	リンクされているSQLiteライブラリのエンコーディングを返す	string sqlite_libencoding ( void )	ライブラリのエンコーディングを返します。
sqlite_libversion	リンクされているSQLiteライブラリのバージョンを返す	string sqlite_libversion ( void )	ライブラリのバージョンを文字列で返します。
sqlite_next	次のレコード番号へシークする	bool sqlite_next ( resource $result )	成功時は TRUE、もしレコードがない場合は FALSE を返します。
sqlite_num_fields	結果セットのフィールド数を返す	int sqlite_num_fields ( resource $result )	フィールド数を整数値で返します。
sqlite_num_rows	結果セットのレコード数を返す	int sqlite_num_rows ( resource $result )	行数を整数値で返します。
sqlite_open	SQLiteデータベースをオープンする。データベースが存在しない場合は作 成する	resource sqlite_open ( string $filename [, int $mode = 0666 [, string &$error_message ]] )	成功時にリソース (データベースハンドル)、失敗時に FALSE を返します。
sqlite_popen	SQLiteデータベースへの持続的ハンドルをオープンする。存在しない場合 には、データベースを作成する	resource sqlite_popen ( string $filename [, int $mode = 0666 [, string &$error_message ]] )	成功時にリソース (データベースハンドル)、失敗時に FALSE を返します。
sqlite_prev	結果セットの前のレコード番号へシークする	bool sqlite_prev ( resource $result )	成功時は TRUE、もしレコードがない場合は FALSE を返します。
sqlite_query	指定したデータベースに対してクエリを実行し、結果ハンドル を返す	resource sqlite_query ( resource $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )	この関数は結果ハンドルを返します。失敗した場合に FALSE を返します。 レコードを返すクエリの場合、結果ハンドルは sqlite_fetch_array() や sqlite_seek() のような関数で使用することができます。
sqlite_rewind	先頭レコード番号へシークする	bool sqlite_rewind ( resource $result )	結果セットにレコードがもうない場合は、FALSE、 そうでない場合は TRUE を返します。
sqlite_seek	特定のレコード番号へシークする	bool sqlite_seek ( resource $result , int $rownum )	レコードが存在しない場合は FALSE、それ以外の場合に TRUE を返します。
sqlite_single_query	クエリを実行し、単一カラムもしくは先頭レコードの値に対する配列を返す	array sqlite_single_query ( resource $db , string $query [, bool $first_row_only [, bool $decode_binary ]] )
sqlite_udf_decode_binary	UDFにパラメータとして渡されたバイナリデータをデコードする	string sqlite_udf_decode_binary ( string $data )	デコードされた文字列を返します。
sqlite_udf_encode_binary	UDFから返す前にバイナリデータをエンコードする	string sqlite_udf_encode_binary ( string $data )	エンコードされた文字列を返します。
sqlite_unbuffered_query	事前取得していないクエリを実行し、全てのデータをバッファリングする	resource sqlite_unbuffered_query ( resource $dbhandle , string $query [, int $result_type = SQLITE_BOTH [, string &$error_msg ]] )	結果セットを返します。失敗した場合に FALSE を返します。
sqlite_valid	まだレコードが残っているかどうかを返す	bool sqlite_valid ( resource $result )	結果ハンドル result にレコードが残っている場合 TRUE、そうでない場合は FALSE を返します。
sqlsrv_begin_transaction	Begins a database transaction	bool sqlsrv_begin_transaction ( resource $conn )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sqlsrv_cancel	Cancels a statement	bool sqlsrv_cancel ( resource $stmt )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sqlsrv_client_info	Returns information about the client and specified connection	array sqlsrv_client_info ( resource $conn )	Returns an associative array with keys described in the table below. Returns FALSE otherwise. Array returned by sqlsrv_client_info Key Description DriverDllName SQLNCLI10.DLL DriverODBCVer ODBC version (xx.yy) DriverVer SQL Server Native Client DLL version (10.5.xxx) ExtensionVer php_sqlsrv.dll version (2.0.xxx.x)
sqlsrv_close	Closes an open connection and releases resourses associated with the connection	bool sqlsrv_close ( resource $conn )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sqlsrv_commit	Commits a transaction that was begun with sqlsrv_begin_transaction()	bool sqlsrv_commit ( resource $conn )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sqlsrv_configure	Changes the driver error handling and logging configurations	bool sqlsrv_configure ( string $setting , mixed $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sqlsrv_connect	Opens a connection to a Microsoft SQL Server database	resource sqlsrv_connect ( string $serverName [, array $connectionInfo ] )	A connection resource. If a connection cannot be successfully opened, FALSE is returned.
sqlsrv_errors	Returns error and warning information about the last SQLSRV operation performed	mixed sqlsrv_errors ([ int $errorsOrWarnings ] )	If errors and/or warnings occurred on the last sqlsrv operation, an array of arrays containing error information is returned. If no errors and/or warnings occurred on the last sqlsrv operation, NULL is returned. The following table describes the structure of the returned arrays: Array returned by sqlsrv_errors Key Description SQLSTATE For errors that originate from the ODBC driver, the SQLSTATE returned by ODBC. For errors that originate from the Microsoft Drivers for PHP for SQL Server, a SQLSTATE of IMSSP. For warnings that originate from the Microsoft Drivers for PHP for SQL Server, a SQLSTATE of 01SSP. code For errors that originate from SQL Server, the native SQL Server error code. For errors that originate from the ODBC driver, the error code returned by ODBC. For errors that originate from the Microsoft Drivers for PHP for SQL Server, the Microsoft Drivers for PHP for SQL Server error code. message A description of the error.
sqlsrv_execute	Executes a statement prepared with sqlsrv_prepare()	bool sqlsrv_execute ( resource $stmt )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sqlsrv_fetch_array	Returns a row as an array	array sqlsrv_fetch_array ( resource $stmt [, int $fetchType [, int $row [, int $offset ]]] )	Returns an array on success, NULL if there are no more rows to return, and FALSE if an error occurs.
sqlsrv_fetch_object	Retrieves the next row of data in a result set as an object	mixed sqlsrv_fetch_object ( resource $stmt [, string $className [, array $ctorParams [, int $row [, int $offset ]]]] )	Returns an object on success, NULL if there are no more rows to return, and FALSE if an error occurs or if the specified class does not exist.
sqlsrv_fetch	Makes the next row in a result set available for reading	mixed sqlsrv_fetch ( resource $stmt [, int $row [, int $offset ]] )	Returns TRUE if the next row of a result set was successfully retrieved, FALSE if an error occurs, and NULL if there are no more rows in the result set.
sqlsrv_field_metadata	Retrieves metadata for the fields of a statement prepared by sqlsrv_prepare() or sqlsrv_query()	mixed sqlsrv_field_metadata ( resource $stmt )	Returns an array of arrays is returned on success. Otherwise, FALSE is returned. Each returned array is described by the following table: Array returned by sqlsrv_field_metadata Key Description Name The name of the field. Type The numeric value for the SQL type. Size The number of characters for fields of character type, the number of bytes for fields of binary type, or NULL for other types. Precision The precision for types of variable precision, NULL for other types. Scale The scale for types of variable scale, NULL for other types. Nullable An enumeration indicating whether the column is nullable, not nullable, or if it is not known. For more information, see &raquo;&nbsp;sqlsrv_field_metadata in the Microsoft SQLSRV documentation.
sqlsrv_free_stmt	Frees all resources for the specified statement	bool sqlsrv_free_stmt ( resource $stmt )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sqlsrv_get_config	Returns the value of the specified configuration setting	mixed sqlsrv_get_config ( string $setting )	Returns the value of the specified setting. If an invalid setting is specified, FALSE is returned.
sqlsrv_get_field	Gets field data from the currently selected row	mixed sqlsrv_get_field ( resource $stmt , int $fieldIndex [, int $getAsType ] )	Returns data from the specified field on success. Returns FALSE otherwise.
sqlsrv_has_rows	Indicates whether the specified statement has rows	bool sqlsrv_has_rows ( resource $stmt )	Returns TRUE if the specified statement has rows and FALSE if the statement does not have rows or if an error occurred.
sqlsrv_next_result	Makes the next result of the specified statement active	mixed sqlsrv_next_result ( resource $stmt )	Returns TRUE if the next result was successfully retrieved, FALSE if an error occurred, and NULL if there are no more results to retrieve.
sqlsrv_num_fields	Retrieves the number of fields (columns) on a statement	mixed sqlsrv_num_fields ( resource $stmt )	Returns the number of fields on success. Returns FALSE otherwise.
sqlsrv_num_rows	Retrieves the number of rows in a result set	mixed sqlsrv_num_rows ( resource $stmt )	Returns the number of rows retrieved on success and FALSE if an error occurred. If a forward cursor (the default) or dynamic cursor is used, FALSE is returned.
sqlsrv_prepare	Prepares a query for execution	mixed sqlsrv_prepare ( resource $conn , string $sql [, array $params [, array $options ]] )	Returns a statement resource on success and FALSE if an error occurred.
sqlsrv_query	Prepares and executes a query.	mixed sqlsrv_query ( resource $conn , string $sql [, array $params [, array $options ]] )	Returns a statement resource on success and FALSE if an error occurred.
sqlsrv_rollback	Rolls back a transaction that was begun with sqlsrv_begin_transaction()	bool sqlsrv_rollback ( resource $conn )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sqlsrv_rows_affected	Returns the number of rows modified by the last INSERT, UPDATE, or DELETE query executed	int sqlsrv_rows_affected ( resource $stmt )	Returns the number of rows affected by the last INSERT, UPDATE, or DELETE query. If no rows were affected, 0 is returned. If the number of affected rows cannot be determined, -1 is returned. If an error occurred, FALSE is returned.
sqlsrv_send_stream_data	Sends data from parameter streams to the server	bool sqlsrv_send_stream_data ( resource $stmt )	Returns TRUE if there is more data to send and FALSE if there is not.
sqlsrv_server_info	Returns information about the server	array sqlsrv_server_info ( resource $conn )	Returns an array as described in the following table: Returned Array CurrentDatabase The connected-to database. SQLServerVersion The SQL Server version. SQLServerName The name of the server.
sqrt	平方根	float sqrt ( float $arg )	arg の平方根を返します。 負の数を指定した場合は、特別な値 NAN を返します。
srand	乱数ジェネレータを初期化する	void srand ([ int $seed ] )	値を返しません。
sscanf	フォーマット文字列に基づき入力を処理する	mixed sscanf ( string $str , string $format [, mixed &$... ] )	この関数のパラメータが二つだけの場合、処理された値は配列として返されます。 それ以外の場合は、もしオプションのパラメータが渡されればこの関数は 割り当てられた値の数を返します。オプションのパラメータは 参照渡しにする必要があります。
ssdeep_fuzzy_compare	Calculates the match score between two fuzzy hash signatures	int ssdeep_fuzzy_compare ( string $signature1 , string $signature2 )	Returns an integer from 0 to 100 on success, FALSE otherwise.
ssdeep_fuzzy_hash_filename	Create a fuzzy hash from a file	string ssdeep_fuzzy_hash_filename ( string $file_name )	Returns a string on success, FALSE otherwise.
ssdeep_fuzzy_hash	Create a fuzzy hash from a string	string ssdeep_fuzzy_hash ( string $to_hash )	Returns a string on success, FALSE otherwise.
ssh2_auth_agent	SSH の認証を、ssh agent を使って行う	bool ssh2_auth_agent ( resource $session , string $username )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ssh2_auth_hostbased_file	ホスト公開鍵を使用して認証を行う	bool ssh2_auth_hostbased_file ( resource $session , string $username , string $hostname , string $pubkeyfile , string $privkeyfile [, string $passphrase [, string $local_username ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ssh2_auth_none	"none" として認証する	mixed ssh2_auth_none ( resource $session , string $username )	もしサーバーが username に対する認証メソッドとして "none" を受け入れる場合、この関数は単純に TRUE を返します。
ssh2_auth_password	SSH 上でプレーンなパスワードを使用した認証を行う	bool ssh2_auth_password ( resource $session , string $username , string $password )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ssh2_auth_pubkey_file	公開鍵を使用した認証を行う	bool ssh2_auth_pubkey_file ( resource $session , string $username , string $pubkeyfile , string $privkeyfile [, string $passphrase ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ssh2_connect	SSH サーバーに接続する	resource ssh2_connect ( string $host [, int $port = 22 [, array $methods [, array $callbacks ]]] )	成功した場合にリソース、エラー時に FALSE を返します。
ssh2_exec	リモートサーバー上でコマンドを実行する	resource ssh2_exec ( resource $session , string $command [, string $pty [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]] )	成功時にストリームを返し、失敗した場合に FALSE を返します。
ssh2_fetch_stream	拡張データストリームを取得する	resource ssh2_fetch_stream ( resource $channel , int $streamid )	ストリームリソースを返します。
ssh2_fingerprint	リモートサーバーのフィンガープリントを処理する	string ssh2_fingerprint ( resource $session [, int $flags = SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX ] )	ホストキーのハッシュを文字列で返します。
ssh2_methods_negotiated	ネゴシエートされたメソッドのリストを返す	array ssh2_methods_negotiated ( resource $session )
ssh2_publickey_add	認証済み公開鍵を追加する	bool ssh2_publickey_add ( resource $pkey , string $algoname , string $blob [, bool $overwrite = false [, array $attributes ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ssh2_publickey_init	公開鍵サブシステムを初期化する	resource ssh2_publickey_init ( resource $session )	他のすべての ssh2_publickey_*() メソッドで使用する、 SSH2 公開鍵サブシステムリソースを返します。 失敗した場合に FALSE を返します。
ssh2_publickey_list	現在認証済みの公開鍵の一覧を表示する	array ssh2_publickey_list ( resource $pkey )	鍵を、数値添字の配列で返します。 個々の要素は連想配列となっており、その内容は name、blob、および attrs です。
ssh2_publickey_remove	認証済み公開鍵を取り除く	bool ssh2_publickey_remove ( resource $pkey , string $algoname , string $blob )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ssh2_scp_recv	SCP 経由でファイルを要求する	bool ssh2_scp_recv ( resource $session , string $remote_file , string $local_file )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ssh2_scp_send	SCP 経由でファイルを送信する	bool ssh2_scp_send ( resource $session , string $local_file , string $remote_file [, int $create_mode = 0644 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ssh2_sftp_chmod	ファイルのモードを変更する	bool ssh2_sftp_chmod ( resource $sftp , string $filename , int $mode )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ssh2_sftp_lstat	シンボリックリンクの情報を取得する	array ssh2_sftp_lstat ( resource $sftp , string $path )	返り値の詳細については stat() のドキュメントを参照ください。
ssh2_sftp_mkdir	ディレクトリを作成する	bool ssh2_sftp_mkdir ( resource $sftp , string $dirname [, int $mode = 0777 [, bool $recursive = false ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ssh2_sftp_readlink	シンボリックリンクのターゲットを返す	string ssh2_sftp_readlink ( resource $sftp , string $link )	シンボリックリンク link のターゲットを返します。
ssh2_sftp_realpath	指定されたパス文字列の実パスを解決する	string ssh2_sftp_realpath ( resource $sftp , string $filename )	実際のパスを表す文字列を返します。
ssh2_sftp_rename	リモートファイルを改名する	bool ssh2_sftp_rename ( resource $sftp , string $from , string $to )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ssh2_sftp_rmdir	ディレクトリを削除する	bool ssh2_sftp_rmdir ( resource $sftp , string $dirname )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ssh2_sftp_stat	リモートファイルシステム上のファイルの情報を取得する	array ssh2_sftp_stat ( resource $sftp , string $path )	どのような値が返されるのかについての詳細は、 stat() を参照ください。
ssh2_sftp_symlink	シンボリックリンクを作成する	bool ssh2_sftp_symlink ( resource $sftp , string $target , string $link )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ssh2_sftp_unlink	ファイルを削除する	bool ssh2_sftp_unlink ( resource $sftp , string $filename )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ssh2_sftp	SFTP サブシステムを初期化する	resource ssh2_sftp ( resource $session )	このメソッドは全ての他の ssh2_sftp_*() や ssh2.sftp:// fopen ラッパーで使用する SSH2 SFTP リソースを返します。
ssh2_shell	対話式のシェルを要求する	resource ssh2_shell ( resource $session [, string $term_type = "vanilla" [, array $env [, int $width = 80 [, int $height = 25 [, int $width_height_type = SSH2_TERM_UNIT_CHARS ]]]]] )
ssh2_tunnel	リモートサーバーを経由するトンネルをオープンする	resource ssh2_tunnel ( resource $session , string $host , int $port )
stat	ファイルに関する情報を取得する	array stat ( string $filename )	stat() と fstat() の結果のフォーマット 数値 連想 (PHP 4.0.6 以上) 説明 0 dev デバイス番号 1 ino inode 番号(*) 2 mode inode プロテクトモード 3 nlink リンク数 4 uid 所有者のユーザー ID(*) 5 gid 所有者のグループ ID(*) 6 rdev inode デバイス の場合、デバイスの種類 7 size バイト単位のサイズ 8 atime 最終アクセス時間 (Unix タイムスタンプ) 9 mtime 最終修正時間 (Unix タイムスタンプ) 10 ctime 最終 inode 変更時間 (Unix タイムスタンプ) 11 blksize ファイル IO のブロックサイズ(**) 12 blocks 512 バイトのブロックの確保数(**) * Windows では常に 0 となります。
stats_absolute_deviation	値の配列の絶対偏差を返す	float stats_absolute_deviation ( array $a )
stats_cdf_beta	ベータ分布用の CDF 関数。ベータ分布のパラメータのいずれかを、 その他のパラメータの値から計算する	float stats_cdf_beta ( float $par1 , float $par2 , float $par3 , int $which )	STATUS -- 0 if calculation completed correctly -I if input parameter number I is out of range 1 if answer appears to be lower than lowest search bound 2 if answer appears to be higher than greatest search bound 3 if P + Q .ne. 1 4 if X + Y .ne. 1
stats_cdf_binomial	二項分布のパラメータのいずれかを、その他のパラメータの値から計算する	float stats_cdf_binomial ( float $par1 , float $par2 , float $par3 , int $which )
stats_cdf_cauchy	未ドキュメント化	float stats_cdf_cauchy ( float $par1 , float $par2 , float $par3 , int $which )
stats_cdf_chisquare	カイ二乗分布のパラメータのいずれかを、その他のパラメータの値から計算する	float stats_cdf_chisquare ( float $par1 , float $par2 , int $which )
stats_cdf_exponential	未ドキュメント化	float stats_cdf_exponential ( float $par1 , float $par2 , int $which )
stats_cdf_f	F 分布のパラメータのいずれかを、その他のパラメータの値から計算する	float stats_cdf_f ( float $par1 , float $par2 , float $par3 , int $which )
stats_cdf_gamma	ガンマ分布のパラメータのいずれかを、その他のパラメータの値から計算する	float stats_cdf_gamma ( float $par1 , float $par2 , float $par3 , int $which )
stats_cdf_laplace	未ドキュメント化	float stats_cdf_laplace ( float $par1 , float $par2 , float $par3 , int $which )
stats_cdf_logistic	未ドキュメント化	float stats_cdf_logistic ( float $par1 , float $par2 , float $par3 , int $which )
stats_cdf_negative_binomial	負の二項分布のパラメータのいずれかを、その他のパラメータの値から計算する	float stats_cdf_negative_binomial ( float $par1 , float $par2 , float $par3 , int $which )
stats_cdf_noncentral_chisquare	非心カイ二乗分布のパラメータのいずれかを、その他のパラメータの値から計算する	float stats_cdf_noncentral_chisquare ( float $par1 , float $par2 , float $par3 , int $which )
stats_cdf_noncentral_f	非心 F 分布のパラメータのいずれかを、その他のパラメータの値から計算する	float stats_cdf_noncentral_f ( float $par1 , float $par2 , float $par3 , float $par4 , int $which )
stats_cdf_poisson	ポアソン分布のパラメータのいずれかを、その他のパラメータの値から計算する	float stats_cdf_poisson ( float $par1 , float $par2 , int $which )
stats_cdf_t	T 分布のパラメータのいずれかを、その他のパラメータの値から計算する	float stats_cdf_t ( float $par1 , float $par2 , int $which )
stats_cdf_uniform	未ドキュメント化	float stats_cdf_uniform ( float $par1 , float $par2 , float $par3 , int $which )
stats_cdf_weibull	未ドキュメント化	float stats_cdf_weibull ( float $par1 , float $par2 , float $par3 , int $which )
stats_covariance	ふたつのデータセットの共分散を計算する	float stats_covariance ( array $a , array $b )
stats_den_uniform	未ドキュメント化	float stats_den_uniform ( float $x , float $a , float $b )
stats_dens_beta	未ドキュメント化	float stats_dens_beta ( float $x , float $a , float $b )
stats_dens_cauchy	未ドキュメント化	float stats_dens_cauchy ( float $x , float $ave , float $stdev )
stats_dens_chisquare	未ドキュメント化	float stats_dens_chisquare ( float $x , float $dfr )
stats_dens_exponential	未ドキュメント化	float stats_dens_exponential ( float $x , float $scale )
stats_dens_f		float stats_dens_f ( float $x , float $dfr1 , float $dfr2 )
stats_dens_gamma	未ドキュメント化	float stats_dens_gamma ( float $x , float $shape , float $scale )
stats_dens_laplace	未ドキュメント化	float stats_dens_laplace ( float $x , float $ave , float $stdev )
stats_dens_logistic	未ドキュメント化	float stats_dens_logistic ( float $x , float $ave , float $stdev )
stats_dens_negative_binomial	未ドキュメント化	float stats_dens_negative_binomial ( float $x , float $n , float $pi )
stats_dens_normal	未ドキュメント化	float stats_dens_normal ( float $x , float $ave , float $stdev )
stats_dens_pmf_binomial	未ドキュメント化	float stats_dens_pmf_binomial ( float $x , float $n , float $pi )
stats_dens_pmf_hypergeometric		float stats_dens_pmf_hypergeometric ( float $n1 , float $n2 , float $N1 , float $N2 )
stats_dens_pmf_poisson	未ドキュメント化	float stats_dens_pmf_poisson ( float $x , float $lb )
stats_dens_t	未ドキュメント化	float stats_dens_t ( float $x , float $dfr )
stats_dens_weibull	未ドキュメント化	float stats_dens_weibull ( float $x , float $a , float $b )
stats_harmonic_mean	値の配列の調和平均を返す	number stats_harmonic_mean ( array $a )
stats_kurtosis	配列内のデータの尖度を計算する	float stats_kurtosis ( array $a )
stats_rand_gen_beta	無作為な値を生成する	float stats_rand_gen_beta ( float $a , float $b )
stats_rand_gen_chisquare	自由度 "df" の乱数で表されるカイ二乗分布から、無作為な値を返す	float stats_rand_gen_chisquare ( float $df )
stats_rand_gen_exponential	平均値 "av" の指数分布から、無作為な値を返す	float stats_rand_gen_exponential ( float $av )
stats_rand_gen_f	無作為な値を返す	float stats_rand_gen_f ( float $dfn , float $dfd )
stats_rand_gen_funiform	low (それ自身は含まない) と high (それ自身は含まない) の間の一様な浮動小数点数値を生成する	float stats_rand_gen_funiform ( float $low , float $high )
stats_rand_gen_gamma	ガンマ分布から無作為な値を生成する	float stats_rand_gen_gamma ( float $a , float $r )
stats_rand_gen_ibinomial_negative	負の二項分布から無作為な値を生成する。引数: n - 無作為な値を生成するために行う負の二項分布の試行回数 (n > 0)、p - 事象の発生する確率 (0 < p < 1))	int stats_rand_gen_ibinomial_negative ( int $n , float $p )
stats_rand_gen_ibinomial	二項分布から無作為な値を生成する。二項分布の試行回数を "n" (n >= 0)、各試行で事象の発生する確率を "pp" ([0;1]) とし、BTPE アルゴリズムを使用する	int stats_rand_gen_ibinomial ( int $n , float $pp )
stats_rand_gen_int	1 から 2147483562 までの間の無作為な整数値を生成する	int stats_rand_gen_int ( void )
stats_rand_gen_ipoisson	平均 "mu" (mu >= 0.0) のポアソン分布から無作為な値を生成する	int stats_rand_gen_ipoisson ( float $mu )
stats_rand_gen_iuniform	LOW (それ自身を含む) と HIGH (それ自身を含む) の間の一様分布から整数値を生成する	int stats_rand_gen_iuniform ( int $low , int $high )
stats_rand_gen_noncenral_chisquare	自由度 "df"、非心母数 "xnonc" の非心カイ二乗分布から無作為な値を生成する。 d は >= 1.0、xnonc は >= 0.0 でなければならない	float stats_rand_gen_noncenral_chisquare ( float $df , float $xnonc )
stats_rand_gen_noncentral_f	分子の自由度が "dfn"、分母の自由度が "dfd"、非心母数が "xnonc" の非心 F (分散比) 分布から、無作為な値を返す。 非心カイ二乗変量の分子とカイ二乗変量の分母の比を直接生成する	float stats_rand_gen_noncentral_f ( float $dfn , float $dfd , float $xnonc )
stats_rand_gen_noncentral_t	非心 T 分布から無作為な値を生成する	float stats_rand_gen_noncentral_t ( float $df , float $xnonc )
stats_rand_gen_normal	mean、av および標準偏差 sd (sd >= 0) によって表される正規分布から無作為な値を生成する。 Method : Renames SNORM from TOMS as slightly modified by BWB to use RANF instead of SUNIF.	float stats_rand_gen_normal ( float $av , float $sd )
stats_rand_gen_t	T 分布から無作為な値を生成する	float stats_rand_gen_t ( float $df )
stats_rand_get_seeds	未ドキュメント化	array stats_rand_get_seeds ( void )
stats_rand_phrase_to_seeds	乱数ジェネレータ用のふたつのシードを生成する	array stats_rand_phrase_to_seeds ( string $phrase )
stats_rand_ranf	0 から 1 (区間の両端は含まない) までの一様分布から、 現在のジェネレータを使用して無作為な浮動小数点数値を返す	float stats_rand_ranf ( void )
stats_rand_setall	未ドキュメント化	void stats_rand_setall ( int $iseed1 , int $iseed2 )
stats_skew	配列内のデータの歪度を計算する	float stats_skew ( array $a )
stats_standard_deviation	標準偏差を返す	float stats_standard_deviation ( array $a [, bool $sample = false ] )
stats_stat_binomial_coef	未ドキュメント化	float stats_stat_binomial_coef ( int $x , int $n )
stats_stat_correlation	未ドキュメント化	float stats_stat_correlation ( array $arr1 , array $arr2 )
stats_stat_gennch	未ドキュメント化	float stats_stat_gennch ( int $n )
stats_stat_independent_t	未ドキュメント化	float stats_stat_independent_t ( array $arr1 , array $arr2 )
stats_stat_innerproduct		float stats_stat_innerproduct ( array $arr1 , array $arr2 )
stats_stat_noncentral_t	非心 t 分布のパラメータのいずれかを、その他のパラメータの値から計算する	float stats_stat_noncentral_t ( float $par1 , float $par2 , float $par3 , int $which )
stats_stat_paired_t	未ドキュメント化	float stats_stat_paired_t ( array $arr1 , array $arr2 )
stats_stat_percentile	未ドキュメント化	float stats_stat_percentile ( float $df , float $xnonc )
stats_stat_powersum	未ドキュメント化	float stats_stat_powersum ( array $arr , float $power )
stats_variance	母分散を返す	float stats_variance ( array $a [, bool $sample = false ] )
stomp_connect_error	Returns a string description of the last connect error	string stomp_connect_error ( void )	A string that describes the error, or NULL if no error occurred.
stomp_version	Gets the current stomp extension version	string stomp_version ( void )	It returns the current stomp extension version
str_getcsv	CSV 文字列をパースして配列に格納する	array str_getcsv ( string $input [, string $delimiter = ',' [, string $enclosure = '"' [, string $escape = '\\' ]]] )	読み込んだフィールドの内容を配列で返します。
str_ireplace	大文字小文字を区別しない str_replace()	mixed str_ireplace ( mixed $search , mixed $replace , mixed $subject [, int &$count ] )	置換した文字列あるいは配列を返します。
str_pad	文字列を固定長の他の文字列で埋める	string str_pad ( string $input , int $pad_length [, string $pad_string = " " [, int $pad_type = STR_PAD_RIGHT ]] )	埋めた後の文字列を返します。
str_repeat	文字列を反復する	string str_repeat ( string $input , int $multiplier )	繰り返した文字列を返します。
str_replace	検索文字列に一致したすべての文字列を置換する	mixed str_replace ( mixed $search , mixed $replace , mixed $subject [, int &$count ] )	この関数は、置換後の文字列あるいは配列を返します。
str_rot13	文字列に rot13 変換を行う	string str_rot13 ( string $str )	指定した文字列を ROT13 変換した結果を返します。
str_shuffle	文字列をランダムにシャッフルする	string str_shuffle ( string $str )	シャッフルされた文字列を返します。
str_split	文字列を配列に変換する	array str_split ( string $string [, int $split_length = 1 ] )	オプションのパラメータ split_length が指定されている場合、 返される配列の各要素は、split_length の長さとなります。それ以外の場合、1 文字ずつ分割された配列となります。
str_word_count	文字列に使用されている単語についての情報を返す	mixed str_word_count ( string $string [, int $format = 0 [, string $charlist ]] )	選択した format に応じて、配列あるいは整数を返します。
strcasecmp	大文字小文字を区別しないバイナリセーフな文字列比較を行う	int strcasecmp ( string $str1 , string $str2 )	str1 が str2 より小さい場合は負、str1 が str2 より大きい場合は正、等しい場合は 0 を返します。
strchr	strstr() のエイリアス
strcmp	バイナリセーフな文字列比較	int strcmp ( string $str1 , string $str2 )	str1 が str2 よりも小さければ < 0 を、str1が str2よりも大きければ > 0 を、 等しければ 0 を返します。
strcoll	ロケールに基づく文字列比較	int strcoll ( string $str1 , string $str2 )	str1 が str2 より小さい場合に 0 未満の値、str1 が str2 より大きい場合に 0 より大きな値、 両者が等しい場合に 0 を返します。
strcspn	マスクにマッチしない最初のセグメントの長さを返す	int strcspn ( string $str1 , string $str2 [, int $start [, int $length ]] )	セグメントの長さを返します。
stream_bucket_append	bucket を brigade に追加する	void stream_bucket_append ( resource $brigade , resource $bucket )
stream_bucket_make_writeable	操作する brigade から bucket オブジェクトを返す	object stream_bucket_make_writeable ( resource $brigade )
stream_bucket_new	現在のストリームで使用する新しい bucket を作成する	object stream_bucket_new ( resource $stream , string $buffer )
stream_bucket_prepend	bucket を brigade の先頭に追加する	void stream_bucket_prepend ( resource $brigade , resource $bucket )	値を返しません。
stream_context_create	ストリームコンテキストを作成する	resource stream_context_create ([ array $options [, array $params ]] )	ストリームコンテキストリソースを返します。
stream_context_get_default	デフォルトのストリームコンテキストを取得する	resource stream_context_get_default ([ array $options ] )	ストリームコンテキストリソースを返します。
stream_context_get_options	ストリーム / ラッパー / コンテキストに設定されているオプションを取得する	array stream_context_get_options ( resource $stream_or_context )	オプションを連想配列で返します。
stream_context_get_params	コンテキストのパラメータを取得する	array stream_context_get_params ( resource $stream_or_context )	すべてのコンテキストオプションおよびパラメータを含む連想配列を返します。
stream_context_set_default	デフォルトのストリームコンテキストを設定する	resource stream_context_set_default ( array $options )	デフォルトのストリームコンテキストを返します。
stream_context_set_option	ストリーム / ラッパー / コンテキストのオプションを設定する	bool stream_context_set_option ( resource $stream_or_context , string $wrapper , string $option , mixed $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
stream_context_set_params	ストリーム / ラッパー / コンテキストのパラメータを設定する	bool stream_context_set_params ( resource $stream_or_context , array $params )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
stream_copy_to_stream	データをあるストリームから別のストリームにコピーする	int stream_copy_to_stream ( resource $source , resource $dest [, int $maxlength = -1 [, int $offset = 0 ]] )	コピーされたバイト数を返します。
stream_encoding	ストリームのエンコード用の文字セットを設定する	bool stream_encoding ( resource $stream [, string $encoding ] )
stream_filter_append	ストリームにフィルタを付加する	resource stream_filter_append ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )	リソースを返します。 このリソースは、 stream_filter_remove() をコールする際にこのフィルタインスタンスを参照するために使用可能です。
stream_filter_prepend	フィルタをストリームに付加する	resource stream_filter_prepend ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )	リソースを返します。このリソースは stream_filter_remove() のコール時にこの フィルタのインスタンスを指定するために使用可能です。
stream_filter_register	ユーザー定義のストリームフィルタを登録する	bool stream_filter_register ( string $filtername , string $classname )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
stream_filter_remove	ストリームからフィルタを取り除く	bool stream_filter_remove ( resource $stream_filter )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
stream_get_contents	残りのストリームを文字列に読み込む	string stream_get_contents ( resource $handle [, int $maxlength = -1 [, int $offset = -1 ]] )	文字列を返します。失敗した場合に FALSE を返します。
stream_get_filters	登録されているフィルタのリストを取得する	array stream_get_filters ( void )	使用可能なすべてのストリームフィルタの名前を含む配列を返します。
stream_get_line	指定されたデリミタの位置までのデータを一行分としてストリームから読み込む	string stream_get_line ( resource $handle , int $length [, string $ending ] )	最大 length バイトの、 handle で指定されたリソースから読み込んだデータを返します。
stream_get_meta_data	ヘッダーあるいはメタデータをストリームまたはファイルポインタから取得する	array stream_get_meta_data ( resource $stream )	結果の配列は次のような項目を含みます。
stream_get_transports	登録されたソケットのトランスポートの一覧を取得する	array stream_get_transports ( void )	ソケットのトランスポート名の配列を返します。
stream_get_wrappers	登録されているストリームのラッパーのリストを取得する	array stream_get_wrappers ( void )	スクリプトを走らせているシステム上で使うことのできるすべてのストリーム ラッパーの名前を配列の形で返します。
stream_is_local	ローカルストリームかどうかを調べる	bool stream_is_local ( mixed $stream_or_url )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
stream_notification_callback	notification コンテキストパラメータ用のコールバック関数	void stream_notification_callback ( int $notification_code , int $severity , string $message , int $message_code , int $bytes_transferred , int $bytes_max )	値を返しません。
stream_register_wrapper	stream_wrapper_register() のエイリアス
stream_resolve_include_path	インクルードパスに対してファイル名を解決する	string stream_resolve_include_path ( string $filename )	解決したファイル名を含む文字列を返します。失敗した場合に FALSE を返します。
stream_select	select() システムコールと同等の操作を、 ストリームの配列に対して tv_sec と tv_usec で指定されたタイムアウト時間をもって行う	int stream_select ( array &$read , array &$write , array &$except , int $tv_sec [, int $tv_usec = 0 ] )	成功した場合 stream_select() は、変更された 配列に何個のストリームリソースが格納されたかを示す数を返します。 もしタイムアウトの時間内に何も規定された事象が起こらなかった場合は 0 になることもあります。エラーの際は FALSE を返し、警告を発生させます （システムコールが別のシグナルによって中断された場合などに起こりえます）。
stream_set_blocking	ストリームのブロックモードを有効にする / 解除する	bool stream_set_blocking ( resource $stream , int $mode )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
stream_set_chunk_size	ストリームのチャンクサイズを設定する	int stream_set_chunk_size ( resource $fp , int $chunk_size )	成功した場合に、変更前の設定値を返します。
stream_set_read_buffer	指定したストリームのファイル読み込みバッファリングを有効にする	int stream_set_read_buffer ( resource $stream , int $buffer )	成功時に 0 を、要求通りに設定できなかった場合は EOF を返します。
stream_set_timeout	ストリームにタイムアウトを設定する	bool stream_set_timeout ( resource $stream , int $seconds [, int $microseconds = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
stream_set_write_buffer	指定されたストリームのファイル書き込みバッファリングを有効にする	int stream_set_write_buffer ( resource $stream , int $buffer )	成功時に 0 を、要求通りに設定できなかった場合は EOF を返します。
stream_socket_accept	stream_socket_server() で作られたソケットの接続を受け入れる	resource stream_socket_accept ( resource $server_socket [, float $timeout = ini_get("default_socket_timeout") [, string &$peername ]] )	受け付けたソケット接続へのストリームを返します。失敗した場合に FALSE を返します。
stream_socket_client	インターネットドメインまたは Unix ドメインのソケット接続を開く	resource stream_socket_client ( string $remote_socket [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") [, int $flags = STREAM_CLIENT_CONNECT [, resource $context ]]]]] )	成功した場合に、 fgets() , fgetss() , fwrite() , fclose() , feof() といった、ファイル関数と共に使うことのできるストリームリソースを返します。
stream_socket_enable_crypto	接続済みのソケットについて暗号化の on/off を切り替える	mixed stream_socket_enable_crypto ( resource $stream , bool $enable [, int $crypto_type [, resource $session_stream ]] )	成功した場合に TRUE、ネゴシエーションに失敗した場合に FALSE、 十分なデータがないために再試行が必要な場合（非ブロックモード時のみ） に 0 を返します。
stream_socket_get_name	ローカルまたはリモートのソケットの名前を取得する	string stream_socket_get_name ( resource $handle , bool $want_peer )	ソケットの名前を返します。
stream_socket_pair	接続された、区別できないソケットストリームの組を作成する	array stream_socket_pair ( int $domain , int $type , int $protocol )	成功した場合に 2 つのソケットリソースの配列、失敗した場合に FALSE を返します。
stream_socket_recvfrom	接続されているかどうかにかかわらず、ソケットからのデータを受信する	string stream_socket_recvfrom ( resource $socket , int $length [, int $flags = 0 [, string &$address ]] )	読み込んだデータを文字列で返します。
stream_socket_sendto	接続されているかどうかにかかわらず、ソケットにデータを送信する	int stream_socket_sendto ( resource $socket , string $data [, int $flags = 0 [, string $address ]] )	結果コードを整数値で返します。
stream_socket_server	インターネットドメインまたは Unix ドメインのサーバーソケットを作成する	resource stream_socket_server ( string $local_socket [, int &$errno [, string &$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context ]]]] )	作成したストリーム、あるいはエラー時に FALSE を返します。
stream_socket_shutdown	全二重接続を終了する	bool stream_socket_shutdown ( resource $stream , int $how )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
stream_supports_lock	ストリームがロックをサポートしているかどうかを調べる	bool stream_supports_lock ( resource $stream )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
stream_wrapper_register	PHP のクラスとして実装された URL ラッパーを登録する	bool stream_wrapper_register ( string $protocol , string $classname [, int $flags = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
stream_wrapper_restore	事前に登録を解除された組み込みラッパーを復元する	bool stream_wrapper_restore ( string $protocol )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
stream_wrapper_unregister	URL ラッパーの登録を解除する	bool stream_wrapper_unregister ( string $protocol )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
strftime	ロケールの設定に基づいてローカルな日付・時間をフォーマットする	string strftime ( string $format [, int $timestamp = time() ] )	指定した timestamp または timestamp が指定されていない場合に現在のローカル時間を用いて、 指定したフォーマット文字列に基づき文字列をフォーマットして返します。 月および曜日の名前、およびその他の言語依存の文字列は、 setlocale() で設定された現在のロケールを尊重して表示されます。
strip_tags	文字列から HTML および PHP タグを取り除く	string strip_tags ( string $str [, string $allowable_tags ] )	タグを除去した文字列を返します。
stripcslashes	addcslashes() でクォートされた文字列をアンクォートする	string stripcslashes ( string $str )	元に戻した文字列を返します。
stripos	大文字小文字を区別せずに文字列が最初に現れる位置を探す	int stripos ( string $haystack , string $needle [, int $offset = 0 ] )	needle が見つかった位置を、 haystack 文字列の先頭 (offset の値とは無関係) からの相対位置で返します。 文字列の開始位置は 0 であり、1 ではないことに注意しましょう。
stripslashes	クォートされた文字列のクォート部分を取り除く	string stripslashes ( string $str )	バックスラッシュが取り除かれた文字列を返します(\' が ' になるなど)。 2 つ並んだバックスラッシュ (\\) は 1 つのバックスラッシュ (\) になります。
stristr	大文字小文字を区別しない strstr()	string stristr ( string $haystack , mixed $needle [, bool $before_needle = false ] )	マッチした部分文字列を返します。needle が見つからない場合は FALSE を返します。
strlen	文字列の長さを得る	int strlen ( string $string )	成功した場合に string の長さ、 string が空の文字列だった場合に 0 を返します。
strnatcasecmp	"自然順"アルゴリズムにより大文字小文字を区別しない文字列比較を行う	int strnatcasecmp ( string $str1 , string $str2 )	他の文字列比較関数と同様に、この関数は、 str1がstr2 より小さい場合に < 0、str1が str2より大きい場合に > 0 、等しい場合に 0 を返します。
strnatcmp	"自然順"アルゴリズムにより文字列比較を行う	int strnatcmp ( string $str1 , string $str2 )	他の文字列比較関数と同様に、この関数は、 str1 が str2 より小さいに場合に < 0、str1 が str2 より大きい場合に > 0 、等しい場合に 0 を返します。
strncasecmp	バイナリセーフで大文字小文字を区別しない文字列比較を、最初の n 文字について行う	int strncasecmp ( string $str1 , string $str2 , int $len )	str1 が str2 より短い場合に < 0 を返し、str1 が str2 より大きい場合に > 0、等しい場合に 0 を返します。
strncmp	最初の n 文字についてバイナリセーフな文字列比較を行う	int strncmp ( string $str1 , string $str2 , int $len )	str1 が str2 より小さい場合に < 0、str1 が str2 より大きい場合に > 0 、等しい場合に 0 を返します。
strpbrk	文字列の中から任意の文字を探す	string strpbrk ( string $haystack , string $char_list )	見つかった文字から始まる文字列、あるいは見つからなかった場合に FALSE を返します。
strpos	文字列内の部分文字列が最初に現れる場所を見つける	mixed strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )	needle が見つかった位置を、 haystack 文字列の先頭 (offset の値とは無関係) からの相対位置で返します。 文字列の開始位置は 0 であり、1 ではないことに注意しましょう。
strptime	strftime() が生成した日付/時刻をパースする	array strptime ( string $date , string $format )	成功した場合は配列、失敗した場合に FALSE を返します。
strrchr	文字列中に文字が最後に現れる場所を取得する	string strrchr ( string $haystack , mixed $needle )	この関数は、部分文字列を返します。 needle が見つからない場合は FALSE を返します。
strrev	文字列を逆順にする	string strrev ( string $string )	逆順にした文字列を返します。
strripos	文字列中で、特定の(大文字小文字を区別しない)文字列が最後に現れた位置を探す	int strripos ( string $haystack , string $needle [, int $offset = 0 ] )	needle が見つかった位置を、 haystack 文字列の先頭 (offset の値とは無関係) からの相対位置で返します。 文字列の開始位置は 0 であり、1 ではないことに注意しましょう。
strrpos	文字列中に、ある部分文字列が最後に現れる場所を探す	int strrpos ( string $haystack , string $needle [, int $offset = 0 ] )	needle が見つかった位置を、 haystack 文字列の先頭 (offset の値とは無関係) からの相対位置で返します。 文字列の開始位置は 0 であり、1 ではないことに注意しましょう。
strspn	指定したマスク内に含まれる文字からなる文字列の最初のセグメントの長さを探す	int strspn ( string $subject , string $mask [, int $start [, int $length ]] )	subject の中で、全て mask の中の文字からなる最初のセグメントの長さを返します。
strstr	文字列が最初に現れる位置を見つける	string strstr ( string $haystack , mixed $needle [, bool $before_needle = false ] )	部分文字列を返します。 needle が見つからない場合は FALSE を返します。
strtok	文字列をトークンに分割する	string strtok ( string $str , string $token )	文字列トークンを返します。
strtolower	文字列を小文字にする	string strtolower ( string $str )	小文字に変換した文字列を返します。
strtotime	英文形式の日付を Unix タイムスタンプに変換する	int strtotime ( string $time [, int $now = time() ] )	成功時はタイムスタンプ、そうでなければ FALSE を返します。 PHP 5.1.0 以前ではこの関数は失敗時に -1 を返します。
strtoupper	文字列を大文字にする	string strtoupper ( string $string )	大文字にした文字列を返します。
strtr	文字の変換あるいは部分文字列の置換を行う	string strtr ( string $str , string $from , string $to )	変換後の文字列を返します。
strval	変数の文字列としての値を取得する	string strval ( mixed $var )	var の文字列値を返します。
substr_compare	指定した位置から指定した長さの 2 つの文字列について、バイナリ対応で比較する	int substr_compare ( string $main_str , string $str , int $offset [, int $length [, bool $case_insensitivity = false ]] )	main_str の offset 以降が str より小さい場合に負の数、 str より大きい場合に正の数、 等しい場合に 0 を返します。offset が main_str の長さ以上であるか、あるいは length が設定されていて 1 未満である場合、 substr_compare() は警告を表示して FALSE を返します。
substr_count	副文字列の出現回数を数える	int substr_count ( string $haystack , string $needle [, int $offset = 0 [, int $length ]] )	この関数は 整数 を返します。
substr_replace	文字列の一部を置換する	mixed substr_replace ( mixed $string , mixed $replacement , mixed $start [, mixed $length ] )	結果の文字列を返します。もし、string が配列の場合、配列が返されます。
substr	文字列の一部分を返す	string substr ( string $string , int $start [, int $length ] )	文字列の一部を返します。失敗した場合に FALSE を返します。あるいは空文字列を返します。
svn_add	作業ディレクトリ内のアイテムの追加を予約する	bool svn_add ( string $path [, bool $recursive = true [, bool $force = false ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
svn_auth_get_parameter	認証パラメータを取得する	string svn_auth_get_parameter ( string $key )	key の値を文字列で返します。 パラメータが存在しない場合は NULL を返します。
svn_auth_set_parameter	認証パラメータを設定する	void svn_auth_set_parameter ( string $key , string $value )	値を返しません。
svn_blame	ファイルの SVN blame を取得する	array svn_blame ( string $repository_url [, int $revision_no = SVN_REVISION_HEAD ] )	SVN blame 情報を配列で返します。行ごとに区切られ、 リビジョン番号と行番号、コードの行、作者、日付が含まれます。
svn_cat	リポジトリ内のファイルの内容を返す	string svn_cat ( string $repos_url [, int $revision_no ] )	成功した場合にアイテムの内容を表す文字列、失敗した場合に FALSE を返します。
svn_checkout	リポジトリから作業コピーをチェックアウトする	bool svn_checkout ( string $repos , string $targetpath [, int $revision [, int $flags = 0 ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
svn_cleanup	作業コピーディレクトリを再帰的にクリーンアップし、中途半端な操作を解消してロックを削除する	bool svn_cleanup ( string $workingdir )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
svn_client_version	SVN クライアントライブラリのバージョンを返す	string svn_client_version ( void )	バージョン番号を表す文字列を返します。通常は x.y.z 形式となります。
svn_commit	変更内容を、ローカルの作業コピーからリポジトリに送信する	array svn_commit ( string $log , array $targets [, bool $recursive = true ] )	以下のような形式の配列を返します。
svn_delete	作業コピーあるいはリポジトリからアイテムを削除する	bool svn_delete ( string $path [, bool $force = false ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
svn_diff	ふたつのパスの差分を再帰的に取得する	array svn_diff ( string $path1 , int $rev1 , string $path2 , int $rev2 )	ふたつのストリームの内容を含む配列のリストを返します。 最初のストリームが diff の出力で、もうひとつはエラー出力です。 このストリームを読み込むには fread() を使用します。エラーが発生した場合は FALSE あるいは NULL を返します。
svn_export	SVN ディレクトリの内容をエクスポートする	bool svn_export ( string $frompath , string $topath [, bool $working_copy = true [, int $revision_no = -1 ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
svn_fs_abort_txn	トランザクションを中断し、成功したら true、失敗したら false を返す	bool svn_fs_abort_txn ( resource $txn )
svn_fs_apply_text	置換に使用するストリームを作成して返す	resource svn_fs_apply_text ( resource $root , string $path )
svn_fs_begin_txn2	新しいトランザクションを作成する	resource svn_fs_begin_txn2 ( resource $repos , int $rev )
svn_fs_change_node_prop	成功したら true、失敗したら false を返す	bool svn_fs_change_node_prop ( resource $root , string $path , string $name , string $value )
svn_fs_check_path	指定したリポジトリの fsroot パスにどんなアイテムが存在するかを調べる	int svn_fs_check_path ( resource $fsroot , string $path )
svn_fs_contents_changed	コンテンツが変更されている場合に true、されていない場合に false を返す	bool svn_fs_contents_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 )
svn_fs_copy	ファイルやディレクトリをコピーし、成功したら true、失敗したら false を返す	bool svn_fs_copy ( resource $from_root , string $from_path , resource $to_root , string $to_path )
svn_fs_delete	ファイルやディレクトリを削除し、成功したら true、失敗したら false を返す	bool svn_fs_delete ( resource $root , string $path )
svn_fs_dir_entries	指定したパスのディレクトリを列挙し、ディレクトリ名とファイルタイプのハッシュを返す	array svn_fs_dir_entries ( resource $fsroot , string $path )
svn_fs_file_contents	指定したバージョンの fs から、ファイルの中身を読み込むためのストリームを返す	resource svn_fs_file_contents ( resource $fsroot , string $path )
svn_fs_file_length	指定したバージョンの fs から、ファイルの長さを返す	int svn_fs_file_length ( resource $fsroot , string $path )
svn_fs_is_dir	ディレクトリを指すパスである場合に true、それ以外の場合に false を返す	bool svn_fs_is_dir ( resource $root , string $path )
svn_fs_is_file	ファイルを指すパスである場合に true、それ以外の場合に false を返す	bool svn_fs_is_file ( resource $root , string $path )
svn_fs_make_dir	空のディレクトリを作成し、成功したら true、失敗したら false を返す	bool svn_fs_make_dir ( resource $root , string $path )
svn_fs_make_file	空のファイルを作成し、成功したら true、失敗したら false を返す	bool svn_fs_make_file ( resource $root , string $path )
svn_fs_node_created_rev	fsroot 配下のパスが作成されたリビジョンを返す	int svn_fs_node_created_rev ( resource $fsroot , string $path )
svn_fs_node_prop	ノードのプロパティの値を返す	string svn_fs_node_prop ( resource $fsroot , string $path , string $propname )
svn_fs_props_changed	プロパティが変更されている場合に true、それ以外の場合に false を返す	bool svn_fs_props_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 )
svn_fs_revision_prop	指定したプロパティの値を取得する	string svn_fs_revision_prop ( resource $fs , int $revnum , string $propname )
svn_fs_revision_root	リポジトリのルートの指定したバージョンのハンドルを取得する	resource svn_fs_revision_root ( resource $fs , int $revnum )
svn_fs_txn_root	トランザクションのルートを作成して返す	resource svn_fs_txn_root ( resource $txn )
svn_fs_youngest_rev	ファイルシステム内で一番若いリビジョン番号を返す	int svn_fs_youngest_rev ( resource $fs )
svn_import	バージョン管理されていないパスをリポジトリにインポートする	bool svn_import ( string $path , string $url , bool $nonrecursive )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
svn_log	指定したリポジトリ URL のコミットログメッセージを返す	array svn_log ( string $repos_url [, int $start_revision [, int $end_revision [, int $limit = 0 [, int $flags = SVN_DISCOVER_CHANGED_PATHS | SVN_STOP_ON_COPY ]]]] )	成功した場合は、この関数は次のような構造の配列を返します。 [0] => Array (最新のリポジトリから順に並びます) ( [rev] => リビジョン番号 [author] => コミットした人の名前 [msg] => ログメッセージ [date] => ISO 8601 形式、つまり date('c') と同じ形式の日付文字列 [paths] => Array (変更したファイルについての説明) ( [0] => Array ( [action] => 変更の種類を表す文字 [path] => 変更されたファイルの絶対パス ) [1] => ... ) ) [1] => ...
svn_ls	指定したリポジトリ URL のディレクトリ内の一覧を返す (オプションでリビジョン番号も指定可能)	array svn_ls ( string $repos_url [, int $revision_no = SVN_REVISION_HEAD [, bool $recurse = false [, bool $peg = false ]]] )	成功した場合は、この関数は次のような構造の配列を返します。 [0] => Array ( [created_rev] => 最後に変更されたリビジョン番号 [last_author] => 最後に変更した人の名前 [size] => ファイルのバイト数 [time] => 最終更新日時を、その古さによって 'M d H:i' あるいは 'M d Y' のいずれかの形式で表したもの [time_t] => 最終更新日時の unix タイムスタンプ [name] => ファイル/ディレクトリの名前 [type] => 'file' あるいは 'dir' のいずれか ) [1] => ...
svn_mkdir	作業コピーあるいはリポジトリ内にディレクトリを作成する	bool svn_mkdir ( string $path [, string $log_message ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
svn_repos_create	新しい subversion リポジトリを指定したパスに作成する	resource svn_repos_create ( string $path [, array $config [, array $fsconfig ]] )
svn_repos_fs_begin_txn_for_commit	新しいトランザクションを作成する	resource svn_repos_fs_begin_txn_for_commit ( resource $repos , int $rev , string $author , string $log_msg )
svn_repos_fs_commit_txn	トランザクションをコミットし、新しいリビジョンを返す	int svn_repos_fs_commit_txn ( resource $txn )
svn_repos_fs	リポジトリ用に、ファイルシステム上のハンドルを取得する	resource svn_repos_fs ( resource $repos )
svn_repos_hotcopy	repospath にあるリポジトリのホットコピーを作成し、destpath にコピーする	bool svn_repos_hotcopy ( string $repospath , string $destpath , bool $cleanlogs )
svn_repos_open	リポジトリの共有ロックをオープンする	resource svn_repos_open ( string $path )
svn_repos_recover	指定したパスのリポジトリのリカバリ処理を実行する	bool svn_repos_recover ( string $path )
svn_revert	作業コピーへの変更を取り消す	bool svn_revert ( string $path [, bool $recursive = false ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
svn_status	作業コピー内のファイルやディレクトリの状態を返す	array svn_status ( string $path [, int $flags = 0 ] )	数値添字の配列を返します。配列の各要素は連想配列となり、 リポジトリ内のアイテムの状態の詳細を表します。
svn_update	作業コピーをアップデートする	int svn_update ( string $path [, int $revno = SVN_REVISION_HEAD [, bool $recurse = true ]] )	成功した場合に新しいリビジョン番号、失敗した場合に FALSE を返します。
swf_actiongeturl	Shockwave Flash ムービーから URL を得る	void swf_actiongeturl ( string $url , string $target )	値を返しません。
swf_actiongotoframe	フレームを実行した後、停止する	void swf_actiongotoframe ( int $framenumber )	値を返しません。
swf_actiongotolabel	指定したラベルを有するフレームを表示する	void swf_actiongotolabel ( string $label )	値を返しません。
swf_actionnextframe	フレームを一つ進める	void swf_actionnextframe ( void )	値を返しません。
swf_actionplay	現在のフレームから flash ムービーの実行を開始する	void swf_actionplay ( void )	値を返しません。
swf_actionprevframe	フレームを一つ戻す	void swf_actionprevframe ( void )	値を返しません。
swf_actionsettarget	アクションのコンテキストを設定する	void swf_actionsettarget ( string $target )	値を返しません。
swf_actionstop	現在のフレームで flash ムービーの実行を終了する	void swf_actionstop ( void )	値を返しません。
swf_actiontogglequality	低品質/高品質を切り替える	void swf_actiontogglequality ( void )	値を返しません。
swf_actionwaitforframe	フレームがロードされていない場合にアクションをスキップする	void swf_actionwaitforframe ( int $framenumber , int $skipcount )	値を返しません。
swf_addbuttonrecord	現在のボタンの位置、外観、アクティブエリアを制御する	void swf_addbuttonrecord ( int $states , int $shapeid , int $depth )	値を返しません。
swf_addcolor	グローバル加算色を、指定した rbga 値に設定する	void swf_addcolor ( float $r , float $g , float $b , float $a )	値を返しません。
swf_closefile	現在の Shockwave Flash ファイルを閉じる	void swf_closefile ([ int $return_file ] )	値を返しません。
swf_definebitmap	ビットマップを定義する	void swf_definebitmap ( int $objid , string $image_name )	値を返しません。
swf_definefont	フォントを定義する	void swf_definefont ( int $fontid , string $fontname )	値を返しません。
swf_defineline	線を定義する	void swf_defineline ( int $objid , float $x1 , float $y1 , float $x2 , float $y2 , float $width )	値を返しません。
swf_definepoly	多角形を定義する	void swf_definepoly ( int $objid , array $coords , int $npoints , float $width )	値を返しません。
swf_definerect	長方形を定義する	void swf_definerect ( int $objid , float $x1 , float $y1 , float $x2 , float $y2 , float $width )	値を返しません。
swf_definetext	テキスト文字列を定義する	void swf_definetext ( int $objid , string $str , int $docenter )	値を返しません。
swf_endbutton	現在のボタンの定義を終了する	void swf_endbutton ( void )	値を返しません。
swf_enddoaction	現在のアクションを終了する	void swf_enddoaction ( void )	値を返しません。
swf_endshape	現在の形状の定義を完結する	void swf_endshape ( void )	値を返しません。
swf_endsymbol	シンボルの定義を終了する	void swf_endsymbol ( void )	値を返しません。
swf_fontsize	フォントの大きさを変更する	void swf_fontsize ( float $size )	値を返しません。
swf_fontslant	フォントの傾きを設定する	void swf_fontslant ( float $slant )	値を返しません。
swf_fonttracking	現在のフォントのトラッキングを設定する	void swf_fonttracking ( float $tracking )	値を返しません。
swf_getbitmapinfo	ビットマップに関する情報を得る	array swf_getbitmapinfo ( int $bitmapid )	以下の要素からなる配列を返します。 "size" - ビットマップのバイト単位の大きさ。 "width" - ビットマップのピクセル単位の幅。 "height" - ビットマップのピクセル単位の高さ。
swf_getfontinfo	フォントの情報を得る	array swf_getfontinfo ( void )	以下のパラメータを持つ連想配列を返します。 Aheight - 大文字 A のピクセル単位の高さ。 xheight - 小文字 x のピクセル単位の高さ。
swf_getframe	現在のフレームのフレーム番号を得る	int swf_getframe ( void )	現在のフレーム番号を整数値で返します。
swf_labelframe	現在のフレームにラベルを付ける	void swf_labelframe ( string $name )	値を返しません。
swf_lookat	視点変換を定義する	void swf_lookat ( float $view_x , float $view_y , float $view_z , float $reference_x , float $reference_y , float $reference_z , float $twist )	値を返しません。
swf_modifyobject	オブジェクトを修正する	void swf_modifyobject ( int $depth , int $how )	値を返しません。
swf_mulcolor	グローバル乗算色を指定した rbga 値に設定する	void swf_mulcolor ( float $r , float $g , float $b , float $a )	値を返しません。
swf_nextid	次の未使用のオブジェクト ID を返す	int swf_nextid ( void )	ID を表す整数値を返します。
swf_oncondition	アクションリストのトリガとして使用されるトランジションを定義する	void swf_oncondition ( int $transition )	値を返しません。
swf_openfile	新規に Shockwave Flash ファイルをオープンする	void swf_openfile ( string $filename , float $width , float $height , float $framerate , float $r , float $g , float $b )	値を返しません。
swf_ortho	現在のビューポートにおけるユーザー座標の直交マッピングを定義する	void swf_ortho ( float $xmin , float $xmax , float $ymin , float $ymax , float $zmin , float $zmax )	値を返しません。
swf_ortho2	ユーザー座標の二次元直交マッピングを現在のビューポイントに定義する	void swf_ortho2 ( float $xmin , float $xmax , float $ymin , float $ymax )	値を返しません。
swf_perspective	遠近法による投影変換を定義する	void swf_perspective ( float $fovy , float $aspect , float $near , float $far )	値を返しません。
swf_placeobject	オブジェクトを画面に配置する	void swf_placeobject ( int $objid , int $depth )	値を返しません。
swf_polarview	極座標で視点を定義する	void swf_polarview ( float $dist , float $azimuth , float $incidence , float $twist )	値を返しません。
swf_popmatrix	以前の変換行列を回復する	void swf_popmatrix ( void )	値を返しません。
swf_posround	オブジェクトを配置または移動する際の変換時の丸め処理を有効または無効にする	void swf_posround ( int $round )	値を返しません。
swf_pushmatrix	現在の変換行列をスタックに入れる	void swf_pushmatrix ( void )	値を返しません。
swf_removeobject	オブジェクトを削除する	void swf_removeobject ( int $depth )	値を返しません。
swf_rotate	現在の座標を回転する	void swf_rotate ( float $angle , string $axis )	値を返しません。
swf_scale	現在の変換をスケリーングする	void swf_scale ( float $x , float $y , float $z )	値を返しません。
swf_setfont	現在のフォントを変更する	void swf_setfont ( int $fontid )	値を返しません。
swf_setframe	指定したフレームに切替える	void swf_setframe ( int $framenumber )	値を返しません。
swf_shapearc	円弧を描画する	void swf_shapearc ( float $x , float $y , float $r , float $ang1 , float $ang2 )	値を返しません。
swf_shapecurveto	二点間に二次ベジエ曲線を描画する	void swf_shapecurveto ( float $x1 , float $y1 , float $x2 , float $y2 )	値を返しません。
swf_shapecurveto3	三次ベジエ曲線を描画する	void swf_shapecurveto3 ( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )	値を返しません。
swf_shapefillbitmapclip	現在の塗りつぶしモードをクリップ付きビットマップに設定する	void swf_shapefillbitmapclip ( int $bitmapid )	値を返しません。
swf_shapefillbitmaptile	現在の塗りつぶしモードをタイル状のビットマップに設定する	void swf_shapefillbitmaptile ( int $bitmapid )	値を返しません。
swf_shapefilloff	塗りつぶしをオフにする	void swf_shapefilloff ( void )	値を返しません。
swf_shapefillsolid	現在の塗りつぶし色を指定した色に設定する	void swf_shapefillsolid ( float $r , float $g , float $b , float $a )	値を返しません。
swf_shapelinesolid	現在の行のスタイルを設定する	void swf_shapelinesolid ( float $r , float $g , float $b , float $a , float $width )	値を返しません。
swf_shapelineto	線を描画する	void swf_shapelineto ( float $x , float $y )	値を返しません。
swf_shapemoveto	現在の位置を移動する	void swf_shapemoveto ( float $x , float $y )	値を返しません。
swf_showframe	現在のフレームを表示する	void swf_showframe ( void )	値を返しません。
swf_startbutton	ボタンの定義を開始する	void swf_startbutton ( int $objid , int $type )	値を返しません。
swf_startdoaction	現在のフレームのアクションリストの記述を開始する	void swf_startdoaction ( void )	値を返しません。
swf_startshape	複雑な形状を開始する	void swf_startshape ( int $objid )	値を返しません。
swf_startsymbol	シンボルを定義する	void swf_startsymbol ( int $objid )	値を返しません。
swf_textwidth	文字列の幅を得る	float swf_textwidth ( string $str )	文字列の幅を表す float 値を返します。
swf_translate	現在の座標軸を変換する	void swf_translate ( float $x , float $y , float $z )	値を返しません。
swf_viewport	描画を行う範囲を選択する	void swf_viewport ( float $xmin , float $xmax , float $ymin , float $ymax )	値を返しません。
sybase_affected_rows	直近のクエリで変更された行の数を得る	int sybase_affected_rows ([ resource $link_identifier ] )	変更された行数を整数値で返します。
sybase_close	Sybase 接続を閉じる	bool sybase_close ([ resource $link_identifier ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sybase_connect	Sybase サーバー接続をオープンする	resource sybase_connect ([ string $servername [, string $username [, string $password [, string $charset [, string $appname [, bool $new = false ]]]]]] )	成功した場合に正の Sybase リンク ID、失敗した場合に FALSE を返します。
sybase_data_seek	内部行ポインタを移動する	bool sybase_data_seek ( resource $result_identifier , int $row_number )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sybase_deadlock_retry_count	デッドロックの再試行回数を設定する	void sybase_deadlock_retry_count ( int $retry_count )	値を返しません。
sybase_fetch_array	行を配列として取り込む	array sybase_fetch_array ( resource $result )	取り込んだ行を表す配列を返します。もう行がない場合には FALSE を返します。
sybase_fetch_assoc	結果の行を連想配列として取得する	array sybase_fetch_assoc ( resource $result )	取得した行に対応する配列を返します。行がもうない場合には FALSE を返します。
sybase_fetch_field	結果からフィールド情報を取得する	object sybase_fetch_field ( resource $result [, int $field_offset = -1 ] )	フィールド情報を含むオブジェクトを返します。
sybase_fetch_object	行をオブジェクトとして取り込む	object sybase_fetch_object ( resource $result [, mixed $object ] )	取り込まれた行に対するプロパティを有するオブジェクトを返します。 また、行がもうない場合に FALSE を返します。
sybase_fetch_row	行を配列として取得する	array sybase_fetch_row ( resource $result )	取り込まれた行に対応する配列を返します。もう行がない場合は FALSE を返します。 各結果カラムは 0 から始まる配列オフセットに保持されます。
sybase_field_seek	フィールドオフセットを設定する	bool sybase_field_seek ( resource $result , int $field_offset )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sybase_free_result	結果メモリを開放する	bool sybase_free_result ( resource $result )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sybase_get_last_message	サーバーから直近のメッセージを返す	string sybase_get_last_message ( void )	メッセージを文字列で返します。
sybase_min_client_severity	クライアントの severity の最小値を設定する	void sybase_min_client_severity ( int $severity )	値を返しません。
sybase_min_error_severity	エラーの severity の最小値を設定する	void sybase_min_error_severity ( int $severity )	値を返しません。
sybase_min_message_severity	メッセージの severity の最小値を設定する	void sybase_min_message_severity ( int $severity )	値を返しません。
sybase_min_server_severity	サーバーの severity の最小値を設定する	void sybase_min_server_severity ( int $severity )	値を返しません。
sybase_num_fields	結果におけるフィールドの数を取得する	int sybase_num_fields ( resource $result )	フィールドの数を返します。
sybase_num_rows	結果における行の数を取得する	int sybase_num_rows ( resource $result )	結果セットの行の数を返します。
sybase_pconnect	Sybase の持続的な接続をオープンする	resource sybase_pconnect ([ string $servername [, string $username [, string $password [, string $charset [, string $appname ]]]]] )	成功時に正の Sybase 持続リンク ID を、エラー時に FALSE を返します。
sybase_query	Sybase クエリを送信する	mixed sybase_query ( string $query [, resource $link_identifier ] )	成功時に正の Sybase 結果 ID を、エラー時に FALSE を返します。 クエリは成功したが、結果としてカラムを何も返さなかった場合は TRUE を返します。
sybase_result	結果データを取得する	string sybase_result ( resource $result , int $row , mixed $field )	sybase_result() は、Sybase 結果セットからセルの内容を返します。
sybase_select_db	Sybase データベースを選択する	bool sybase_select_db ( string $database_name [, resource $link_identifier ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sybase_set_message_handler	サーバーでメッセージが発生した際にコールされるハンドラを指定する	bool sybase_set_message_handler ( callable $handler [, resource $link_identifier ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sybase_unbuffered_query	Sybase クエリを送信し、ブロックしない	resource sybase_unbuffered_query ( string $query , resource $link_identifier [, bool $store_result ] )	成功時に正の Sybase 結果 ID 、エラー時に FALSE を返します。
symlink	シンボリックリンクを作成する	bool symlink ( string $target , string $link )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
sys_get_temp_dir	一時ファイル用に使用されるディレクトリのパスを返す	string sys_get_temp_dir ( void )	一時ディレクトリのパスを返します。
sys_getloadavg	システムの平均負荷を取得する	array sys_getloadavg ( void )	(過去 1、5、15 分間の) 三つの値を array で返します。
syslog	システムログのメッセージを生成する	bool syslog ( int $priority , string $message )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
system	外部プログラムを実行し、出力を表示する	string system ( string $command [, int &$return_var ] )	成功時はコマンド出力の最後の行を返し、失敗時は FALSE を返します。
taint	文字列を汚染させる	bool taint ( string &$string [, string $... ] )	変換に成功したときに TURE を返します。 taint 拡張モジュールが有効になっていない場合は常に TRUE を返します。
tan	正接（タンジェント）	float tan ( float $arg )	arg のタンジェントを返します。
tanh	双曲線正接（ハイパボリックタンジェント）	float tanh ( float $arg )	arg のハイパボリックタンジェントを返します。
tcpwrap_check	tcpwrap のチェックを実行する	bool tcpwrap_check ( string $daemon , string $address [, string $user [, bool $nodns = false ]] )	アクセスが許可されている場合に TRUE 、それ以外の場合に FALSE を返します。
tempnam	一意なファイル名を生成する	string tempnam ( string $dir , string $prefix )	新しいテンポラリファイル名を返し、失敗した場合には FALSE を返します。
textdomain	デフォルトドメインを設定する	string textdomain ( string $text_domain )	成功すると、この関数はドメインを変更した後に現在のメッセージドメインを 返します。
tidy_access_count	指定したドキュメントについて発生したTidyアクセシビリティ警告の数を返す	int tidy_access_count ( tidy $object )	警告の数を返します。
tidy_config_count	指定したドキュメントについて発生した Tidy 設定エラーの数を返す	int tidy_config_count ( tidy $object )	エラーの数を返します。
tidy_error_count	指定したドキュメントについて発生した Tidy エラーの数を返す	int tidy_error_count ( tidy $object )	エラーの数を返します。
tidy_get_output	パースされた Tidy マークアップを表す文字列を返す	string tidy_get_output ( tidy $object )	修正された HTML を文字列で返します。
tidy_load_config	指定したエンコーディングで ASCII コードの Tidy 設定ファイルをロードする	void tidy_load_config ( string $filename , string $encoding )	値を返しません。
tidy_reset_config	Tidy の設定をデフォルト値に戻す	bool tidy_reset_config ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
tidy_save_config	現在の設定を名前が付けられたファイルに保存する	bool tidy_save_config ( string $filename )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
tidy_set_encoding	マークアップをパースする際の入力／出力エンコーディングを設定する	bool tidy_set_encoding ( string $encoding )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
tidy_setopt	指定した Tidy ドキュメントについての設定を更新する	bool tidy_setopt ( string $option , mixed $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
tidy_warning_count	指定したドキュメントについて発生した Tidy 警告の数を返す	int tidy_warning_count ( tidy $object )	警告の数を返します。
time_nanosleep	秒およびナノ秒単位で実行を遅延する	mixed time_nanosleep ( int $seconds , int $nanoseconds )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
time_sleep_until	指定した時刻まで実行を遅延する	bool time_sleep_until ( float $timestamp )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
time	現在の Unix タイムスタンプを返す	int time ( void )
timezone_abbreviations_list	DateTimeZone::listAbbreviations() のエイリアス
timezone_identifiers_list	DateTimeZone::listIdentifiers() のエイリアス
timezone_location_get	DateTimeZone::getLocation() のエイリアス
timezone_name_from_abbr	略称からタイムゾーン名を返す	string timezone_name_from_abbr ( string $abbr [, int $gmtOffset = -1 [, int $isdst = -1 ]] )	成功した場合にタイムゾーン名、失敗した場合に FALSE を返します。
timezone_name_get	DateTimeZone::getName() のエイリアス
timezone_offset_get	DateTimeZone::getOffset() のエイリアス
timezone_open	DateTimeZone::__construct() のエイリアス
timezone_transitions_get	DateTimeZone::getTransitions() のエイリアス
timezone_version_get	timezonedb のバージョンを取得する	string timezone_version_get ( void )	文字列を返します。
tmpfile	テンポラリファイルを作成する	resource tmpfile ( void )	ファイルのハンドルを返します。 これは、 fopen() により返されるハンドルと同じものです。 失敗した場合に FALSE を返します。
token_get_all	指定したソースを PHP トークンに分割する	array token_get_all ( string $source )	トークン ID の配列を返します。配列の各要素には、1 文字単位の文字列 (例: ;、.、 >、! など...)、 またはトークンのインデックスを 0 番目の要素、トークンの文字列表現を 1 番目の要素、 行番号を 2 番目の要素とする配列が含まれます。
token_name	指定した PHP トークンのシンボル名を取得する	string token_name ( int $token )	token に対応するシンボル名を返します。
touch	ファイルの最終アクセス時刻および最終更新日をセットする	bool touch ( string $filename [, int $time = time() [, int $atime ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
trader_acos	Vector Trigonometric ACos	array trader_acos ( array $real )	Returns an array with calculated data or false on failure.
trader_ad	Chaikin A/D Line	array trader_ad ( array $high , array $low , array $close , array $volume )	Returns an array with calculated data or false on failure.
trader_add	Vector Arithmetic Add	array trader_add ( array $real0 , array $real1 )	Returns an array with calculated data or false on failure.
trader_adosc	Chaikin A/D Oscillator	array trader_adosc ( array $high , array $low , array $close , array $volume [, integer $fastPeriod [, integer $slowPeriod ]] )	Returns an array with calculated data or false on failure.
trader_adx	Average Directional Movement Index	array trader_adx ( array $high , array $low , array $close [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_adxr	Average Directional Movement Index Rating	array trader_adxr ( array $high , array $low , array $close [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_apo	Absolute Price Oscillator	array trader_apo ( array $real [, integer $fastPeriod [, integer $slowPeriod [, integer $mAType ]]] )	Returns an array with calculated data or false on failure.
trader_aroon	Aroon	array trader_aroon ( array $high , array $low [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_aroonosc	Aroon Oscillator	array trader_aroonosc ( array $high , array $low [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_asin	Vector Trigonometric ASin	array trader_asin ( array $real )	Returns an array with calculated data or false on failure.
trader_atan	Vector Trigonometric ATan	array trader_atan ( array $real )	Returns an array with calculated data or false on failure.
trader_atr	Average True Range	array trader_atr ( array $high , array $low , array $close [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_avgprice	Average Price	array trader_avgprice ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_bbands	Bollinger Bands	array trader_bbands ( array $real [, integer $timePeriod [, float $nbDevUp [, float $nbDevDn [, integer $mAType ]]]] )	Returns an array with calculated data or false on failure.
trader_beta	Beta	array trader_beta ( array $real0 , array $real1 [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_bop	Balance Of Power	array trader_bop ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cci	Commodity Channel Index	array trader_cci ( array $high , array $low , array $close [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_cdl2crows	Two Crows	array trader_cdl2crows ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdl3blackcrows	Three Black Crows	array trader_cdl3blackcrows ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdl3inside	Three Inside Up/Down	array trader_cdl3inside ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdl3linestrike	Three-Line Strike	array trader_cdl3linestrike ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdl3outside	Three Outside Up/Down	array trader_cdl3outside ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdl3starsinsouth	Three Stars In The South	array trader_cdl3starsinsouth ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdl3whitesoldiers	Three Advancing White Soldiers	array trader_cdl3whitesoldiers ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlabandonedbaby	Abandoned Baby	array trader_cdlabandonedbaby ( array $open , array $high , array $low , array $close [, float $penetration ] )	Returns an array with calculated data or false on failure.
trader_cdladvanceblock	Advance Block	array trader_cdladvanceblock ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlbelthold	Belt-hold	array trader_cdlbelthold ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlbreakaway	Breakaway	array trader_cdlbreakaway ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlclosingmarubozu	Closing Marubozu	array trader_cdlclosingmarubozu ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlconcealbabyswall	Concealing Baby Swallow	array trader_cdlconcealbabyswall ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlcounterattack	Counterattack	array trader_cdlcounterattack ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdldarkcloudcover	Dark Cloud Cover	array trader_cdldarkcloudcover ( array $open , array $high , array $low , array $close [, float $penetration ] )	Returns an array with calculated data or false on failure.
trader_cdldoji	Doji	array trader_cdldoji ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdldojistar	Doji Star	array trader_cdldojistar ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdldragonflydoji	Dragonfly Doji	array trader_cdldragonflydoji ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlengulfing	Engulfing Pattern	array trader_cdlengulfing ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdleveningdojistar	Evening Doji Star	array trader_cdleveningdojistar ( array $open , array $high , array $low , array $close [, float $penetration ] )	Returns an array with calculated data or false on failure.
trader_cdleveningstar	Evening Star	array trader_cdleveningstar ( array $open , array $high , array $low , array $close [, float $penetration ] )	Returns an array with calculated data or false on failure.
trader_cdlgapsidesidewhite	Up/Down-gap side-by-side white lines	array trader_cdlgapsidesidewhite ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlgravestonedoji	Gravestone Doji	array trader_cdlgravestonedoji ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlhammer	Hammer	array trader_cdlhammer ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlhangingman	Hanging Man	array trader_cdlhangingman ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlharami	Harami Pattern	array trader_cdlharami ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlharamicross	Harami Cross Pattern	array trader_cdlharamicross ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlhighwave	High-Wave Candle	array trader_cdlhighwave ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlhikkake	Hikkake Pattern	array trader_cdlhikkake ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlhikkakemod	Modified Hikkake Pattern	array trader_cdlhikkakemod ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlhomingpigeon	Homing Pigeon	array trader_cdlhomingpigeon ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlidentical3crows	Identical Three Crows	array trader_cdlidentical3crows ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlinneck	In-Neck Pattern	array trader_cdlinneck ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlinvertedhammer	Inverted Hammer	array trader_cdlinvertedhammer ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlkicking	Kicking	array trader_cdlkicking ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlkickingbylength	Kicking - bull/bear determined by the longer marubozu	array trader_cdlkickingbylength ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlladderbottom	Ladder Bottom	array trader_cdlladderbottom ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdllongleggeddoji	Long Legged Doji	array trader_cdllongleggeddoji ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdllongline	Long Line Candle	array trader_cdllongline ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlmarubozu	Marubozu	array trader_cdlmarubozu ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlmatchinglow	Matching Low	array trader_cdlmatchinglow ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlmathold	Mat Hold	array trader_cdlmathold ( array $open , array $high , array $low , array $close [, float $penetration ] )	Returns an array with calculated data or false on failure.
trader_cdlmorningdojistar	Morning Doji Star	array trader_cdlmorningdojistar ( array $open , array $high , array $low , array $close [, float $penetration ] )	Returns an array with calculated data or false on failure.
trader_cdlmorningstar	Morning Star	array trader_cdlmorningstar ( array $open , array $high , array $low , array $close [, float $penetration ] )	Returns an array with calculated data or false on failure.
trader_cdlonneck	On-Neck Pattern	array trader_cdlonneck ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlpiercing	Piercing Pattern	array trader_cdlpiercing ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlrickshawman	Rickshaw Man	array trader_cdlrickshawman ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlrisefall3methods	Rising/Falling Three Methods	array trader_cdlrisefall3methods ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlseparatinglines	Separating Lines	array trader_cdlseparatinglines ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlshootingstar	Shooting Star	array trader_cdlshootingstar ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlshortline	Short Line Candle	array trader_cdlshortline ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlspinningtop	Spinning Top	array trader_cdlspinningtop ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlstalledpattern	Stalled Pattern	array trader_cdlstalledpattern ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlsticksandwich	Stick Sandwich	array trader_cdlsticksandwich ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdltakuri	Takuri (Dragonfly Doji with very long lower shadow)	array trader_cdltakuri ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdltasukigap	Tasuki Gap	array trader_cdltasukigap ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlthrusting	Thrusting Pattern	array trader_cdlthrusting ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdltristar	Tristar Pattern	array trader_cdltristar ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlunique3river	Unique 3 River	array trader_cdlunique3river ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlupsidegap2crows	Upside Gap Two Crows	array trader_cdlupsidegap2crows ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_cdlxsidegap3methods	Upside/Downside Gap Three Methods	array trader_cdlxsidegap3methods ( array $open , array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_ceil	Vector Ceil	array trader_ceil ( array $real )	Returns an array with calculated data or false on failure.
trader_cmo	Chande Momentum Oscillator	array trader_cmo ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_correl	Pearson's Correlation Coefficient (r)	array trader_correl ( array $real0 , array $real1 [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_cos	Vector Trigonometric Cos	array trader_cos ( array $real )	Returns an array with calculated data or false on failure.
trader_cosh	Vector Trigonometric Cosh	array trader_cosh ( array $real )	Returns an array with calculated data or false on failure.
trader_dema	Double Exponential Moving Average	array trader_dema ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_div	Vector Arithmetic Div	array trader_div ( array $real0 , array $real1 )	Returns an array with calculated data or false on failure.
trader_dx	Directional Movement Index	array trader_dx ( array $high , array $low , array $close [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_ema	Exponential Moving Average	array trader_ema ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_errno	Get error code	integer trader_errno ( void )	Returns the error code identified by one of the TRADER_ERR_* constants.
trader_exp	Vector Arithmetic Exp	array trader_exp ( array $real )	Returns an array with calculated data or false on failure.
trader_floor	Vector Floor	array trader_floor ( array $real )	Returns an array with calculated data or false on failure.
trader_get_compat	Get compatibility mode	integer trader_get_compat ( void )	Returns the compatibility mode id which can be identified by TRADER_COMPATIBILITY_* series of constants.
trader_get_unstable_period	Get unstable period	integer trader_get_unstable_period ( integer $functionId )	Returns the unstable period factor for the corresponding function.
trader_ht_dcperiod	Hilbert Transform - Dominant Cycle Period	array trader_ht_dcperiod ( array $real )	Returns an array with calculated data or false on failure.
trader_ht_dcphase	Hilbert Transform - Dominant Cycle Phase	array trader_ht_dcphase ( array $real )	Returns an array with calculated data or false on failure.
trader_ht_phasor	Hilbert Transform - Phasor Components	array trader_ht_phasor ( array $real )	Returns an array with calculated data or false on failure.
trader_ht_sine	Hilbert Transform - SineWave	array trader_ht_sine ( array $real )	Returns an array with calculated data or false on failure.
trader_ht_trendline	Hilbert Transform - Instantaneous Trendline	array trader_ht_trendline ( array $real )	Returns an array with calculated data or false on failure.
trader_ht_trendmode	Hilbert Transform - Trend vs Cycle Mode	array trader_ht_trendmode ( array $real )	Returns an array with calculated data or false on failure.
trader_kama	Kaufman Adaptive Moving Average	array trader_kama ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_linearreg_angle	Linear Regression Angle	array trader_linearreg_angle ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_linearreg_intercept	Linear Regression Intercept	array trader_linearreg_intercept ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_linearreg_slope	Linear Regression Slope	array trader_linearreg_slope ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_linearreg	Linear Regression	array trader_linearreg ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_ln	Vector Log Natural	array trader_ln ( array $real )	Returns an array with calculated data or false on failure.
trader_log10	Vector Log10	array trader_log10 ( array $real )	Returns an array with calculated data or false on failure.
trader_ma	Moving average	array trader_ma ( array $real [, integer $timePeriod [, integer $mAType ]] )	Returns an array with calculated data or false on failure.
trader_macd	Moving Average Convergence/Divergence	array trader_macd ( array $real [, integer $fastPeriod [, integer $slowPeriod [, integer $signalPeriod ]]] )	Returns an array with calculated data or false on failure.
trader_macdext	MACD with controllable MA type	array trader_macdext ( array $real [, integer $fastPeriod [, integer $fastMAType [, integer $slowPeriod [, integer $slowMAType [, integer $signalPeriod [, integer $signalMAType ]]]]]] )	Returns an array with calculated data or false on failure.
trader_macdfix	Moving Average Convergence/Divergence Fix 12/26	array trader_macdfix ( array $real [, integer $signalPeriod ] )	Returns an array with calculated data or false on failure.
trader_mama	MESA Adaptive Moving Average	array trader_mama ( array $real [, float $fastLimit [, float $slowLimit ]] )	Returns an array with calculated data or false on failure.
trader_mavp	Moving average with variable period	array trader_mavp ( array $real , array $periods [, integer $minPeriod [, integer $maxPeriod [, integer $mAType ]]] )	Returns an array with calculated data or false on failure.
trader_max	Highest value over a specified period	array trader_max ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_maxindex	Index of highest value over a specified period	array trader_maxindex ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_medprice	Median Price	array trader_medprice ( array $high , array $low )	Returns an array with calculated data or false on failure.
trader_mfi	Money Flow Index	array trader_mfi ( array $high , array $low , array $close , array $volume [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_midpoint	MidPoint over period	array trader_midpoint ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_midprice	Midpoint Price over period	array trader_midprice ( array $high , array $low [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_min	Lowest value over a specified period	array trader_min ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_minindex	Index of lowest value over a specified period	array trader_minindex ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_minmax	Lowest and highest values over a specified period	array trader_minmax ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_minmaxindex	Indexes of lowest and highest values over a specified period	array trader_minmaxindex ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_minus_di	Minus Directional Indicator	array trader_minus_di ( array $high , array $low , array $close [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_minus_dm	Minus Directional Movement	array trader_minus_dm ( array $high , array $low [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_mom	Momentum	array trader_mom ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_mult	Vector Arithmetic Mult	array trader_mult ( array $real0 , array $real1 )	Returns an array with calculated data or false on failure.
trader_natr	Normalized Average True Range	array trader_natr ( array $high , array $low , array $close [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_obv	On Balance Volume	array trader_obv ( array $real , array $volume )	Returns an array with calculated data or false on failure.
trader_plus_di	Plus Directional Indicator	array trader_plus_di ( array $high , array $low , array $close [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_plus_dm	Plus Directional Movement	array trader_plus_dm ( array $high , array $low [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_ppo	Percentage Price Oscillator	array trader_ppo ( array $real [, integer $fastPeriod [, integer $slowPeriod [, integer $mAType ]]] )	Returns an array with calculated data or false on failure.
trader_roc	Rate of change : ((price/prevPrice)-1)*100	array trader_roc ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_rocp	Rate of change Percentage: (price-prevPrice)/prevPrice	array trader_rocp ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_rocr	Rate of change ratio: (price/prevPrice)	array trader_rocr ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_rocr100	Rate of change ratio 100 scale: (price/prevPrice)*100	array trader_rocr100 ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_rsi	Relative Strength Index	array trader_rsi ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_sar	Parabolic SAR	array trader_sar ( array $high , array $low [, float $acceleration [, float $maximum ]] )	Returns an array with calculated data or false on failure.
trader_sarext	Parabolic SAR - Extended	array trader_sarext ( array $high , array $low [, float $startValue [, float $offsetOnReverse [, float $accelerationInitLong [, float $accelerationLong [, float $accelerationMaxLong [, float $accelerationInitShort [, float $accelerationShort [, float $accelerationMaxShort ]]]]]]]] )	Returns an array with calculated data or false on failure.
trader_set_compat	Set compatibility mode	void trader_set_compat ( integer $compatId )	値を返しません。
trader_set_unstable_period	Set unstable period	void trader_set_unstable_period ( integer $functionId , integer $timePeriod )	値を返しません。
trader_sin	Vector Trigonometric Sin	array trader_sin ( array $real )	Returns an array with calculated data or false on failure.
trader_sinh	Vector Trigonometric Sinh	array trader_sinh ( array $real )	Returns an array with calculated data or false on failure.
trader_sma	Simple Moving Average	array trader_sma ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_sqrt	Vector Square Root	array trader_sqrt ( array $real )	Returns an array with calculated data or false on failure.
trader_stddev	Standard Deviation	array trader_stddev ( array $real [, integer $timePeriod [, float $nbDev ]] )	Returns an array with calculated data or false on failure.
trader_stoch	Stochastic	array trader_stoch ( array $high , array $low , array $close [, integer $fastK_Period [, integer $slowK_Period [, integer $slowK_MAType [, integer $slowD_Period [, integer $slowD_MAType ]]]]] )	Returns an array with calculated data or false on failure.
trader_stochf	Stochastic Fast	array trader_stochf ( array $high , array $low , array $close [, integer $fastK_Period [, integer $fastD_Period [, integer $fastD_MAType ]]] )	Returns an array with calculated data or false on failure.
trader_stochrsi	Stochastic Relative Strength Index	array trader_stochrsi ( array $real [, integer $timePeriod [, integer $fastK_Period [, integer $fastD_Period [, integer $fastD_MAType ]]]] )	Returns an array with calculated data or false on failure.
trader_sub	Vector Arithmetic Subtraction	array trader_sub ( array $real0 , array $real1 )	Returns an array with calculated data or false on failure.
trader_sum	Summation	array trader_sum ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_t3	Triple Exponential Moving Average (T3)	array trader_t3 ( array $real [, integer $timePeriod [, float $vFactor ]] )	Returns an array with calculated data or false on failure.
trader_tan	Vector Trigonometric Tan	array trader_tan ( array $real )	Returns an array with calculated data or false on failure.
trader_tanh	Vector Trigonometric Tanh	array trader_tanh ( array $real )	Returns an array with calculated data or false on failure.
trader_tema	Triple Exponential Moving Average	array trader_tema ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_trange	True Range	array trader_trange ( array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_trima	Triangular Moving Average	array trader_trima ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_trix	1-day Rate-Of-Change (ROC) of a Triple Smooth EMA	array trader_trix ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_tsf	Time Series Forecast	array trader_tsf ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_typprice	Typical Price	array trader_typprice ( array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_ultosc	Ultimate Oscillator	array trader_ultosc ( array $high , array $low , array $close [, integer $timePeriod1 [, integer $timePeriod2 [, integer $timePeriod3 ]]] )	Returns an array with calculated data or false on failure.
trader_var	Variance	array trader_var ( array $real [, integer $timePeriod [, float $nbDev ]] )	Returns an array with calculated data or false on failure.
trader_wclprice	Weighted Close Price	array trader_wclprice ( array $high , array $low , array $close )	Returns an array with calculated data or false on failure.
trader_willr	Williams' %R	array trader_willr ( array $high , array $low , array $close [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trader_wma	Weighted Moving Average	array trader_wma ( array $real [, integer $timePeriod ] )	Returns an array with calculated data or false on failure.
trait_exists	トレイトが存在するかどうかを調べる	bool trait_exists ( string $traitname [, bool $autoload ] )	トレイトが存在する場合に TRUE、存在しない場合に FALSE、エラーが発生した場合に NULL を返します。
trigger_error	ユーザーレベルのエラー/警告/通知メッセージを生成する	bool trigger_error ( string $error_msg [, int $error_type = E_USER_NOTICE ] )	この関数は、間違った error_type が指定された場合に FALSE を、それ以外の場合に TRUE を返します。
trim	文字列の先頭および末尾にあるホワイトスペースを取り除く	string trim ( string $str [, string $charlist = " \t\n\r\0\x0B" ] )	ホワイトスペースを取り除いた文字列
uasort	ユーザー定義の比較関数で配列をソートし、連想インデックスを保持する	bool uasort ( array &$array , callable $cmp_function )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
ucfirst	文字列の最初の文字を大文字にする	string ucfirst ( string $str )	変換後の文字列を返します。
ucwords	文字列の各単語の最初の文字を大文字にする	string ucwords ( string $str )	変更後の文字列を返します。
udm_add_search_limit	種々の検索の制約を設定する	bool udm_add_search_limit ( resource $agent , int $var , string $val )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
udm_alloc_agent_array	mnoGoSearch セッションを割り当てる	resource udm_alloc_agent_array ( array $databases )	成功した場合にリソースリンク ID、失敗した場合に FALSE を返します。
udm_alloc_agent	mnoGoSearch セッションを確保する	resource udm_alloc_agent ( string $dbaddr [, string $dbmode ] )	成功した場合に mnogosearch エージェント ID、失敗した場合に FALSE を返します。この関数は、データベースパラメータを有するセッションを 生成します。
udm_api_version	mnoGoSearch API バージョンを取得する	int udm_api_version ( void )	udm_api_version() は、mnoGoSearch API バージョン番号を返します。 例えば、mnoGoSearch 3.1.10 APIを使用している場合、 この関数は、30110 を返します。
udm_cat_list	現在のカテゴリと同じレベルのカテゴリを全て取得する	array udm_cat_list ( resource $agent , string $category )	カテゴリツリーにおける現在の category と同レベルのカテゴリの一覧を配列で返します。
udm_cat_path	現在のカテゴリへのパスを取得する	array udm_cat_path ( resource $agent , string $category )	返される配列は、組で構成されています。偶数添字番号の要素にはカテゴリパス、 奇数要素には、対応するカテゴリ名が含まれます。
udm_check_charset	指定した charset が mnogosearch で認識されるかどうか調べる	bool udm_check_charset ( resource $agent , string $charset )
udm_check_stored	保存された接続を調べる	int udm_check_stored ( resource $agent , int $link , string $doc_id )
udm_clear_search_limits	mnoGoSearch 検索に関する全ての制約をクリアする	bool udm_clear_search_limits ( resource $agent )	Returns TRUE.
udm_close_stored	保存した接続を閉じる	int udm_close_stored ( resource $agent , int $link )
udm_crc32	指定した文字列の CRC32 チェックサムを計算する	int udm_crc32 ( resource $agent , string $str )
udm_errno	mnoGoSearch エラー番号を取得する	int udm_errno ( resource $agent )	mnoGoSearch エラー番号を返します。 エラーがない場合にゼロを返します。
udm_error	mnoGoSearch エラーメッセージを得る	string udm_error ( resource $agent )	udm_error() は mnoGoSearch エラーメッセージを返します。 エラーがない場合には、空の文字列を返します。
udm_find	検索を実行する	resource udm_find ( resource $agent , string $query )	成功した場合に結果リンク ID、失敗した場合に FALSE を返します。
udm_free_agent	mnoGoSearch セッションを開放する	int udm_free_agent ( resource $agent )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
udm_free_ispell_data	ispell データ用に確保されたメモリを解放する	bool udm_free_ispell_data ( int $agent )	udm_free_ispell_data() は、常に TRUE を返します。
udm_free_res	mnoGoSearch 結果を開放する	bool udm_free_res ( resource $res )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
udm_get_doc_count	データベース内のドキュメントの総数を得る	int udm_get_doc_count ( resource $agent )	ドキュメントの数を返します。
udm_get_res_field	mnoGoSearch 結果フィールドを取得する	string udm_get_res_field ( resource $res , int $row , int $field )	udm_get_res_field() は、成功時に結果フィールド、 エラー時に FALSE を返します。
udm_get_res_param	mnoGoSearch 結果パラメータを取得する	string udm_get_res_param ( resource $res , int $param )	udm_get_res_param() は成功時に結果パラメータを返します。 エラー時に FALSE を返します。
udm_hash32	指定した文字列の Hash32 チェックサムを返す	int udm_hash32 ( resource $agent , string $str )	32 ビットのハッシュ値を返します。
udm_load_ispell_data	ispell データを読み込む	bool udm_load_ispell_data ( resource $agent , int $var , string $val1 , string $val2 , int $flag )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
udm_open_stored	保存した接続をオープンする	int udm_open_stored ( resource $agent , string $storedaddr )
udm_set_agent_param	mnoGoSearch エージェントのセッションパラメータを設定する	bool udm_set_agent_param ( resource $agent , int $var , string $val )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
uksort	ユーザー定義の比較関数を用いて、キーで配列をソートする	bool uksort ( array &$array , callable $cmp_function )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
umask	現在の umask を変更する	int umask ([ int $mask ] )	umask() を引数無しで実行すると、単に現在の umask値を返します。
uniqid	一意な ID を生成する	string uniqid ([ string $prefix = "" [, bool $more_entropy = false ]] )	一意な識別子を文字列で返します。
unixtojd	Unix タイムスタンプをユリウス歴に変換する	int unixtojd ([ int $timestamp = time() ] )	ユリウス積算日を表す整数値を返します。
unlink	ファイルを削除する	bool unlink ( string $filename [, resource $context ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
unpack	バイナリ文字列からデータを切り出す	array unpack ( string $format , string $data )	バイナリ文字列を切り出した要素を含む連想配列を返します。
unregister_tick_function	各 tick の実行用の関数の登録を解除する	void unregister_tick_function ( string $function_name )	値を返しません。
unserialize	保存用表現から PHP の値を生成する	mixed unserialize ( string $str )	変換された値が返されます。その値は、 boolean , integer , float , string , array , object のいずれかとなります。
unset	指定した変数の割当を解除する	void unset ( mixed $var [, mixed $... ] )	値を返しません。
untaint	文字列の汚染を除去する	bool untaint ( string &$string [, string $... ] )
urldecode	URL エンコードされた文字列をデコードする	string urldecode ( string $str )	デコードした文字列を返します。
urlencode	文字列を URL エンコードする	string urlencode ( string $str )	-_. を除くすべての非英数文字が % 記号 (%)に続く二桁の数字で置き換えられ、 空白は + 記号(+)にエンコードされます。 同様の方法で、WWW のフォームからポストされたデータはエンコードされ、 application/x-www-form-urlencoded メディア型も同様です。歴史的な理由により、この関数は &raquo;&nbsp;RFC 3986 エンコード( rawurlencode() を参照してください) とは異なり、 空白を + 記号にエンコードします。
use_soap_error_handler	SOAP エラーハンドラを使用するかどうかを設定する	bool use_soap_error_handler ([ bool $handler = true ] )	元の値を返します。
user_error	trigger_error() のエイリアス
usleep	マイクロ秒単位で実行を遅延する	void usleep ( int $micro_seconds )	値を返しません。
usort	ユーザー定義の比較関数を使用して、配列を値でソートする	bool usort ( array &$array , callable $cmp_function )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
utf8_decode	UTF-8 エンコードされた ISO-8859-1 文字列をシングルバイトの ISO-8859-1 に変換する	string utf8_decode ( string $data )	data を ISO-8859-1 に変換した結果を返します。
utf8_encode	ISO-8859-1 文字列を UTF-8 にエンコードする	string utf8_encode ( string $data )	data を UTF-8 に変換した結果を返します。
var_dump	変数に関する情報をダンプする	void var_dump ( mixed $expression [, mixed $... ] )	値を返しません。
var_export	変数の文字列表現を出力または返す	mixed var_export ( mixed $expression [, bool $return = false ] )	return パラメータが使用され TRUE と評価される場合、 変数表現を返します。そうでない場合、この関数は NULL を返します。
variant_abs	variant の絶対値を返す	mixed variant_abs ( mixed $val )	val の絶対値を返します。
variant_add	2 つの variant 値を「加算」し、結果を返す	mixed variant_add ( mixed $left , mixed $right )	結果を返します。
variant_and	2 つの variant の論理積を計算し、結果を返す	mixed variant_and ( mixed $left , mixed $right )	Variant の AND 規則 left right 結果 TRUETRUETRUE TRUEFALSEFALSE TRUENULLNULL FALSETRUEFALSE FALSEFALSEFALSE FALSENULLFALSE NULLTRUENULL NULLFALSEFALSE NULLNULLNULL
variant_cast	variant を、別の型の新しい variant に変換する	variant variant_cast ( variant $variant , int $type )	VT_DATE variant を返します。
variant_cat	2 つの variant 値を連結し、その結果を返す	mixed variant_cat ( mixed $left , mixed $right )	連結した結果を返します。
variant_cmp	2 つの variant を比較する	int variant_cmp ( mixed $left , mixed $right [, int $lcid [, int $flags ]] )	以下のいずれかを返します。 Variant の比較結果 値 意味 VARCMP_LT left は right より小さい VARCMP_EQ left は right と等しい VARCMP_GT left は right より大きい VARCMP_NULL left と right のいずれか、あるいは両方が NULL
variant_date_from_timestamp	Unix タイムスタンプを、日付形式の variant で返す	variant variant_date_from_timestamp ( int $timestamp )	VT_DATE 型の variant を返します。
variant_date_to_timestamp	日付/時刻の variant 値を Unix タイムスタンプに変換する	int variant_date_to_timestamp ( variant $variant )	unix タイムスタンプを返します。
variant_div	2 つの variant の除算結果を返す	mixed variant_div ( mixed $left , mixed $right )	Variant の除算規則 もし～なら このようにします 両者ともに文字列型・日付型・文字・論理型 Double 型を返す 一方が文字列型で、もう一方が文字 除算結果を double 型で返す 一方が数値で、もう一方が文字列 除算結果を double 型で返す 両者ともに数値 除算結果を double 型で返す どちらか一方が NULL NULL が返される right が空の値で left がそれ以外の型 com_exception コード DISP_E_DIVBYZERO がスローされる left が空の値で right がそれ以外の型 double 型の 0 が返される 両者ともに空の値 com_exception コード DISP_E_OVERFLOW がスローされる
variant_eqv	2 つの variant のビット値が等しいかどうかを調べる	mixed variant_eqv ( mixed $left , mixed $right )	left の各ビットが right の対応するビットに等しい場合に TRUE を、それ以外の場合に FALSE を返します。
variant_fix	variant の整数部を返す	mixed variant_fix ( mixed $variant )	variant が負の数の場合、variant の値以上の 最初の整数値を返します。それ以外の場合は variant の値の整数部分を返します。
variant_get_type	variant オブジェクトの型を返す	int variant_get_type ( variant $variant )	この関数は、variant の型を表す整数値を返します。 variant は COM、 DOTNET あるいは VARIANT クラスのインスタンスです。 返される値は、VT_XXX 定数のいずれかと比較することが可能です。
variant_idiv	variants を整数に変換し、除算の結果を返す	mixed variant_idiv ( mixed $left , mixed $right )	Variant の整数除算規則 もし～なら このようにします 両者ともに文字列型・日付型・文字・論理型 除算結果を integer 型で返す 一方が文字列型で、もう一方が文字 除算 一方が数値で、もう一方が文字列 除算 両者ともに数値 除算 どちらか一方が NULL NULL が返される 両者ともに空の値 com_exception コード DISP_E_DIVBYZERO がスローされる
variant_imp	2 つの variant のビット implication を行う	mixed variant_imp ( mixed $left , mixed $right )	Variant Implication テーブル left right 結果 TRUETRUETRUE TRUEFALSETRUE TRUENULLTRUE FALSETRUETRUE FALSEFALSETRUE FALSENULLTRUE NULLTRUETRUE NULLFALSENULL NULLNULLNULL
variant_int	variant の整数部を返す	mixed variant_int ( mixed $variant )	variant が負の数の場合、variant の値以上の 最初の整数値を返します。それ以外の場合は variant の値の整数部分を返します。
variant_mod	2 つの variant の除算を行い、剰余を返す	mixed variant_mod ( mixed $left , mixed $right )	除算の剰余を返します。
variant_mul	2 つの variant の乗算を行い、その結果を返す	mixed variant_mul ( mixed $left , mixed $right )	Variant の乗算規則 もし～なら このようにします 両者ともに文字列型・日付型・文字・論理型 乗算 一方が文字列型で、もう一方が文字 乗算 一方が数値で、もう一方が文字列 乗算 両者ともに数値 乗算 どちらか一方が NULL NULL が返される 両者ともに空の値 空の文字列が返される
variant_neg	variant の論理否定演算を行う	mixed variant_neg ( mixed $variant )	論理否定演算の結果を返します。
variant_not	variant のビット否定演算を行う	mixed variant_not ( mixed $variant )	ビット否定演算の結果を返します。 variant が NULL の場合、 結果も NULL となります。
variant_or	2 つの variant の論理和を計算する	mixed variant_or ( mixed $left , mixed $right )	Variant の OR 規則 left right 結果 TRUETRUETRUE TRUEFALSETRUE TRUENULLTRUE FALSETRUETRUE FALSEFALSEFALSE FALSENULLNULL NULLTRUETRUE NULLFALSENULL NULLNULLNULL
variant_pow	2 つの variant の累乗計算を行い、その結果を返す	mixed variant_pow ( mixed $left , mixed $right )	left の right 乗を返します。
variant_round	指定した桁で variant を丸める	mixed variant_round ( mixed $variant , int $decimals )	丸めた結果を返します。
variant_set_type	variant を「その場で」別の型に変換する	void variant_set_type ( variant $variant , int $type )	値を返しません。
variant_set	variant オブジェクトに新しい値を代入する	void variant_set ( variant $variant , mixed $value )	値を返しません。
variant_sub	左の variant から右の variant を引き、その結果を返す	mixed variant_sub ( mixed $left , mixed $right )	Variant の減算規則 もし～なら このようにします 両者ともに文字列型 減算 一方が文字列型で、もう一方が文字 減算 一方が数値で、もう一方が文字列 減算 両者ともに数値 減算 どちらか一方が NULL NULL が返される 両者ともに空の値 空の文字列が返される
variant_xor	2 つの variant の排他的論理和を計算する	mixed variant_xor ( mixed $left , mixed $right )	Variant の XOR 規則 left right 結果 TRUETRUEFALSE TRUEFALSETRUE FALSETRUETRUE FALSEFALSEFALSE NULLNULLNULL
version_compare	ふたつの "PHP 標準" バージョン番号文字列を比較する	mixed version_compare ( string $version1 , string $version2 [, string $operator ] )	デフォルトでは、 version_compare() の返り値は 最初のバージョンが 2 番目のバージョンより小さい場合に -1、 同じ場合に 0、そして 2 番目のバージョンのほうが小さい場合に 1 となります。
vfprintf	フォーマットされた文字列をストリームに書き込む	int vfprintf ( resource $handle , string $format , array $args )	出力された文字列の長さを返します。
virtual	Apache サブリクエストを実行する	bool virtual ( string $filename )	成功時は virtual コマンドの実行、失敗時は FALSE を返します。
vpopmail_add_alias_domain_ex	既存の仮想ドメインにエイリアスを追加する	bool vpopmail_add_alias_domain_ex ( string $olddomain , string $newdomain )
vpopmail_add_alias_domain	仮想ドメインへのエイリアスを追加する	bool vpopmail_add_alias_domain ( string $domain , string $aliasdomain )
vpopmail_add_domain_ex	新規に仮想ドメインを追加する	bool vpopmail_add_domain_ex ( string $domain , string $passwd [, string $quota [, string $bounce [, bool $apop ]]] )
vpopmail_add_domain	仮想ドメインを新たに追加する	bool vpopmail_add_domain ( string $domain , string $dir , int $uid , int $gid )
vpopmail_add_user	指定した仮想ドメインに新規ユーザーを追加する	bool vpopmail_add_user ( string $user , string $domain , string $password [, string $gecos [, bool $apop ]] )
vpopmail_alias_add	仮想エイリアスを追加する	bool vpopmail_alias_add ( string $user , string $domain , string $alias )
vpopmail_alias_del_domain	あるドメインに関する仮想エイリアスを全て削除する	bool vpopmail_alias_del_domain ( string $domain )
vpopmail_alias_del	あるユーザーの仮想エイリアスを全て削除する	bool vpopmail_alias_del ( string $user , string $domain )
vpopmail_alias_get_all	あるドメインに関するエイリアスを全て取得する	array vpopmail_alias_get_all ( string $domain )
vpopmail_alias_get	あるドメインに関するエイリアスを取得する	array vpopmail_alias_get ( string $alias , string $domain )
vpopmail_auth_user	ユーザー名/ドメイン/パスワードの認証を試みる	bool vpopmail_auth_user ( string $user , string $domain , string $password [, string $apop ] )
vpopmail_del_domain_ex	仮想ドメインを削除する	bool vpopmail_del_domain_ex ( string $domain )
vpopmail_del_domain	仮想ドメインを削除する	bool vpopmail_del_domain ( string $domain )
vpopmail_del_user	仮想ドメインからユーザーを削除する	bool vpopmail_del_user ( string $user , string $domain )
vpopmail_error	直近の vpopmail エラーに関するエラーメッセージを取得する	string vpopmail_error ( void )
vpopmail_passwd	仮想ユーザーのパスワードを変更する	bool vpopmail_passwd ( string $user , string $domain , string $password [, bool $apop ] )
vpopmail_set_user_quota	仮想ユーザーの容量制限(クオータ)を設定する	bool vpopmail_set_user_quota ( string $user , string $domain , string $quota )
vprintf	フォーマットされた文字列を出力する	int vprintf ( string $format , array $args )	出力された文字列の長さを返します。
vsprintf	フォーマットされた文字列を返す	string vsprintf ( string $format , array $args )	( sprintf() のドキュメントに記述された) format に基づきフォーマットされた文字列として配列値を返します。
w32api_deftype	他の w32api_functions で使用するために型を定義する	bool w32api_deftype ( string $typename , string $member1_type , string $member1_name [, string $... [, string $... ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
w32api_init_dtype	データ型 typename のインスタンスを作成し、そこに渡された値を代入する	resource w32api_init_dtype ( string $typename , mixed $value [, mixed $... ] )	dynaparm リソースを返します。
w32api_invoke_function	関数名の後ろに指定された引数を指定し、関数 funcname を実行する	mixed w32api_invoke_function ( string $funcname , mixed $argument [, mixed $... ] )	返り値の型は、その関数を登録した際に定義したもので、 値はその関数が返す値そのものとなります。
w32api_register_function	ライブラリの関数 function_name を PHP に登録する	bool w32api_register_function ( string $library , string $function_name , string $return_type )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
w32api_set_call_method	使用するコール方式を設定する	void w32api_set_call_method ( int $method )	値を返しません。
wddx_add_vars	指定した ID の WDDX パケットに変数を追加する	bool wddx_add_vars ( resource $packet_id , mixed $var_name [, mixed $... ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
wddx_deserialize	WDDX パケットをデシリアライズする	mixed wddx_deserialize ( string $packet )	デシリアライズした値を返します。値は文字列か数値、あるいは配列のいずれかとなります。 構造体は連想配列に変換されることに注意しましょう。
wddx_packet_end	指定した ID の WDDX パケットを終了する	string wddx_packet_end ( resource $packet_id )	WDDX パケットを含む文字列を返します。
wddx_packet_start	新規の WDDX パケットを内部の構造体を用いて開始する	resource wddx_packet_start ([ string $comment ] )	後で他の関数で使用するためのパケット ID、あるいはエラー時に FALSE を返します。
wddx_serialize_value	単一の値を WDDX パケットにシリアライズする	string wddx_serialize_value ( mixed $var [, string $comment ] )	WDDX パケット、あるいはエラー時に FALSE を返します。
wddx_serialize_vars	変数を WDDX パケットにシリアライズする	string wddx_serialize_vars ( mixed $var_name [, mixed $... ] )	WDDX パケット、あるいはエラー時に FALSE を返します。
win32_continue_service	中断したサービスを再開する	int win32_continue_service ( string $servicename [, string $machine ] )	成功した場合に WIN32_NO_ERROR を返します。パラメータに問題がある場合は FALSE、失敗した場合は Win32 エラーコード を返します。
win32_create_service	SCM データベースに新しいサービスのエントリを作成する	mixed win32_create_service ( array $details [, string $machine ] )	成功した場合に WIN32_NO_ERROR を返します。パラメータに問題がある場合は FALSE、失敗した場合は Win32 エラーコード を返します。
win32_delete_service	SCM データベースからサービスのエントリを削除する	mixed win32_delete_service ( string $servicename [, string $machine ] )	成功した場合に WIN32_NO_ERROR を返します。パラメータに問題がある場合は FALSE、失敗した場合は Win32 エラーコード を返します。
win32_get_last_control_message	サービスに送信された直近の制御メッセージを返す	int win32_get_last_control_message ( void )	制御コード定数を返します。以下の Win32Service サービス制御メッセージ定数 のひとつです。 WIN32_SERVICE_CONTROL_CONTINUE、 WIN32_SERVICE_CONTROL_INTERROGATE、 WIN32_SERVICE_CONTROL_PAUSE、 WIN32_SERVICE_CONTROL_PRESHUTDOWN、 WIN32_SERVICE_CONTROL_SHUTDOWN、 WIN32_SERVICE_CONTROL_STOP。
win32_pause_service	サービスを中断する	int win32_pause_service ( string $servicename [, string $machine ] )	成功した場合に WIN32_NO_ERROR を返します。パラメータに問題がある場合は FALSE、失敗した場合は Win32 エラーコード を返します。
win32_ps_list_procs	稼動中のプロセスの一覧を取得する	array win32_ps_list_procs ( void )	失敗した場合、FALSE を返します。 成功した場合、実行中のすべてのプロセスについての統計情報を 含む配列を返します。統計情報の形式は win32_ps_stat_proc() が返すものと同じです。
win32_ps_stat_mem	メモリ使用量の統計情報を取得する	array win32_ps_stat_mem ( void )	失敗した場合は、FALSE を返します。 成功した場合は、以下の情報を含む配列を返します。
win32_ps_stat_proc	プロセスの統計情報を取得する	array win32_ps_stat_proc ([ int $pid = 0 ] )	失敗した場合は、FALSE を返します。 成功した場合は、以下の情報を含む配列を返します。
win32_query_service_status	サービスの状態を問い合わせる	mixed win32_query_service_status ( string $servicename [, string $machine ] )	成功した場合に以下の情報を含む配列を返します。パラメータに問題がある場合は FALSE、失敗した場合は Win32 エラーコード を返します。
win32_set_service_status	サービスの状態を更新する	bool win32_set_service_status ( int $status [, int $checkpoint = 0 ] )	成功した場合に TRUE を返します。パラメータに問題がある場合は FALSE、失敗した場合は Win32 エラーコード を返します。
win32_start_service_ctrl_dispatcher	スクリプトを SCM に登録し、指定した名前でサービスとして稼動させる ようにする	mixed win32_start_service_ctrl_dispatcher ( string $name )	成功した場合に TRUE を返します。パラメータに問題がある場合は FALSE、失敗した場合は Win32 エラーコード を返します。
win32_start_service	サービスを開始する	int win32_start_service ( string $servicename [, string $machine ] )	成功した場合に WIN32_NO_ERROR を返します。パラメータに問題がある場合は FALSE、失敗した場合は Win32 エラーコード を返します。
win32_stop_service	サービスを停止する	int win32_stop_service ( string $servicename [, string $machine ] )	成功した場合に WIN32_NO_ERROR を返します。パラメータに問題がある場合は FALSE、失敗した場合は Win32 エラーコード を返します。
wincache_fcache_fileinfo	ファイルキャッシュにキャッシュされたファイルについての情報を取得する	array wincache_fcache_fileinfo ([ bool $summaryonly = false ] )	ファイルキャッシュについてのメタデータの配列を返します。失敗した場合に FALSE を返します
wincache_fcache_meminfo	ファイルキャッシュのメモリ使用状況についての情報を取得する	array wincache_fcache_meminfo ( void )	ファイルキャッシュのメモリ使用状況についてのメタデータの配列を返します。失敗した場合に FALSE を返します
wincache_lock	指定したキーで排他ロックを確保する	bool wincache_lock ( string $key [, bool $isglobal = false ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
wincache_ocache_fileinfo	opcode キャッシュにキャッシュされたファイルについての情報を取得する	array wincache_ocache_fileinfo ([ bool $summaryonly = false ] )	opcode キャッシュについてのメタデータの配列を返します。失敗した場合に FALSE を返します
wincache_ocache_meminfo	opcode キャッシュのメモリ使用状況についての情報を取得する	array wincache_ocache_meminfo ( void )	opcode キャッシュのメモリ使用状況についてのメタデータの配列を返します。失敗した場合に FALSE を返します
wincache_refresh_if_changed	キャッシュされたファイルのキャッシュエントリをリフレッシュする	bool wincache_refresh_if_changed ([ array $files ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
wincache_rplist_fileinfo	ファイルパス解決キャッシュについての情報を取得する	array wincache_rplist_fileinfo ([ bool $summaryonly = false ] )	ファイルパス解決キャッシュについてのメタデータの配列を返します。失敗した場合に FALSE を返します
wincache_rplist_meminfo	ファイルパス解決キャッシュのメモリ使用状況についての情報を取得する	array wincache_rplist_meminfo ( void )	ファイルパス解決キャッシュのメモリ使用状況についてのメタデータの配列を返します。失敗した場合に FALSE を返します
wincache_scache_info	セッションキャッシュにキャッシュされたファイルについての情報を取得する	array wincache_scache_info ([ bool $summaryonly = false ] )	セッションキャッシュについてのメタデータの配列を返します。失敗した場合に FALSE を返します
wincache_scache_meminfo	セッションキャッシュのメモリ使用状況についての情報を取得する	array wincache_scache_meminfo ( void )	セッションキャッシュのメモリ使用状況についてのメタデータの配列を返します。失敗した場合に FALSE を返します
wincache_ucache_add	変数が既にキャッシュに存在しない場合にのみ変数をユーザーキャッシュに追加する	bool wincache_ucache_add ( string $key , mixed $value [, int $ttl = 0 ] )	key が配列のときの返り値は、次のようになります。 配列内のすべての name => value ペアが設定できた場合は、空の配列を返します。 配列内の name => value ペアがひとつも設定できなかった場合は、FALSE を返します。 成功したペアと失敗したペアがある場合は、ユーザーキャッシュへの追加に失敗した name=>value ペアを含む配列を返します。
wincache_ucache_cas	変数を古い値と比較して新しい値を代入する	bool wincache_ucache_cas ( string $key , int $old_value , int $new_value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
wincache_ucache_clear	ユーザーキャッシュの中身全体を削除する	bool wincache_ucache_clear ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
wincache_ucache_dec	キーに関連づけられた値を減少させる	mixed wincache_ucache_dec ( string $key [, int $dec_by = 1 [, bool &$success ]] )
wincache_ucache_delete	変数をユーザーキャッシュから削除する	bool wincache_ucache_delete ( mixed $key )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
wincache_ucache_exists	変数がユーザーキャッシュに存在するかどうかを調べる	bool wincache_ucache_exists ( string $key )	指定したキーの変数が存在する場合に TRUE、 それ以外の場合に FALSE を返します。
wincache_ucache_get	ユーザーキャッシュに格納された変数を取得する	mixed wincache_ucache_get ( mixed $key [, bool &$success ] )
wincache_ucache_inc	キーに関連づけられた値を増加させる	mixed wincache_ucache_inc ( string $key [, int $inc_by = 1 [, bool &$success ]] )
wincache_ucache_info	ユーザーキャッシュにキャッシュされたファイルについての情報を取得する	array wincache_ucache_info ([ bool $summaryonly = false [, string $key ]] )	ユーザーキャッシュについてのメタデータの配列を返します。失敗した場合に FALSE を返します
wincache_ucache_meminfo	ユーザーキャッシュのメモリ使用状況についての情報を取得する	array wincache_ucache_meminfo ( void )	ユーザーキャッシュのメモリ使用状況についてのメタデータの配列を返します。失敗した場合に FALSE を返します
wincache_ucache_set	変数をユーザーキャッシュに追加し、変数が既にキャッシュに存在する場合はそれを上書きする	bool wincache_ucache_set ( mixed $key , mixed $value [, int $ttl = 0 ] )	key が配列のときの返り値は、次のようになります。 配列内のすべての name => value ペアが設定できた場合は、空の配列を返します。 配列内の name => value ペアがひとつも設定できなかった場合は、FALSE を返します。 成功したペアと失敗したペアがある場合は、ユーザーキャッシュへの追加に失敗した name=>value ペアを含む配列を返します。
wincache_unlock	指定したキーの排他ロックを解放する	bool wincache_unlock ( string $key )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
wordwrap	指定した文字数で文字列を分割する	string wordwrap ( string $str [, int $width = 75 [, string $break = "\n" [, bool $cut = false ]]] )	受け取った文字列を指定した長さで分割したものを返します。
xattr_get	拡張属性を取得する	string xattr_get ( string $filename , string $name [, int $flags = 0 ] )	値を含む文字列、あるいは属性が存在しない場合には FALSE を返します。
xattr_list	拡張属性の一覧を取得する	array xattr_list ( string $filename [, int $flags = 0 ] )	この関数は、拡張属性の名前を配列で返します。
xattr_remove	拡張属性を削除する	bool xattr_remove ( string $filename , string $name [, int $flags = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xattr_set	拡張属性を設定する	bool xattr_set ( string $filename , string $name , string $value [, int $flags = 0 ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xattr_supported	ファイルシステムが拡張属性をサポートしているかどうかを調べる	bool xattr_supported ( string $filename [, int $flags = 0 ] )	この関数は、ファイルシステムが拡張属性をサポートしている場合に TRUE、 していない場合に FALSE、そして判断できない場合 (たとえばパスが 間違っていたりファイルへのアクセス権限がない場合) には NULL を返します。
xdiff_file_bdiff_size	バイナリ diff を適用して作成するファイルのサイズを読み込む	int xdiff_file_bdiff_size ( string $file )	作成されるファイルのサイズを返します。
xdiff_file_bdiff	2 つのファイルのバイナリ diff を作成する	bool xdiff_file_bdiff ( string $old_file , string $new_file , string $dest )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xdiff_file_bpatch	ファイルにバイナリ diff 形式のパッチを適用する	bool xdiff_file_bpatch ( string $file , string $patch , string $dest )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xdiff_file_diff_binary	xiff_file_bdiff のエイリアス	bool xdiff_file_diff_binary ( string $old_file , string $new_file , string $dest )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xdiff_file_diff	2 つのファイルの unified diff を作成する	bool xdiff_file_diff ( string $old_file , string $new_file , string $dest [, int $context = 3 [, bool $minimal = false ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xdiff_file_merge3	3 つのファイルをひとつに統合する	mixed xdiff_file_merge3 ( string $old_file , string $new_file1 , string $new_file2 , string $dest )	成功した場合に TRUE 、もし拒否された部分がある場合にはその文字列、 内部エラーが発生した場合に FALSE を返します。
xdiff_file_patch_binary	xdiff_file_bpatch のエイリアス	bool xdiff_file_patch_binary ( string $file , string $patch , string $dest )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xdiff_file_patch	ファイルに unified diff 形式のパッチを適用する	mixed xdiff_file_patch ( string $file , string $patch , string $dest [, int $flags = DIFF_PATCH_NORMAL ] )	内部エラーが発生した場合に FALSE を返します。 パッチの適用に失敗した場合はパッチが拒否された部分の文字列、 そして成功した場合は TRUE を返します。
xdiff_file_rabdiff	2 つのファイルのバイナリ diff を、Rabin の polynomial fingerprinting アルゴリズムで作成する	bool xdiff_file_rabdiff ( string $old_file , string $new_file , string $dest )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xdiff_string_bdiff_size	バイナリ diff を適用して作成するファイルのサイズを読み込む	int xdiff_string_bdiff_size ( string $patch )	作成されるファイルのサイズを返します。
xdiff_string_bdiff	2 つの文字列のバイナリ diff を作成する	string xdiff_string_bdiff ( string $old_data , string $new_data )	"旧" データと "新" データの差分を含むバイナリ diff 文字列、 あるいは内部エラーが発生した場合は FALSE を返します。
xdiff_string_bpatch	文字列にバイナリ diff 形式のパッチを適用する	string xdiff_string_bpatch ( string $str , string $patch )	パッチ適用後の文字列、あるいはエラー時に FALSE を返します。
xdiff_string_diff_binary	xdiff_string_bdiff のエイリアス	string xdiff_string_bdiff ( string $old_data , string $new_data )	成功した場合に結果の文字列、内部エラーが発生した場合に FALSE を返します。
xdiff_string_diff	2 つの文字列の unified diff を作成する	string xdiff_string_diff ( string $old_data , string $new_data [, int $context = 3 [, bool $minimal = false ]] )	成功した場合はその結果の diff、内部エラーが発生した場合に FALSE を返します。
xdiff_string_merge3	3 つの文字列をひとつに統合する	mixed xdiff_string_merge3 ( string $old_data , string $new_data1 , string $new_data2 [, string &$error ] )	統合された文字列を返します。内部エラーが発生した場合は FALSE、 統合された文字列が空の文字列の場合は TRUE を返します。
xdiff_string_patch_binary	xdiff_string_bpatch のエイリアス	string xdiff_string_patch_binary ( string $str , string $patch )	パッチ適用後の文字列、あるいはエラー時に FALSE を返します。
xdiff_string_patch	文字列に unified diff 形式のパッチを適用する	string xdiff_string_patch ( string $str , string $patch [, int $flags [, string &$error ]] )	パッチ適用後の文字列、あるいはエラー時に FALSE を返します。
xdiff_string_rabdiff	2 つの文字列のバイナリ diff を、Rabin の polynomial fingerprinting アルゴリズムで作成する	string xdiff_string_bdiff ( string $old_data , string $new_data )	"旧" データと "新" データの差分を含むバイナリ diff 文字列、 あるいは内部エラーが発生した場合は FALSE を返します。
xhprof_disable	xhprof プロファイラを終了する	array xhprof_disable ( void )	実行結果の xhprof データを配列で返します。
xhprof_enable	xhprof プロファイラを開始する	void xhprof_enable ([ int $flags = 0 [, array $options ]] )	NULL
xhprof_sample_disable	xhprof サンプルプロファイラを終了する	array xhprof_sample_disable ( void )	xhprof のサンプルデータの配列を返します。
xhprof_sample_enable	サンプリングモードでの XHProf プロファイリングを開始する	void xhprof_sample_enable ( void )	NULL
xml_error_string	XML パーサのエラー文字列を得る	string xml_error_string ( int $code )	エラーコード code の説明を有する文字列を 返します。説明がない場合には FALSE を返します。
xml_get_current_byte_index	XML パーサのカレントのバイトインデックスを得る	int xml_get_current_byte_index ( resource $parser )	この関数は、parser が有効なパーサを参照しない場合に FALSE、そうでない場合に データバッファにおいてパーサが現在処理中のバイトインデックス (先頭が 0) を返します。
xml_get_current_column_number	XML パーサのカレントのカラム番号を取得する	int xml_get_current_column_number ( resource $parser )	この関数は、parser が有効なパーサでない場合に FALSE を返します。それ以外の場合は、現在のパーサの ( xml_get_current_line_number() で取得した) 現在の行のカラムを返します。
xml_get_current_line_number	XML パーサのカレントの行番号を得る	int xml_get_current_line_number ( resource $parser )	この関数は、parser が有効なパーサでない場合に FALSE、それ以外の場合にデータバッファの中で 現在パーサが処理中の行番号を返します。
xml_get_error_code	XML パーサのエラーコードを得る	int xml_get_error_code ( resource $parser )	この関数は、parser が有効なパーサを参照していない 場合に FALSE を返します。その他の場合、 エラーコードセクション に 一覧が示されたエラーコードを返します。
xml_parse_into_struct	配列構造体に XML データを処理する	int xml_parse_into_struct ( resource $parser , string $data , array &$values [, array &$index ] )	xml_parse_into_struct() は失敗した場合に 0、 成功した場合に 1 を返します。これは FALSE および TRUE とは 異なるものですので、=== のような演算子を使用する場合は注意しましょう。
xml_parse	XML ドキュメントの処理を開始する	int xml_parse ( resource $parser , string $data [, bool $is_final = false ] )	成功した場合に 1、失敗した場合に 0 を返します。
xml_parser_create_ns	名前空間をサポートした XML パーサを生成する	resource xml_parser_create_ns ([ string $encoding [, string $separator = ':' ]] )	新しい XML パーサのリソースハンドルを返します。
xml_parser_create	XML パーサを作成する	resource xml_parser_create ([ string $encoding ] )	新しい XML パーサのリソースハンドルを返します。
xml_parser_free	XML パーサを解放する	bool xml_parser_free ( resource $parser )	この関数は、parser が有効なパーサを 参照しない場合に FALSE、それ以外の場合にパーサを解放し、TRUE を返します。
xml_parser_get_option	XML パーサからオプションを得る	mixed xml_parser_get_option ( resource $parser , int $option )	この関数は、parser が有効なパーサを参照しないか、 option が不正な形式の場合に FALSE を返します (同時に E_WARNING を生成します)。 それ以外の場合、そのオプションの値が返されます。
xml_parser_set_option	XML パーサのオプションを設定する	bool xml_parser_set_option ( resource $parser , int $option , mixed $value )	この関数は、parser が有効なパーサを参照しないか、 オプションが設定出来なかった場合に FALSE を返します。 それ以外の場合、そのオプションが設定され、TRUE が返されます。
xml_set_character_data_handler	文字データハンドラを設定する	bool xml_set_character_data_handler ( resource $parser , callable $handler )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xml_set_default_handler	デフォルトのハンドラを設定する	bool xml_set_default_handler ( resource $parser , callable $handler )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xml_set_element_handler	開始要素および終了要素のハンドラを設定する	bool xml_set_element_handler ( resource $parser , callable $start_element_handler , callable $end_element_handler )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xml_set_end_namespace_decl_handler	名前空間終了ハンドラを設定する	bool xml_set_end_namespace_decl_handler ( resource $parser , callable $handler )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xml_set_external_entity_ref_handler	外部エンティティリファレンスハンドラを設定する	bool xml_set_external_entity_ref_handler ( resource $parser , callable $handler )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xml_set_notation_decl_handler	表記法宣言ハンドラを設定する	bool xml_set_notation_decl_handler ( resource $parser , callable $handler )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xml_set_object	オブジェクト内部で XML パーサを使用する	bool xml_set_object ( resource $parser , object &$object )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xml_set_processing_instruction_handler	処理命令 (PI) 用ハンドラを設定する	bool xml_set_processing_instruction_handler ( resource $parser , callable $handler )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xml_set_start_namespace_decl_handler	名前空間開始ハンドラを設定する	bool xml_set_start_namespace_decl_handler ( resource $parser , callable $handler )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xml_set_unparsed_entity_decl_handler	処理されないエンティティ宣言用ハンドラを設定する	bool xml_set_unparsed_entity_decl_handler ( resource $parser , callable $handler )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xmlrpc_decode_request	XML をネイティブなPHP 型にデコードする	mixed xmlrpc_decode_request ( string $xml , string &$method [, string $encoding ] )
xmlrpc_decode	XML をネイティブな PHP 型にデコードする	mixed xmlrpc_decode ( string $xml [, string $encoding = "iso-8859-1" ] )	XMLRPC メソッドのレスポンスをもとに作成した、 配列あるいは整数、文字列、boolean 値を返します。
xmlrpc_encode_request	メソッドリクエスト用の XML を生成する	string xmlrpc_encode_request ( string $method , mixed $params [, array $output_options ] )	リクエストを表す XML 文字列を返します。
xmlrpc_encode	PHP の値に関する XML を生成する	string xmlrpc_encode ( mixed $value )
xmlrpc_get_type	PHP の値に関する xmlrpc 型を取得する	string xmlrpc_get_type ( mixed $value )	XML-RPC の型を返します。
xmlrpc_is_fault	配列の値が XMLRPC の失敗であるかどうかを調べる	bool xmlrpc_is_fault ( array $arg )	引数が失敗を表す場合に TRUE、それ以外の場合に FALSE を返します。 失敗の内容は $arg["faultString"]、失敗のコードは $arg["faultCode"] に格納されます。
xmlrpc_parse_method_descriptions	XML を、メソッド説明のリストにデコードする	array xmlrpc_parse_method_descriptions ( string $xml )
xmlrpc_server_add_introspection_data	introspection ドキュメントを追加する	int xmlrpc_server_add_introspection_data ( resource $server , array $desc )
xmlrpc_server_call_method	XML リクエストをパースし、メソッドをコールする	string xmlrpc_server_call_method ( resource $server , string $xml , mixed $user_data [, array $output_options ] )
xmlrpc_server_create	xmlrpc サーバーを作成する	resource xmlrpc_server_create ( void )
xmlrpc_server_destroy	サーバーリソースを破棄する	int xmlrpc_server_destroy ( resource $server )
xmlrpc_server_register_introspection_callback	ドキュメントを生成する PHP 関数を登録する	bool xmlrpc_server_register_introspection_callback ( resource $server , string $function )
xmlrpc_server_register_method	メソッド名が一致するメソッドリソースに PHP 関数を登録する	bool xmlrpc_server_register_method ( resource $server , string $method_name , string $function )
xmlrpc_set_type	PHP 文字列型用に xmlrpc 型、base64 または datetime を設定する	bool xmlrpc_set_type ( string &$value , string $type )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 成功した場合、value はオブジェクト型に変換されます。
XMLWriter::endAttribute	属性を終了する	bool XMLWriter::endAttribute ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::endCData	現在の CDATA を終了する	bool XMLWriter::endCData ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::endComment	コメントの終了部を作成する	bool XMLWriter::endComment ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::endDocument	現在のドキュメントを終了する	bool XMLWriter::endDocument ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::endDTDAttlist	現在の DTD 属性リストを終了する	bool XMLWriter::endDTDAttlist ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::endDTDElement	現在の DTD 要素を終了する	bool XMLWriter::endDTDElement ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::endDTDEntity	現在の DTD エンティティを終了する	bool XMLWriter::endDTDEntity ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::endDTD	現在の DTD を終了する	bool XMLWriter::endDTD ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::endElement	現在の要素を終了する	bool XMLWriter::endElement ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::endPI	現在の PI (処理命令) を終了する	bool XMLWriter::endPI ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::flush	現在のバッファをフラッシュする	mixed XMLWriter::flush ([ bool $empty = true ] )	ライターをメモリにオープンした場合は、この関数は出来上がった XML バッファを返します。 そうではなく URI を使用している場合は、この関数はバッファを書き込み、 書き込んだバイト数を返します。
XMLWriter::fullEndElement	現在の要素を終了する	bool XMLWriter::fullEndElement ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::openMemory	文字列の出力にメモリを使用する新しい xmlwriter を作成する	bool XMLWriter::openMemory ( void )	オブジェクト指向型: 成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::openURI	ソース URI を指定して新しい xmlwriter を作成する	bool XMLWriter::openURI ( string $uri )	オブジェクト指向型: 成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::outputMemory	現在のバッファを返す	string XMLWriter::outputMemory ([ bool $flush = true ] )	現在のバッファを文字列で返します。
XMLWriter::setIndentString	字下げに使用する文字列を設定する	bool XMLWriter::setIndentString ( string $indentString )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::setIndent	字下げの on/off を切り替える	bool XMLWriter::setIndent ( bool $indent )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::startAttributeNS	名前空間つきの属性を開始する	bool XMLWriter::startAttributeNS ( string $prefix , string $name , string $uri )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::startAttribute	属性を開始する	bool XMLWriter::startAttribute ( string $name )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::startCData	CDATA の開始タグを作成する	bool XMLWriter::startCData ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::startComment	コメントを開始する	bool XMLWriter::startComment ( void )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::startDocument	ドキュメントタグを作成する	bool XMLWriter::startDocument ([ string $version = 1.0 [, string $encoding = NULL [, string $standalone ]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::startDTDAttlist	DTD 属性リストを開始する	bool XMLWriter::startDTDAttlist ( string $name )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::startDTDElement	DTD 要素を開始する	bool XMLWriter::startDTDElement ( string $qualifiedName )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::startDTDEntity	DTD エンティティを開始する	bool XMLWriter::startDTDEntity ( string $name , bool $isparam )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::startDTD	DTD の開始タグを作成する	bool XMLWriter::startDTD ( string $qualifiedName [, string $publicId [, string $systemId ]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::startElementNS	名前空間つき要素の開始タグを作成する	bool XMLWriter::startElementNS ( string $prefix , string $name , string $uri )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::startElement	要素の開始タグを作成する	bool XMLWriter::startElement ( string $name )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::startPI	PI (処理命令) の開始タグを作成する	bool XMLWriter::startPI ( string $target )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::text	テキストを書き込む	bool XMLWriter::text ( string $content )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::writeAttributeNS	名前空間つき属性全体を書き込む	bool XMLWriter::writeAttributeNS ( string $prefix , string $name , string $uri , string $content )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::writeAttribute	属性全体を書き込む	bool XMLWriter::writeAttribute ( string $name , string $value )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::writeCData	CDATA タグ全体を書き込む	bool XMLWriter::writeCData ( string $content )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::writeComment	コメントタグ全体を書き込む	bool XMLWriter::writeComment ( string $content )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::writeDTDAttlist	DTD 属性リストタグ全体を書き込む	bool XMLWriter::writeDTDAttlist ( string $name , string $content )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::writeDTDElement	DTD 要素タグ全体を書き込む	bool XMLWriter::writeDTDElement ( string $name , string $content )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::writeDTDEntity	DTD エンティティタグ全体を書き込む	bool XMLWriter::writeDTDEntity ( string $name , string $content , bool $pe , string $pubid , string $sysid , string $ndataid )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::writeDTD	DTD タグ全体を書き込む	bool XMLWriter::writeDTD ( string $name [, string $publicId [, string $systemId [, string $subset ]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::writeElementNS	名前空間つき要素タグ全体を書き込む	bool XMLWriter::writeElementNS ( string $prefix , string $name , string $uri [, string $content ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::writeElement	要素タグ全体を書き込む	bool XMLWriter::writeElement ( string $name [, string $content ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::writePI	PI (処理命令) 書き込む	bool XMLWriter::writePI ( string $target , string $content )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
XMLWriter::writeRaw	生の XML テキストを書き込む	bool XMLWriter::writeRaw ( string $content )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xslt_backend_info	バックエンドのコンパイル設定についての情報を返す	string xslt_backend_info ( void )	バックエンドのコンパイル設定についての情報を文字列で返すか、 情報が利用できないときエラー文字列を返します。
xslt_backend_name	バックエンドの名前を返す	string xslt_backend_name ( void )	Sablotron を返します。
xslt_backend_version	Sablotron のバージョン番号を返す	string xslt_backend_version ( void )	バージョン番号を返します。失敗した場合は FALSE を返します。
xslt_create	新規の XSLT プロセッサを作成する	resource xslt_create ( void )	成功した場合に XSLT プロセッサリンク ID、 エラー時に FALSE を返します。
xslt_errno	エラー番号を返す	int xslt_errno ( resource $xh )	エラーコードを表す整数値を返します。
xslt_error	エラー文字列を返す	string xslt_error ( resource $xh )	エラーメッセージを表す文字列を返します。
xslt_free	XSLT プロセッサを開放する	void xslt_free ( resource $xh )	値を返しません。
xslt_getopt	xsl プロセッサのオプションを取得する	int xslt_getopt ( resource $processor )	オプションを返します。これは、定数 XSLT_SABOPT_XXX のビットマスクとなります。
xslt_process	XSLT による変換を行う	mixed xslt_process ( resource $xh , string $xmlcontainer , string $xslcontainer [, string $resultcontainer [, array $arguments [, array $parameters ]]] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 結果コンテナを指定していない場合は結果を返します。
xslt_set_base	全ての XSLT 変換用の基準 URI を設定する	void xslt_set_base ( resource $xh , string $uri )	値を返しません。
xslt_set_encoding	XML ドキュメントをパースするエンコーディングを設定する	void xslt_set_encoding ( resource $xh , string $encoding )	値を返しません。
xslt_set_error_handler	XSLT プロセッサ用のエラーハンドラを設定する	void xslt_set_error_handler ( resource $xh , mixed $handler )	値を返しません。
xslt_set_log	ログメッセージを書き込むためのログファイルを設定する	void xslt_set_log ( resource $xh [, mixed $log ] )	値を返しません。
xslt_set_object	コールバック関数を解決するためのオブジェクトを設定する	bool xslt_set_object ( resource $processor , object &$obj )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
xslt_set_sax_handler	XSLT プロセッサに SAX ハンドラを設定する	void xslt_set_sax_handler ( resource $xh , array $handlers )	値を返しません。
xslt_set_sax_handlers	XML ドキュメントを処理する際にコールされる SAX ハンドラを設定する	void xslt_set_sax_handlers ( resource $processor , array $handlers )	値を返しません。
xslt_set_scheme_handler	XSLT プロセッサ用にスキーマハンドラを設定する	void xslt_set_scheme_handler ( resource $xh , array $handlers )	値を返しません。
xslt_set_scheme_handlers	XSLT プロセッサに関するスキーマハンドラを設定する	void xslt_set_scheme_handlers ( resource $xh , array $handlers )	値を返しません。
xslt_setopt	指定した XSLT プロセッサにオプションを設定する	mixed xslt_setopt ( resource $processor , int $newmask )	以前の設定値が取得できた場合はその値、それ以外の場合は TRUE を返します。エラーが発生した場合は FALSE を返します。
yaml_emit_file	YAML 形式にした値をファイルに送る	bool yaml_emit_file ( string $filename , mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks ]]] )	成功した場合に TRUE を返します。
yaml_emit	YAML 形式にした値を返す	string yaml_emit ( mixed $data [, int $encoding = YAML_ANY_ENCODING [, int $linebreak = YAML_ANY_BREAK [, array $callbacks ]]] )	成功した場合に YAML 形式の文字列を返します。
yaml_parse_file	ファイルからの YAML ストリームをパースする	mixed yaml_parse_file ( string $filename [, int $pos = 0 [, int &$ndocs [, array $callbacks ]]] )	適切な PHP の型に変換した結果を返します。 失敗した場合に FALSE を返します。 pos が -1 の場合は配列を返します。 配列の各要素が、ストリーム内で見つかった個々のドキュメントとなります。
yaml_parse_url	URL からの YAML ストリームをパースする	mixed yaml_parse_url ( string $url [, int $pos = 0 [, int &$ndocs [, array $callbacks ]]] )	適切な PHP の型に変換した結果を返します。 失敗した場合に FALSE を返します。 pos が -1 の場合は配列を返します。 配列の各要素が、ストリーム内で見つかった個々のドキュメントとなります。
yaml_parse	YAML ストリームをパースする	mixed yaml_parse ( string $input [, int $pos = 0 [, int &$ndocs [, array $callbacks ]]] )	適切な PHP の型に変換した結果を返します。 失敗した場合に FALSE を返します。 pos が -1 の場合は配列を返します。 配列の各要素が、ストリーム内で見つかった個々のドキュメントとなります。
yaz_addinfo	詳細なエラー情報を返す	string yaz_addinfo ( resource $id )	エラーの詳細情報を文字列で返します。直近の処理が成功したか、あるいは サーバーから詳細な情報が提供されていない場合には、空の文字列を返します。
yaz_ccl_conf	CCL パーサを設定する	void yaz_ccl_conf ( resource $id , array $config )	値を返しません。
yaz_ccl_parse	CCL パーサを起動する	bool yaz_ccl_parse ( resource $id , string $query , array &$result )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
yaz_close	YAZ 接続をクローズする	bool yaz_close ( resource $id )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
yaz_connect	Z39.50 サーバーへの接続を準備する	mixed yaz_connect ( string $zurl [, mixed $options ] )	成功した場合に接続リソース、エラー時に FALSE を返します。
yaz_database	セッション内のデータベースを指定する	bool yaz_database ( resource $id , string $databases )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
yaz_element	取得時の要素集合の名前を指定する	bool yaz_element ( resource $id , string $elementset )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
yaz_errno	エラー番号を返す	int yaz_errno ( resource $id )	エラーコードを返します。エラーコードは Z39.50 診断コード （通常は Bib-1 診断）あるいは PHP/YAZ が生成するクライアント側の エラーコード（たとえば "Connect failed"、"Init Rejected" など） のいずれかです。
yaz_error	エラーの内容を返す	string yaz_error ( resource $id )	id で表される(直近のリクエストの) サーバーに関するエラーメッセージを返します。 直近の操作が成功した場合には空の文字列が返されます。
yaz_es_result	拡張サービスの結果を調査する	array yaz_es_result ( resource $id )	要素 targetReference を持つ配列を返します。 この要素には (サーバー側で生成して返された) 拡張サービス操作への参照が格納されます。
yaz_es	拡張サービスのリクエストを準備する	void yaz_es ( resource $id , string $type , array $args )	値を返しません。
yaz_get_option	接続に関するオプションの値を返す	string yaz_get_option ( resource $id , string $name )	指定したオプションの値を返します。オプションが設定されていない場合は 空文字列を返します。
yaz_hits	直近の検索に関するヒット数を返す	int yaz_hits ( resource $id [, array &$searchresult ] )	直近の検索に関するヒット数を返します。検索が行われていない場合は 0 を返します。
yaz_itemorder	ILL リクエストパッケージを関して Z39.50 Item Order を準備する	void yaz_itemorder ( resource $id , array $args )	値を返しません。
yaz_present	(Z39.50による)取得の準備を行う	bool yaz_present ( resource $id )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
yaz_range	取得するレコードの範囲を指定する	void yaz_range ( resource $id , int $start , int $number )	値を返しません。
yaz_record	レコードを返す	string yaz_record ( resource $id , int $pos , string $type )	位置 pos のレコードを返します。もし指定した位置に レコードが存在しない場合は空文字列を返します。
yaz_scan_result	スキャンリクエストの結果を返す	array yaz_scan_result ( resource $id [, array &$result ] )	配列 (0..n-1) を返します。n は返された項目の数です。個々の値は ペアになっており、最初の値が項目名、2 つめの値が結果の数となります。
yaz_scan	スキャンの準備をする	void yaz_scan ( resource $id , string $type , string $startterm [, array $flags ] )	値を返しません。
yaz_schema	取得するスキーマを指定する	void yaz_schema ( resource $id , string $schema )	値を返しません。
yaz_search	検索を準備する	bool yaz_search ( resource $id , string $type , string $query )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
yaz_set_option	接続に関するひとつあるいは複数のオプションを設定する	void yaz_set_option ( resource $id , string $name , string $value )	値を返しません。
yaz_sort	ソート条件を設定する	void yaz_sort ( resource $id , string $criteria )	値を返しません。
yaz_syntax	取得用に適当なレコード構文を指定する	void yaz_syntax ( resource $id , string $syntax )	値を返しません。
yaz_wait	Z39.50 リクエストが完了するまで待つ	mixed yaz_wait ([ array &$options ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。 イベントモードでは、成功した場合にリソース、失敗した場合に FALSE を返します。
yp_all	マップを走査し、各エントリ上で関数をコールする	void yp_all ( string $domain , string $map , string $callback )	値を返しません。
yp_cat	マップ全体を含む配列を返す	array yp_cat ( string $domain , string $map )	すべてのマップエントリを配列で返します。 マップのキーが配列のインデックスに、 マップのエントリが配列のデータとなります。
yp_err_string	指定したエラーコードに対応するエラー文字列を返す	string yp_err_string ( int $errorcode )	エラーメッセージを表す文字列を返します。
yp_errno	前の操作のエラーコードを返す	int yp_errno ( void )	エラー定数 YPERR_XXX のいずれかを返します。
yp_first	指定したマップから最初のキー/値の組を返す	array yp_first ( string $domain , string $map )	最初のキー/値 の組を表す配列、あるいはエラー時に FALSE を返します。
yp_get_default_domain	マシンのデフォルト NIS ドメインを取得する	string yp_get_default_domain ( void )	ノードのデフォルトドメイン または FALSE を返します。 返り値は、この後の NIS コールでドメインパラメータとして使用可能です。
yp_master	指定したマップのマスタ NIS サーバーのマシン名を返す	string yp_master ( string $domain , string $map )
yp_match	検索した行を返す	string yp_match ( string $domain , string $map , string $key )	値、あるいはエラー時に FALSE を返します。
yp_next	マップから、次のキー/値の組を返す	array yp_next ( string $domain , string $map , string $key )	次のキー/値 の組を表す配列、あるいはエラー時に FALSE を返します。
yp_order	マップの呼出番号を返す	int yp_order ( string $domain , string $map )	マップの呼出番号、あるいはエラー時に FALSE を返します。
zend_logo_guid	Zend guid を取得する	string zend_logo_guid ( void )	PHPE9568F35-D428-11d2-A769-00AA001ACF42 を返します。
zend_thread_id	現在のスレッドの一意な ID を返す	int zend_thread_id ( void )	スレッドの ID を表す整数値を返します。
zend_version	現在の Zend Engine のバージョンを取得する	string zend_version ( void )	Zend Engine のバージョン番号を文字列で返します。
zip_close	ZIP ファイルアーカイブを閉じる	void zip_close ( resource $zip )	値を返しません。
zip_entry_close	ディレクトリエントリを閉じる	bool zip_entry_close ( resource $zip_entry )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
zip_entry_compressedsize	ディレクトリエントリの圧縮時のサイズを取得する	int zip_entry_compressedsize ( resource $zip_entry )	圧縮後のサイズ
zip_entry_compressionmethod	ディレクトリエントリの圧縮方法を取得する	string zip_entry_compressionmethod ( resource $zip_entry )	圧縮方法
zip_entry_filesize	ディレクトリエントリの実際のファイルサイズを取得する	int zip_entry_filesize ( resource $zip_entry )	ディレクトリエントリのサイズ
zip_entry_name	ディレクトリエントリの名前を取得する	string zip_entry_name ( resource $zip_entry )	ディレクトリエントリの名前
zip_entry_open	読込み用にディレクトリエントリをオープンする	bool zip_entry_open ( resource $zip , resource $zip_entry [, string $mode ] )	成功した場合に TRUE を、失敗した場合に FALSE を返します。
zip_entry_read	オープンされたディレクトリエントリから読み込む	string zip_entry_read ( resource $zip_entry [, int $length = 1024 ] )	読み込んだデータを返します。ファイルの終端に達した場合は空文字列、エラー時には FALSE を返します。
zip_open	Zip ファイルアーカイブをオープンする	resource zip_open ( string $filename )	後で zip_read() および zip_close() で使用されるリソースハンドル、または、 filename が存在しない場合やその他のエラーが発生した場合は エラーの番号を返します。
zip_read	Zip ファイルアーカイブの中の次のエントリを読み込む	resource zip_read ( resource $zip )	後で zip_entry_... 関数で使用されるディレクトリエントリリソース、または、 読み込むエントリがもうない場合に FALSE、 その他のエラーが発生した場合はエラー番号を返します。
zlib_decode	raw/gzip/zlib で符号化されたデータを復元する	string zlib_decode ( string $data [, string $max_decoded_len ] )
zlib_encode	指定した符号化方式でデータを圧縮する	string zlib_encode ( string $data , string $encoding [, string $level = -1 ] )
zlib_get_coding_type	出力圧縮に使用されたコーディングの種類を返す	string zlib_get_coding_type ( void )	返される値は gzip, deflate, もしくは FALSE です。
